«m:/* »«x:Merge parameters into a termcap entry string.
   Copyright (C) 1985, 1987, 1993, 1995, 2000-2008, 2013-2015 Free
   Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.  »«m:*/»

«m:/* »«x:Emacs config.h may rename various library functions such as malloc.  »«m:*/»
«p:#include» «s:<config.h>»

«p:#include» «s:"lisp.h"»		«m:/* »«x:for xmalloc »«m:*/»
«p:#include» «s:"tparam.h"»

«m:/* »«x:Assuming STRING is the value of a termcap string entry
   containing `%' constructs to expand parameters,
   merge in parameter values and store result in block OUTSTRING points to.
   LEN is the length of OUTSTRING.  If more space is needed,
   a block is allocated with `malloc'.

   The value returned is the address of the resulting string.
   This may be OUTSTRING or may be the address of a block got with `malloc'.
   In the latter case, the caller must free the block.

   The fourth and following args to tparam serve as the parameter values.  »«m:*/»

«k:static» «t:char» *«f:tparam1» («t:char» «k:const» *«v:string», «t:char» *«v:outstring», «t:int» «v:len»,
		      «t:char» *«v:up», «t:char» *«v:left», «t:int» *«v:argp»);

«t:char» *
«f:tparam» («k:const» «t:char» *«v:string», «t:char» *«v:outstring», «t:int» «v:len»,
	«t:int» «v:arg0», «t:int» «v:arg1», «t:int» «v:arg2», «t:int» «v:arg3»)
{
  «t:int» «v:arg»[4];

  arg[0] = arg0;
  arg[1] = arg1;
  arg[2] = arg2;
  arg[3] = arg3;
  «k:return» tparam1 (string, outstring, len, «c:NULL», «c:NULL», arg);
}

«t:char» *«v:BC»;
«t:char» *«v:UP»;

«k:static» «t:char» «v:tgoto_buf»[50];

«t:char» *
«f:tgoto» («k:const» «t:char» *«v:cm», «t:int» «v:hpos», «t:int» «v:vpos»)
{
  «t:int» «v:args»[2];
  «k:if» («n:!»cm)
    «k:return» «c:NULL»;
  args[0] = vpos;
  args[1] = hpos;
  «k:return» tparam1 (cm, tgoto_buf, 50, UP, BC, args);
}

«k:static» «t:char» *
«f:tparam1» («k:const» «t:char» *«v:string», «t:char» *«v:outstring», «t:int» «v:len»,
	 «t:char» *«v:up», «t:char» *«v:left», «k:register» «t:int» *«v:argp»)
{
  «k:register» «t:int» «v:c»;
  «k:register» «k:const» «t:char» *«v:p» = string;
  «k:register» «t:char» *«v:op» = outstring;
  «t:char» *«v:outend»;
  «t:char» *«v:new» = 0;
  «t:ptrdiff_t» «v:outlen» = 0;

  «k:register» «t:int» «v:tem»;
  «t:int» *«v:old_argp» = argp;                 «m:/* »«x:can move »«m:*/»
  «t:int» *«v:fixed_argp» = argp;               «m:/* »«x:never moves »«m:*/»
  «t:bool» «v:explicit_param_p» = «c:false»;        «m:/* »«x:set by %p »«m:*/»
  «t:ptrdiff_t» «v:doleft» = 0;
  «t:ptrdiff_t» «v:doup» = 0;
  «t:ptrdiff_t» «v:append_len» = 0;

  outend = outstring + len;

  «k:while» («c:true»)
    {
      «m:/* »«x:If the buffer might be too short, make it bigger.  »«m:*/»
      «k:while» (outend - op - append_len <= 5)
	{
	  «t:ptrdiff_t» «v:offset» = op - outstring;

	  «k:if» (outlen == 0)
	    {
	      outlen = len + 40;
	      new = xmalloc (outlen);
	      memcpy (new, outstring, offset);
	    }
	  «k:else»
	    {
	      new = xpalloc (outstring, &outlen, 1, -1, 1);
	    }

	  op = new + offset;
	  outend = new + outlen;
	  outstring = new;
	}
      c = *p++;
      «k:if» («n:!»c)
	«k:break»;
      «k:if» (c == «s:'%'»)
	{
	  c = *p++;
	  «k:if» (explicit_param_p)
	    explicit_param_p = «c:false»;
	  «k:else»
	    tem = *argp;
	  «k:switch» (c)
	    {
	    «k:case» «s:'d'»:		«m:/* »«x:%d means output in decimal.  »«m:*/»
	      «k:if» (tem < 10)
		«k:goto» «c:onedigit»;
	      «k:if» (tem < 100)
		«k:goto» «c:twodigit»;
	    «k:case» «s:'3'»:		«m:/* »«x:%3 means output in decimal, 3 digits.  »«m:*/»
	      «k:if» (tem > 999)
		{
		  *op++ = tem / 1000 + «s:'0'»;
		  tem %= 1000;
		}
	      *op++ = tem / 100 + «s:'0'»;
	    «k:case» «s:'2'»:		«m:/* »«x:%2 means output in decimal, 2 digits.  »«m:*/»
	    «c:twodigit»:
	      tem %= 100;
	      *op++ = tem / 10 + «s:'0'»;
	    «c:onedigit»:
	      *op++ = tem % 10 + «s:'0'»;
	      argp++;
	      «k:break»;
            «k:case» «s:'p'»:           «m:/* »«x:%pN means use param N for next subst.  »«m:*/»
	      tem = fixed_argp[(*p++) - «s:'1'»];
	      explicit_param_p = «c:true»;
	      «k:break»;
	    «k:case» «s:'C'»:
	      «m:/* »«x:For c-100: print quotient of value by 96, if nonzero,
		 then do like %+.  »«m:*/»
	      «k:if» (tem >= 96)
		{
		  *op++ = tem / 96;
		  tem %= 96;
		}
	    «k:case» «s:'+'»:		«m:/* »«x:%+x means add character code of char x.  »«m:*/»
	      tem += *p++;
	    «k:case» «s:'.'»:		«m:/* »«x:%. means output as character.  »«m:*/»
	      «k:if» (left)
		{
		  «m:/* »«x:If want to forbid output of 0 and \n and \t,
		     and this is one of them, increment it.  »«m:*/»
		  «k:while» (tem == 0 || tem == «s:'\n'» || tem == «s:'\t'»)
		    {
		      «t:ptrdiff_t» «v:append_len_incr»;
		      tem++;
		      «k:if» (argp == old_argp)
			doup++, append_len_incr = strlen (up);
		      «k:else»
			doleft++, append_len_incr = strlen (left);
		      «k:if» (INT_ADD_WRAPV (append_len_incr,
					 append_len, &append_len))
			memory_full (SIZE_MAX);
		    }
		}
	      *op++ = tem ? tem : 0200;
	    «k:case» «s:'f'»:		«m:/* »«x:%f means discard next arg.  »«m:*/»
	      argp++;
	      «k:break»;

	    «k:case» «s:'b'»:		«m:/* »«x:%b means back up one arg (and re-use it).  »«m:*/»
	      argp--;
	      «k:break»;

	    «k:case» «s:'r'»:		«m:/* »«x:%r means interchange following two args.  »«m:*/»
	      argp[0] = argp[1];
	      argp[1] = tem;
	      old_argp++;
	      «k:break»;

	    «k:case» «s:'>'»:		«m:/* »«x:%>xy means if arg is > char code of x, »«m:*/»
	      «k:if» (argp[0] > *p++) «m:/* »«x:then add char code of y to the arg, »«m:*/»
		argp[0] += *p;	«m:/* »«x:and in any case don't output.  »«m:*/»
	      p++;		«m:/* »«x:Leave the arg to be output later.  »«m:*/»
	      «k:break»;

	    «k:case» «s:'a'»:		«m:/* »«x:%a means arithmetic.  »«m:*/»
	      «m:/* »«x:Next character says what operation.
		 Add or subtract either a constant or some other arg.  »«m:*/»
	      «m:/* »«x:First following character is + to add or - to subtract
		 or = to assign.  »«m:*/»
	      «m:/* »«x:Next following char is 'p' and an arg spec
		 (0100 plus position of that arg relative to this one)
		 or 'c' and a constant stored in a character.  »«m:*/»
	      tem = p[2] & 0177;
	      «k:if» (p[1] == «s:'p'»)
		tem = argp[tem - 0100];
	      «k:if» (p[0] == «s:'-'»)
		argp[0] -= tem;
	      «k:else» «k:if» (p[0] == «s:'+'»)
		argp[0] += tem;
	      «k:else» «k:if» (p[0] == «s:'*'»)
		argp[0] *= tem;
	      «k:else» «k:if» (p[0] == «s:'/'»)
		argp[0] /= tem;
	      «k:else»
		argp[0] = tem;

	      p += 3;
	      «k:break»;

	    «k:case» «s:'i'»:		«m:/* »«x:%i means add one to arg, »«m:*/»
	      argp[0] ++;	«m:/* »«x:and leave it to be output later.  »«m:*/»
	      argp[1] ++;	«m:/* »«x:Increment the following arg, too!  »«m:*/»
	      «k:break»;

	    «k:case» «s:'%'»:		«m:/* »«x:%% means output %; no arg.  »«m:*/»
	      «k:goto» «c:ordinary»;

	    «k:case» «s:'n'»:		«m:/* »«x:%n means xor each of next two args with 140.  »«m:*/»
	      argp[0] ^= 0140;
	      argp[1] ^= 0140;
	      «k:break»;

	    «k:case» «s:'m'»:		«m:/* »«x:%m means xor each of next two args with 177.  »«m:*/»
	      argp[0] ^= 0177;
	      argp[1] ^= 0177;
	      «k:break»;

	    «k:case» «s:'B'»:		«m:/* »«x:%B means express arg as BCD char code.  »«m:*/»
	      argp[0] += 6 * (tem / 10);
	      «k:break»;

	    «k:case» «s:'D'»:		«m:/* »«x:%D means weird Delta Data transformation.  »«m:*/»
	      argp[0] -= 2 * (tem % 16);
	      «k:break»;

	    «k:default»:
	      emacs_abort ();
	    }
	}
      «k:else»
	«m:/* »«x:Ordinary character in the argument string.  »«m:*/»
      ordinary:
	*op++ = c;
    }
  *op = 0;
  «k:while» (doup-- > 0)
    op = stpcpy (op, up);
  «k:while» (doleft-- > 0)
    op = stpcpy (op, left);
  «k:return» outstring;
}

«p:#ifdef» DEBUG

«t:int»
«f:main» («t:int» «v:argc», «t:char» **«v:argv»)
{
  «t:char» «v:buf»[50];
  «t:int» «v:args»[3];
  args[0] = atoi (argv[2]);
  args[1] = atoi (argv[3]);
  args[2] = atoi (argv[4]);
  tparam1 (argv[1], buf, 50, «s:"LEFT"», «s:"UP"», args);
  printf («s:"%s\n"», buf);
  «k:return» 0;
}

«p:#endif» «m:/* »«x:DEBUG »«m:*/»
