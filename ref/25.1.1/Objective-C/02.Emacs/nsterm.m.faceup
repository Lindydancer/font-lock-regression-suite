«m:/* »«x:NeXT/Open/GNUstep / MacOSX communication module.      -*- coding: utf-8 -*-

Copyright (C) 1989, 1993-1994, 2005-2006, 2008-2015 Free Software
Foundation, Inc.

This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.  */»

«m:/*»«x:
Originally by Carl Edman
Updated by Christian Limpach (chris@nice.ch)
OpenStep/Rhapsody port by Scott Bender (sbender@harmony-ds.com)
MacOSX/Aqua port by Christophe de Dinechin (descubes@earthlink.net)
GNUstep port and post-20 update by Adrian Robert (arobert@cogsci.ucsd.edu)
*/»

«m:/* »«x:This should be the first include, as it may set up #defines affecting
   interpretation of even the system includes. */»
«p:#include» «s:<config.h>»

«p:#include» «s:<fcntl.h>»
«p:#include» «s:<math.h>»
«p:#include» «s:<pthread.h>»
«p:#include» «s:<sys/types.h>»
«p:#include» «s:<time.h>»
«p:#include» «s:<signal.h>»
«p:#include» «s:<unistd.h>»

«p:#include» «s:<c-ctype.h>»
«p:#include» «s:<c-strcase.h>»
«p:#include» «s:<ftoastr.h>»

«p:#include» «s:"lisp.h"»
«p:#include» «s:"blockinput.h"»
«p:#include» «s:"sysselect.h"»
«p:#include» «s:"nsterm.h"»
«p:#include» «s:"systime.h"»
«p:#include» «s:"character.h"»
«p:#include» «s:"fontset.h"»
«p:#include» «s:"composite.h"»
«p:#include» «s:"ccl.h"»

«p:#include» «s:"termhooks.h"»
«p:#include» «s:"termchar.h"»
«p:#include» «s:"menu.h"»
«p:#include» «s:"window.h"»
«p:#include» «s:"keyboard.h"»
«p:#include» «s:"buffer.h"»
«p:#include» «s:"font.h"»

«p:#ifdef» NS_IMPL_GNUSTEP
«p:#include» «s:"process.h"»
«p:#endif»

«p:#ifdef» NS_IMPL_COCOA
«p:#include» «s:"macfont.h"»
«p:#endif»


«k:extern» «t:NSString» *«v:NSMenuDidBeginTrackingNotification»;


«m:/* »«x:==========================================================================

   NSTRACE, Trace support.

   ========================================================================== */»

«p:#if» NSTRACE_ENABLED

«m:/* »«x:The following use "volatile" since they can be accessed from
   parallel threads. */»
«k:volatile» «t:int» «v:nstrace_num» = 0;
«k:volatile» «t:int» «v:nstrace_depth» = 0;

«m:/* »«x:When 0, no trace is emitted.  This is used by NSTRACE_WHEN and
   NSTRACE_UNLESS to silence functions called.

   TODO: This should really be a thread-local variable, to avoid that
   a function with disabled trace thread silence trace output in
   another.  However, in practice this seldom is a problem. */»
«k:volatile» «t:int» «v:nstrace_enabled_global» = 1;

«m:/* »«x:Called when nstrace_enabled goes out of scope. */»
«t:void» «f:nstrace_leave»(«t:int» * «v:pointer_to_nstrace_enabled»)
{
  «k:if» (*pointer_to_nstrace_enabled)
    {
      --nstrace_depth;
    }
}


«m:/* »«x:Called when nstrace_saved_enabled_global goes out of scope. */»
«t:void» «f:nstrace_restore_global_trace_state»(«t:int» * «v:pointer_to_saved_enabled_global»)
{
  nstrace_enabled_global = *pointer_to_saved_enabled_global;
}


«t:char» «k:const» * «f:nstrace_fullscreen_type_name» («t:int» «v:fs_type»)
{
  «k:switch» (fs_type)
    {
    «k:case» -1:                   «k:return» «s:"-1"»;
    «k:case» FULLSCREEN_NONE:      «k:return» «s:"FULLSCREEN_NONE"»;
    «k:case» FULLSCREEN_WIDTH:     «k:return» «s:"FULLSCREEN_WIDTH"»;
    «k:case» FULLSCREEN_HEIGHT:    «k:return» «s:"FULLSCREEN_HEIGHT"»;
    «k:case» FULLSCREEN_BOTH:      «k:return» «s:"FULLSCREEN_BOTH"»;
    «k:case» FULLSCREEN_MAXIMIZED: «k:return» «s:"FULLSCREEN_MAXIMIZED"»;
    «k:default»:                   «k:return» «s:"FULLSCREEN_?????"»;
    }
}
«p:#endif»


«m:/* »«x:==========================================================================

   NSColor, EmacsColor category.

   ========================================================================== */»
«k:@implementation» «t:NSColor» («t:EmacsColor»)
+ («t:NSColor» *)«f:colorForEmacsRed»:(«t:CGFloat»)«v:red» «f:green»:(«t:CGFloat»)«v:green»
                         «f:blue»:(«t:CGFloat»)«v:blue» «f:alpha»:(«t:CGFloat»)«v:alpha»
{
«p:#ifdef» NS_IMPL_COCOA
«p:#if» MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
  «k:if» (ns_use_srgb_colorspace)
      «k:return» [«t:NSColor» colorWithSRGBRed: red
                                 green: green
                                  blue: blue
                                 alpha: alpha];
«p:#endif»
«p:#endif»
  «k:return» [«t:NSColor» colorWithCalibratedRed: red
                                   green: green
                                    blue: blue
                                   alpha: alpha];
}

- («t:NSColor» *)«f:colorUsingDefaultColorSpace»
{
«p:#ifdef» NS_IMPL_COCOA
«p:#if» MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
  «k:if» (ns_use_srgb_colorspace)
    «k:return» [«k:self» colorUsingColorSpace: [«t:NSColorSpace» sRGBColorSpace]];
«p:#endif»
«p:#endif»
  «k:return» [«k:self» colorUsingColorSpaceName: NSCalibratedRGBColorSpace];
}

«k:@end»

«m:/* »«x:==========================================================================

    Local declarations

   ========================================================================== */»

«m:/* »«x:Convert a symbol indexed with an NSxxx value to a value as defined
   in keyboard.c (lispy_function_key). I hope this is a correct way
   of doing things... */»
«k:static» «t:unsigned» «v:convert_ns_to_X_keysym»[] =
{
  NSHomeFunctionKey,            0x50,
  NSLeftArrowFunctionKey,       0x51,
  NSUpArrowFunctionKey,         0x52,
  NSRightArrowFunctionKey,      0x53,
  NSDownArrowFunctionKey,       0x54,
  NSPageUpFunctionKey,          0x55,
  NSPageDownFunctionKey,        0x56,
  NSEndFunctionKey,             0x57,
  NSBeginFunctionKey,           0x58,
  NSSelectFunctionKey,          0x60,
  NSPrintFunctionKey,           0x61,
  NSClearLineFunctionKey,       0x0B,
  NSExecuteFunctionKey,         0x62,
  NSInsertFunctionKey,          0x63,
  NSUndoFunctionKey,            0x65,
  NSRedoFunctionKey,            0x66,
  NSMenuFunctionKey,            0x67,
  NSFindFunctionKey,            0x68,
  NSHelpFunctionKey,            0x6A,
  NSBreakFunctionKey,           0x6B,

  NSF1FunctionKey,              0xBE,
  NSF2FunctionKey,              0xBF,
  NSF3FunctionKey,              0xC0,
  NSF4FunctionKey,              0xC1,
  NSF5FunctionKey,              0xC2,
  NSF6FunctionKey,              0xC3,
  NSF7FunctionKey,              0xC4,
  NSF8FunctionKey,              0xC5,
  NSF9FunctionKey,              0xC6,
  NSF10FunctionKey,             0xC7,
  NSF11FunctionKey,             0xC8,
  NSF12FunctionKey,             0xC9,
  NSF13FunctionKey,             0xCA,
  NSF14FunctionKey,             0xCB,
  NSF15FunctionKey,             0xCC,
  NSF16FunctionKey,             0xCD,
  NSF17FunctionKey,             0xCE,
  NSF18FunctionKey,             0xCF,
  NSF19FunctionKey,             0xD0,
  NSF20FunctionKey,             0xD1,
  NSF21FunctionKey,             0xD2,
  NSF22FunctionKey,             0xD3,
  NSF23FunctionKey,             0xD4,
  NSF24FunctionKey,             0xD5,

  NSBackspaceCharacter,         0x08,  «m:/* »«x:8: Not on some KBs. */»
  NSDeleteCharacter,            0xFF,  «m:/* »«x:127: Big 'delete' key upper right. */»
  NSDeleteFunctionKey,          0x9F,  «m:/* »«x:63272: Del forw key off main array. */»

  NSTabCharacter,		0x09,
  0x19,				0x09,  «m:/* »«x:left tab->regular since pass shift */»
  NSCarriageReturnCharacter,	0x0D,
  NSNewlineCharacter,		0x0D,
  NSEnterCharacter,		0x8D,

  0x41|NSNumericPadKeyMask,	0xAE,  «m:/* »«x:KP_Decimal */»
  0x43|NSNumericPadKeyMask,	0xAA,  «m:/* »«x:KP_Multiply */»
  0x45|NSNumericPadKeyMask,	0xAB,  «m:/* »«x:KP_Add */»
  0x4B|NSNumericPadKeyMask,	0xAF,  «m:/* »«x:KP_Divide */»
  0x4E|NSNumericPadKeyMask,	0xAD,  «m:/* »«x:KP_Subtract */»
  0x51|NSNumericPadKeyMask,	0xBD,  «m:/* »«x:KP_Equal */»
  0x52|NSNumericPadKeyMask,	0xB0,  «m:/* »«x:KP_0 */»
  0x53|NSNumericPadKeyMask,	0xB1,  «m:/* »«x:KP_1 */»
  0x54|NSNumericPadKeyMask,	0xB2,  «m:/* »«x:KP_2 */»
  0x55|NSNumericPadKeyMask,	0xB3,  «m:/* »«x:KP_3 */»
  0x56|NSNumericPadKeyMask,	0xB4,  «m:/* »«x:KP_4 */»
  0x57|NSNumericPadKeyMask,	0xB5,  «m:/* »«x:KP_5 */»
  0x58|NSNumericPadKeyMask,	0xB6,  «m:/* »«x:KP_6 */»
  0x59|NSNumericPadKeyMask,	0xB7,  «m:/* »«x:KP_7 */»
  0x5B|NSNumericPadKeyMask,	0xB8,  «m:/* »«x:KP_8 */»
  0x5C|NSNumericPadKeyMask,	0xB9,  «m:/* »«x:KP_9 */»

  0x1B,				0x1B   «m:/* »«x:escape */»
};

«m:/* »«x:On OS X picks up the default NSGlobalDomain AppleAntiAliasingThreshold,
   the maximum font size to NOT antialias.  On GNUstep there is currently
   no way to control this behavior. */»
«t:float» «v:ns_antialias_threshold»;

«t:NSArray» *«v:ns_send_types» =0, *«v:ns_return_types» =0, *«v:ns_drag_types» =0;
«t:NSString» *«v:ns_app_name» = @«s:"Emacs"»;  «m:/* »«x:default changed later */»

«m:/* »«x:Display variables */»
«k:struct» «t:ns_display_info» *«t:x_display_list»; «m:/* »«x:Chain of existing displays */»
«t:long» «v:context_menu_value» = 0;

«m:/* »«x:display update */»
«k:static» «k:struct» «t:frame» *«t:ns_updating_frame»;
«k:static» «t:NSView» *«v:focus_view» = NULL;
«k:static» «t:int» «v:ns_window_num» = 0;
«p:#ifdef» NS_IMPL_GNUSTEP
«k:static» «t:NSRect» «v:uRect»;            «m:// »«x:TODO: This is dead, remove it?
»«p:#endif»
«k:static» «t:BOOL» «v:gsaved» = «c:NO»;
«k:static» «t:BOOL» «v:ns_fake_keydown» = «c:NO»;
«p:#ifdef» NS_IMPL_COCOA
«k:static» «t:BOOL» «v:ns_menu_bar_is_hidden» = «c:NO»;
«p:#endif»
«m:/*»«x:static int debug_lock = 0; */»

«m:/* »«x:event loop */»
«k:static» «t:BOOL» «v:send_appdefined» = «c:YES»;
«p:#define» «v:NO_APPDEFINED_DATA» (-8)
«k:static» «t:int» «v:last_appdefined_event_data» = NO_APPDEFINED_DATA;
«k:static» «t:NSTimer» *«v:timed_entry» = 0;
«k:static» «t:NSTimer» *«v:scroll_repeat_entry» = «c:nil»;
«k:static» «t:fd_set» «v:select_readfds», «v:select_writefds»;
«k:enum» { «v:SELECT_HAVE_READ» = 1, «v:SELECT_HAVE_WRITE» = 2, «v:SELECT_HAVE_TMO» = 4 };
«k:static» «t:int» «v:select_nfds» = 0, «v:select_valid» = 0;
«k:static» «k:struct» «t:timespec» «t:select_timeout» = { 0, 0 };
«k:static» «t:int» «v:selfds»[2] = { -1, -1 };
«k:static» «t:pthread_mutex_t» «v:select_mutex»;
«k:static» «t:int» «v:apploopnr» = 0;
«k:static» «t:NSAutoreleasePool» *«v:outerpool»;
«k:static» «k:struct» «t:input_event» *«t:emacs_event» = NULL;
«k:static» «k:struct» «t:input_event» *«t:q_event_ptr» = NULL;
«k:static» «t:int» «v:n_emacs_events_pending» = 0;
«k:static» «t:NSMutableArray» *«v:ns_pending_files», *«v:ns_pending_service_names»,
  *«v:ns_pending_service_args»;
«k:static» «t:BOOL» «v:ns_do_open_file» = «c:NO»;
«k:static» «t:BOOL» «v:ns_last_use_native_fullscreen»;

«m:/* »«x:Non-zero means that a HELP_EVENT has been generated since Emacs
   start.  */»

«k:static» «t:BOOL» «v:any_help_event_p» = «c:NO»;

«k:static» «k:struct» {
  «k:struct» «t:input_event» *«t:q»;
  «t:int» «v:nr», «v:cap»;
} hold_event_q = {
  NULL, 0, 0
};

«k:static» «t:NSString» *«v:represented_filename» = «c:nil»;
«k:static» «k:struct» «t:frame» *«t:represented_frame» = 0;

«p:#ifdef» NS_IMPL_COCOA
«m:/*»«x:
 * State for pending menu activation:
 * MENU_NONE     Normal state
 * MENU_PENDING  A menu has been clicked on, but has been canceled so we can
 *               run lisp to update the menu.
 * MENU_OPENING  Menu is up to date, and the click event is redone so the menu
 *               will open.
 */»
«p:#define» «v:MENU_NONE» 0
«p:#define» «v:MENU_PENDING» 1
«p:#define» «v:MENU_OPENING» 2
«k:static» «t:int» «v:menu_will_open_state» = MENU_NONE;

«m:/* »«x:Saved position for menu click.  */»
«k:static» «t:CGPoint» «v:menu_mouse_point»;
«p:#endif»

«m:/* »«x:Convert modifiers in a NeXTstep event to emacs style modifiers.  */»
«p:#define» «v:NS_FUNCTION_KEY_MASK» 0x800000
«p:#define» «v:NSLeftControlKeyMask»    (0x000001 | NSControlKeyMask)
«p:#define» «v:NSRightControlKeyMask»   (0x002000 | NSControlKeyMask)
«p:#define» «v:NSLeftCommandKeyMask»    (0x000008 | NSCommandKeyMask)
«p:#define» «v:NSRightCommandKeyMask»   (0x000010 | NSCommandKeyMask)
«p:#define» «v:NSLeftAlternateKeyMask»  (0x000020 | NSAlternateKeyMask)
«p:#define» «v:NSRightAlternateKeyMask» (0x000040 | NSAlternateKeyMask)
«p:#define» «f:EV_MODIFIERS2»(«v:flags»)                          \
    (((flags & NSHelpKeyMask) ?           \
           hyper_modifier : 0)                        \
     | («n:!»EQ (ns_right_alternate_modifier, Qleft) && \
        ((flags & NSRightAlternateKeyMask) \
         == NSRightAlternateKeyMask) ? \
           parse_solitary_modifier (ns_right_alternate_modifier) : 0) \
     | ((flags & NSAlternateKeyMask) ?                 \
           parse_solitary_modifier (ns_alternate_modifier) : 0)   \
     | ((flags & NSShiftKeyMask) ?     \
           shift_modifier : 0)                        \
     | («n:!»EQ (ns_right_control_modifier, Qleft) && \
        ((flags & NSRightControlKeyMask) \
         == NSRightControlKeyMask) ? \
           parse_solitary_modifier (ns_right_control_modifier) : 0) \
     | ((flags & NSControlKeyMask) ?      \
           parse_solitary_modifier (ns_control_modifier) : 0)     \
     | ((flags & NS_FUNCTION_KEY_MASK) ?  \
           parse_solitary_modifier (ns_function_modifier) : 0)    \
     | («n:!»EQ (ns_right_command_modifier, Qleft) && \
        ((flags & NSRightCommandKeyMask) \
         == NSRightCommandKeyMask) ? \
           parse_solitary_modifier (ns_right_command_modifier) : 0) \
     | ((flags & NSCommandKeyMask) ?      \
           parse_solitary_modifier (ns_command_modifier):0))
«p:#define» «f:EV_MODIFIERS»(«v:e») EV_MODIFIERS2 ([e modifierFlags])

«p:#define» «f:EV_UDMODIFIERS»(«v:e»)                                      \
    ((([e type] == NSLeftMouseDown) ? down_modifier : 0)       \
     | (([e type] == NSRightMouseDown) ? down_modifier : 0)    \
     | (([e type] == NSOtherMouseDown) ? down_modifier : 0)    \
     | (([e type] == NSLeftMouseDragged) ? down_modifier : 0)  \
     | (([e type] == NSRightMouseDragged) ? down_modifier : 0) \
     | (([e type] == NSOtherMouseDragged) ? down_modifier : 0) \
     | (([e type] == NSLeftMouseUp)   ? up_modifier   : 0)     \
     | (([e type] == NSRightMouseUp)   ? up_modifier   : 0)    \
     | (([e type] == NSOtherMouseUp)   ? up_modifier   : 0))

«p:#define» «f:EV_BUTTON»(«v:e»)                                                         \
    ((([e type] == NSLeftMouseDown) || ([e type] == NSLeftMouseUp)) ? 0 :    \
      (([e type] == NSRightMouseDown) || ([e type] == NSRightMouseUp)) ? 2 : \
     [e buttonNumber] - 1)

«m:/* »«x:Convert the time field to a timestamp in milliseconds. */»
«p:#define» «f:EV_TIMESTAMP»(«v:e») ([e timestamp] * 1000)

«m:/* »«x:This is a piece of code which is common to all the event handling
   methods.  Maybe it should even be a function.  */»
«p:#define» «f:EV_TRAILER»(«v:e»)                                                   \
  {                                                                     \
    XSETFRAME (emacs_event->frame_or_window, emacsframe);               \
    EV_TRAILER2 (e);                                                    \
  }

«p:#define» «f:EV_TRAILER2»(«v:e»)                                                  \
  {                                                                     \
      «k:if» (e) emacs_event->timestamp = EV_TIMESTAMP (e);                 \
      «k:if» (q_event_ptr)                                                  \
        {                                                               \
          «t:Lisp_Object» «v:tem» = Vinhibit_quit;                              \
          Vinhibit_quit = Qt;                                           \
          n_emacs_events_pending++;                                     \
          kbd_buffer_store_event_hold (emacs_event, q_event_ptr);       \
          Vinhibit_quit = tem;                                          \
        }                                                               \
      «k:else»                                                              \
        hold_event (emacs_event);                                       \
      EVENT_INIT (*emacs_event);                                        \
      ns_send_appdefined (-1);                                          \
    }

«m:/* »«x:TODO: get rid of need for these forward declarations */»
«k:static» «t:void» «f:ns_condemn_scroll_bars» («k:struct» «t:frame» *«t:f»);
«k:static» «t:void» «f:ns_judge_scroll_bars» («k:struct» «t:frame» *«t:f»);
«t:void» «f:x_set_frame_alpha» («k:struct» «t:frame» *«t:f»);


«m:/* »«x:==========================================================================

    Utilities

   ========================================================================== */»

«t:void»
«f:ns_set_represented_filename» («t:NSString»* «v:fstr», «k:struct» «t:frame» *«t:f»)
{
  represented_filename = [fstr retain];
  represented_frame = f;
}

«t:void»
«f:ns_init_events» («k:struct» «t:input_event»* «t:ev»)
{
  EVENT_INIT (*ev);
  emacs_event = ev;
}

«t:void»
«f:ns_finish_events» ()
{
  emacs_event = NULL;
}

«k:static» «t:void»
«f:hold_event» («k:struct» «t:input_event» *«t:event»)
{
  «k:if» (hold_event_q.nr == hold_event_q.cap)
    {
      «k:if» (hold_event_q.cap == 0) hold_event_q.cap = 10;
      «k:else» hold_event_q.cap *= 2;
      hold_event_q.q =
        xrealloc (hold_event_q.q, hold_event_q.cap * sizeof *hold_event_q.q);
    }

  hold_event_q.q[hold_event_q.nr++] = *event;
  «m:/* »«x:Make sure ns_read_socket is called, i.e. we have input.  */»
  raise (SIGIO);
  send_appdefined = «c:YES»;
}

«k:static» «t:Lisp_Object»
«f:append2» («t:Lisp_Object» «v:list», «t:Lisp_Object» «v:item»)
«m:/* »«x:--------------------------------------------------------------------------
   Utility to append to a list
   -------------------------------------------------------------------------- */»
{
  «k:return» CALLN (Fnconc, list, list1 (item));
}


«k:const» «t:char» *
«f:ns_etc_directory» («t:void»)
«m:/* »«x:If running as a self-contained app bundle, return as a string the
   filename of the etc directory, if present; else nil.  */»
{
  «t:NSBundle» *«v:bundle» = [«t:NSBundle» mainBundle];
  «t:NSString» *«v:resourceDir» = [bundle resourcePath];
  «t:NSString» *«v:resourcePath»;
  «t:NSFileManager» *«v:fileManager» = [«t:NSFileManager» defaultManager];
  «t:BOOL» «v:isDir»;

  resourcePath = [resourceDir stringByAppendingPathComponent: @«s:"etc"»];
  «k:if» ([fileManager fileExistsAtPath: resourcePath isDirectory: &isDir])
    {
      «k:if» (isDir) «k:return» [resourcePath UTF8String];
    }
  «k:return» NULL;
}


«k:const» «t:char» *
«f:ns_exec_path» («t:void»)
«m:/* »«x:If running as a self-contained app bundle, return as a path string
   the filenames of the libexec and bin directories, ie libexec:bin.
   Otherwise, return nil.
   Normally, Emacs does not add its own bin/ directory to the PATH.
   However, a self-contained NS build has a different layout, with
   bin/ and libexec/ subdirectories in the directory that contains
   Emacs.app itself.
   We put libexec first, because init_callproc_1 uses the first
   element to initialize exec-directory.  An alternative would be
   for init_callproc to check for invocation-directory/libexec.
*/»
{
  «t:NSBundle» *«v:bundle» = [«t:NSBundle» mainBundle];
  «t:NSString» *«v:resourceDir» = [bundle resourcePath];
  «t:NSString» *«v:binDir» = [bundle bundlePath];
  «t:NSString» *«v:resourcePath», *«v:resourcePaths»;
  «t:NSRange» «v:range»;
  «t:NSString» *«v:pathSeparator» = [«t:NSString» stringWithFormat: @«s:"%c"», SEPCHAR];
  «t:NSFileManager» *«v:fileManager» = [«t:NSFileManager» defaultManager];
  «t:NSArray» *«v:paths»;
  «t:NSEnumerator» *«v:pathEnum»;
  «t:BOOL» «v:isDir»;

  range = [resourceDir rangeOfString: @«s:"Contents"»];
  «k:if» (range.location != NSNotFound)
    {
      binDir = [binDir stringByAppendingPathComponent: @«s:"Contents"»];
«p:#ifdef» NS_IMPL_COCOA
      binDir = [binDir stringByAppendingPathComponent: @«s:"MacOS"»];
«p:#endif»
    }

  paths = [binDir stringsByAppendingPaths:
                [«t:NSArray» arrayWithObjects: @«s:"libexec"», @«s:"bin"», «c:nil»]];
  pathEnum = [paths objectEnumerator];
  resourcePaths = @«s:""»;

  «k:while» ((resourcePath = [pathEnum nextObject]))
    {
      «k:if» ([fileManager fileExistsAtPath: resourcePath isDirectory: &isDir])
        «k:if» (isDir)
          {
            «k:if» ([resourcePaths length] > 0)
              resourcePaths
                = [resourcePaths stringByAppendingString: pathSeparator];
            resourcePaths
              = [resourcePaths stringByAppendingString: resourcePath];
          }
    }
  «k:if» ([resourcePaths length] > 0) «k:return» [resourcePaths UTF8String];

  «k:return» NULL;
}


«k:const» «t:char» *
«f:ns_load_path» («t:void»)
«m:/* »«x:If running as a self-contained app bundle, return as a path string
   the filenames of the site-lisp and lisp directories.
   Ie, site-lisp:lisp.  Otherwise, return nil.  */»
{
  «t:NSBundle» *«v:bundle» = [«t:NSBundle» mainBundle];
  «t:NSString» *«v:resourceDir» = [bundle resourcePath];
  «t:NSString» *«v:resourcePath», *«v:resourcePaths»;
  «t:NSString» *«v:pathSeparator» = [«t:NSString» stringWithFormat: @«s:"%c"», SEPCHAR];
  «t:NSFileManager» *«v:fileManager» = [«t:NSFileManager» defaultManager];
  «t:BOOL» «v:isDir»;
  «t:NSArray» *«v:paths» = [resourceDir stringsByAppendingPaths:
                              [«t:NSArray» arrayWithObjects:
                                         @«s:"site-lisp"», @«s:"lisp"», «c:nil»]];
  «t:NSEnumerator» *«v:pathEnum» = [paths objectEnumerator];
  resourcePaths = @«s:""»;

  «m:/* »«x:Hack to skip site-lisp.  */»
  «k:if» (no_site_lisp) resourcePath = [pathEnum nextObject];

  «k:while» ((resourcePath = [pathEnum nextObject]))
    {
      «k:if» ([fileManager fileExistsAtPath: resourcePath isDirectory: &isDir])
        «k:if» (isDir)
          {
            «k:if» ([resourcePaths length] > 0)
              resourcePaths
                = [resourcePaths stringByAppendingString: pathSeparator];
            resourcePaths
              = [resourcePaths stringByAppendingString: resourcePath];
          }
    }
  «k:if» ([resourcePaths length] > 0) «k:return» [resourcePaths UTF8String];

  «k:return» NULL;
}


«t:void»
«f:ns_release_object» («t:void» *«v:obj»)
«m:/* »«x:--------------------------------------------------------------------------
    Release an object (callable from C)
   -------------------------------------------------------------------------- */»
{
    [(«t:id»)«t:obj» «v:release»];
}


«t:void»
«f:ns_retain_object» («t:void» *«v:obj»)
«m:/* »«x:--------------------------------------------------------------------------
    Retain an object (callable from C)
   -------------------------------------------------------------------------- */»
{
    [(«t:id»)«t:obj» «v:retain»];
}


«t:void» *
«f:ns_alloc_autorelease_pool» («t:void»)
«m:/* »«x:--------------------------------------------------------------------------
     Allocate a pool for temporary objects (callable from C)
   -------------------------------------------------------------------------- */»
{
  «k:return» [[«t:NSAutoreleasePool» alloc] init];
}


«t:void»
«f:ns_release_autorelease_pool» («t:void» *«v:pool»)
«m:/* »«x:--------------------------------------------------------------------------
     Free a pool and temporary objects it refers to (callable from C)
   -------------------------------------------------------------------------- */»
{
  ns_release_object (pool);
}


«m:/* »«x:True, if the menu bar should be hidden.  */»

«k:static» «t:BOOL»
«f:ns_menu_bar_should_be_hidden» («t:void»)
{
  «k:return» «n:!»NILP (ns_auto_hide_menu_bar)
    && [«t:NSApp» respondsToSelector:«k:@selector»(setPresentationOptions:)];
}


«k:static» «t:CGFloat»
«f:ns_menu_bar_height» («t:NSScreen» *«v:screen»)
«m:/* »«x:The height of the menu bar, if visible. */»
{
  «m://  »«x:NSTRACE ("ns_menu_bar_height");
»
  «t:CGFloat» «v:res»;

  «k:if» (ns_menu_bar_should_be_hidden())
    {
      res = 0;
    }
  «k:else»
    {
      «t:NSRect» «v:screenFrame» = [screen frame];
      «t:NSRect» «v:screenVisibleFrame» = [screen visibleFrame];

      «t:CGFloat» «v:frameTop» = screenFrame.origin.y + screenFrame.size.height;
      «t:CGFloat» «v:visibleFrameTop» = (screenVisibleFrame.origin.y
                                 + screenVisibleFrame.size.height);

      res = frameTop - visibleFrameTop;

    }

  «m:// »«x:NSTRACE_MSG (NSTRACE_FMT_RETURN "%.0f", res);
»
  «k:return» res;
}


«m:/* »«x:==========================================================================

    Focus (clipping) and screen update

   ========================================================================== */»

«m://»«x:
»«m:// »«x:Window constraining
»«m:// »«x:-------------------
»«m://»«x:
»«m:// »«x:To ensure that the windows are not placed under the menu bar, they
»«m:// »«x:are typically moved by the call-back constrainFrameRect. However,
»«m:// »«x:by overriding it, it's possible to inhibit this, leaving the window
»«m:// »«x:in it's original position.
»«m://»«x:
»«m:// »«x:It's possible to hide the menu bar. However, technically, it's only
»«m:// »«x:possible to hide it when the application is active. To ensure that
»«m:// »«x:this work properly, the menu bar and window constraining are
»«m:// »«x:deferred until the application becomes active.
»«m://»«x:
»«m:// »«x:Even though it's not possible to manually move a window above the
»«m:// »«x:top of the screen, it is allowed if it's done programmatically,
»«m:// »«x:when the menu is hidden. This allows the editable area to cover the
»«m:// »«x:full screen height.
»«m://»«x:
»«m:// »«x:Test cases
»«m:// »«x:----------
»«m://»«x:
»«m:// »«x:Use the following extra files:
»«m://»«x:
»«m://    »«x:init.el:
»«m://       »«x:;; Hide menu and place frame slightly above the top of the screen.
»«m://       »«x:(setq ns-auto-hide-menu-bar t)
»«m://       »«x:(set-frame-position (selected-frame) 0 -20)
»«m://»«x:
»«m:// »«x:Test 1:
»«m://»«x:
»«m://    »«x:emacs -Q -l init.el
»«m://»«x:
»«m://    »«x:Result: No menu bar, and the title bar should be above the screen.
»«m://»«x:
»«m:// »«x:Test 2:
»«m://»«x:
»«m://    »«x:emacs -Q
»«m://»«x:
»«m://    »«x:Result: Menu bar visible, frame placed immediately below the menu.
»«m://»«x:
»
«k:static» «t:NSRect» «f:constrain_frame_rect»(«t:NSRect» «v:frameRect»)
{
  NSTRACE («s:"constrain_frame_rect("» NSTRACE_FMT_RECT «s:")"»,
             NSTRACE_ARG_RECT (frameRect));

  «m:// »«x:--------------------
»  «m:// »«x:Collect information about the screen the frame is covering.
»  «m://»«x:
»
  «t:NSArray» *«v:screens» = [«t:NSScreen» screens];
  «t:NSUInteger» «v:nr_screens» = [screens count];

  «t:int» «v:i»;

  «m:// »«x:The height of the menu bar, if present in any screen the frame is
»  «m:// »«x:displayed in.
»  «t:int» «v:menu_bar_height» = 0;

  «m:// »«x:A rectangle covering all the screen the frame is displayed in.
»  «t:NSRect» «v:multiscreenRect» = NSMakeRect(0, 0, 0, 0);
  «k:for» (i = 0; i < nr_screens; ++i )
    {
      «t:NSScreen» *«v:s» = [screens objectAtIndex: i];
      «t:NSRect» «v:scrRect» = [s frame];

      NSTRACE_MSG («s:"Screen %d: "» NSTRACE_FMT_RECT,
                   i, NSTRACE_ARG_RECT (scrRect));

      «k:if» (NSIntersectionRect (frameRect, scrRect).size.height != 0)
        {
          multiscreenRect = NSUnionRect (multiscreenRect, scrRect);

          menu_bar_height = max(menu_bar_height, ns_menu_bar_height (s));
        }
    }

  NSTRACE_RECT («s:"multiscreenRect"», multiscreenRect);

  NSTRACE_MSG («s:"menu_bar_height: %d"», menu_bar_height);

  «k:if» (multiscreenRect.size.width == 0
      || multiscreenRect.size.height == 0)
    {
      «m:// »«x:Failed to find any monitor, give up.
»      NSTRACE_MSG («s:"multiscreenRect empty"»);
      NSTRACE_RETURN_RECT (frameRect);
      «k:return» frameRect;
    }


  «m:// »«x:--------------------
»  «m:// »«x:Find a suitable placement.
»  «m://»«x:
»
  «k:if» (ns_menu_bar_should_be_hidden())
    {
      «m:// »«x:When the menu bar is hidden, the user may place part of the
»      «m:// »«x:frame above the top of the screen, for example to hide the
»      «m:// »«x:title bar.
»      «m://»«x:
»      «m:// »«x:Hence, keep the original position.
»    }
  «k:else»
    {
      «m:// »«x:Ensure that the frame is below the menu bar, or below the top
»      «m:// »«x:of the screen.
»      «m://»«x:
»      «m:// »«x:This assume that the menu bar is placed at the top in the
»      «m:// »«x:rectangle that covers the monitors.  (It doesn't have to be,
»      «m:// »«x:but if it's not it's hard to do anything useful.)
»      «t:CGFloat» «v:topOfWorkArea» = (multiscreenRect.origin.y
                               + multiscreenRect.size.height
                               - menu_bar_height);

      «t:CGFloat» «v:topOfFrame» = frameRect.origin.y + frameRect.size.height;
      «k:if» (topOfFrame > topOfWorkArea)
        {
          frameRect.origin.y -= topOfFrame - topOfWorkArea;
          NSTRACE_RECT («s:"After placement adjust"», frameRect);
        }
    }

  «m:// »«x:Include the following section to restrict frame to the screens.
»  «m:// »«x:(If so, update it to allow the frame to stretch down below the
»  «m:// »«x:screen.)
»«p:#if» 0
  «m:// »«x:--------------------
»  «m:// »«x:Ensure frame doesn't stretch below the screens.
»  «m://»«x:
»
  «t:CGFloat» «v:diff» = multiscreenRect.origin.y - frameRect.origin.y;

  «k:if» (diff > 0)
    {
      frameRect.origin.y = multiscreenRect.origin.y;
      frameRect.size.height -= diff;
    }
«p:#endif»

  NSTRACE_RETURN_RECT (frameRect);
  «k:return» frameRect;
}


«k:static» «t:void»
«f:ns_constrain_all_frames» («t:void»)
«m:/* »«x:--------------------------------------------------------------------------
     Ensure that the menu bar doesn't cover any frames.
   -------------------------------------------------------------------------- */»
{
  «t:Lisp_Object» «v:tail», «v:frame»;

  NSTRACE («s:"ns_constrain_all_frames"»);

  block_input ();

  «f:FOR_EACH_FRAME» («t:tail», «t:frame»)
    {
      «k:struct» «t:frame» *«t:f» = XFRAME (frame);
      «k:if» (FRAME_NS_P (f))
        {
          «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);

          «k:if» («n:!»[view isFullscreen])
            {
              [[view window]
                setFrame:constrain_frame_rect([[view window] frame])
                 display:«c:NO»];
            }
        }
    }

  unblock_input ();
}


«k:static» «t:void»
«f:ns_update_auto_hide_menu_bar» («t:void»)
«m:/* »«x:--------------------------------------------------------------------------
     Show or hide the menu bar, based on user setting.
   -------------------------------------------------------------------------- */»
{
«p:#ifdef» NS_IMPL_COCOA
  NSTRACE («s:"ns_update_auto_hide_menu_bar"»);

  block_input ();

  «k:if» (NSApp != «c:nil» && [«t:NSApp» isActive])
    {
      «m:// »«x:Note, "setPresentationOptions" triggers an error unless the
»      «m:// »«x:application is active.
»      «t:BOOL» «v:menu_bar_should_be_hidden» = ns_menu_bar_should_be_hidden ();

      «k:if» (menu_bar_should_be_hidden != ns_menu_bar_is_hidden)
        {
          «t:NSApplicationPresentationOptions» «v:options»
            = NSApplicationPresentationDefault;

          «k:if» (menu_bar_should_be_hidden)
            options |= NSApplicationPresentationAutoHideMenuBar
              | NSApplicationPresentationAutoHideDock;

          [«t:NSApp» setPresentationOptions: options];

          ns_menu_bar_is_hidden = menu_bar_should_be_hidden;

          «k:if» («n:!»ns_menu_bar_is_hidden)
            {
              ns_constrain_all_frames ();
            }
        }
    }

  unblock_input ();
«p:#endif»
}


«k:static» «t:void»
«f:ns_update_begin» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
   Prepare for a grouped sequence of drawing calls
   external (RIF) call; whole frame, called before update_window_begin
   -------------------------------------------------------------------------- */»
{
  «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);
  NSTRACE_WHEN (NSTRACE_GROUP_UPDATES, «s:"ns_update_begin"»);

  ns_update_auto_hide_menu_bar ();

«p:#ifdef» NS_IMPL_COCOA
  «k:if» ([view isFullscreen] && [view fsIsNative])
  {
    «m:// »«x:Fix reappearing tool bar in fullscreen for OSX 10.7
»    «t:BOOL» «v:tbar_visible» = FRAME_EXTERNAL_TOOL_BAR (f) ? «c:YES» : «c:NO»;
    «t:NSToolbar» *«v:toolbar» = [FRAME_NS_VIEW (f) toolbar];
    «k:if» («n:!» tbar_visible != «n:!» [toolbar isVisible])
      [toolbar setVisible: tbar_visible];
  }
«p:#endif»

  ns_updating_frame = f;
  [view lockFocus];

  «m:/* »«x:drawRect may have been called for say the minibuffer, and then clip path
     is for the minibuffer.  But the display engine may draw more because
     we have set the frame as garbaged.  So reset clip path to the whole
     view.  */»
«p:#ifdef» NS_IMPL_COCOA
  {
    «t:NSBezierPath» *«v:bp»;
    «t:NSRect» «v:r» = [view frame];
    «t:NSRect» «v:cr» = [[view window] frame];
    «m:/* »«x:If a large frame size is set, r may be larger than the window frame
       before constrained.  In that case don't change the clip path, as we
       will clear in to the tool bar and title bar.  */»
    «k:if» (r.size.height
        + FRAME_NS_TITLEBAR_HEIGHT (f)
        + «f:FRAME_TOOLBAR_HEIGHT» (f) <= cr.size.height)
      {
        bp = [[«t:NSBezierPath» bezierPathWithRect: r] retain];
        [bp setClip];
        [bp release];
      }
  }
«p:#endif»

«p:#ifdef» NS_IMPL_GNUSTEP
  uRect = NSMakeRect (0, 0, 0, 0);
«p:#endif»
}


«k:static» «t:void»
«f:ns_update_window_begin» («k:struct» «t:window» *«t:w»)
«m:/* »«x:--------------------------------------------------------------------------
   Prepare for a grouped sequence of drawing calls
   external (RIF) call; for one window, called after update_begin
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:frame» *«t:f» = XFRAME (WINDOW_FRAME (w));
  «t:Mouse_HLInfo» *«v:hlinfo» = MOUSE_HL_INFO (f);

  NSTRACE_WHEN (NSTRACE_GROUP_UPDATES, «s:"ns_update_window_begin"»);
  w->output_cursor = w->cursor;

  block_input ();

  «k:if» (f == hlinfo->mouse_face_mouse_frame)
    {
      «m:/* »«x:Don't do highlighting for mouse motion during the update.  */»
      hlinfo->mouse_face_defer = 1;

        «m:/* »«x:If the frame needs to be redrawn,
           simply forget about any prior mouse highlighting.  */»
      «k:if» (FRAME_GARBAGED_P (f))
        hlinfo->mouse_face_window = Qnil;

      «m:/* »«x:(further code for mouse faces ifdef'd out in other terms elided) */»
    }

  unblock_input ();
}


«k:static» «t:void»
«f:ns_update_window_end» («k:struct» «t:window» *«t:w», «t:bool» «v:cursor_on_p»,
                      «t:bool» «v:mouse_face_overwritten_p»)
«m:/* »«x:--------------------------------------------------------------------------
   Finished a grouped sequence of drawing calls
   external (RIF) call; for one window called before update_end
   -------------------------------------------------------------------------- */»
{
  NSTRACE_WHEN (NSTRACE_GROUP_UPDATES, «s:"ns_update_window_end"»);

  «m:/* »«x:note: this fn is nearly identical in all terms */»
  «k:if» («n:!»w->pseudo_window_p)
    {
      block_input ();

      «k:if» (cursor_on_p)
	display_and_set_cursor (w, 1,
				w->output_cursor.hpos, w->output_cursor.vpos,
				w->output_cursor.x, w->output_cursor.y);

      «k:if» (draw_window_fringes (w, 1))
	{
	  «k:if» (WINDOW_RIGHT_DIVIDER_WIDTH (w))
	    x_draw_right_divider (w);
	  «k:else»
	    x_draw_vertical_border (w);
	}

      unblock_input ();
    }

  «m:/* »«x:If a row with mouse-face was overwritten, arrange for
     frame_up_to_date to redisplay the mouse highlight.  */»
  «k:if» (mouse_face_overwritten_p)
    reset_mouse_highlight (MOUSE_HL_INFO (XFRAME (w->frame)));
}


«k:static» «t:void»
«f:ns_update_end» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
   Finished a grouped sequence of drawing calls
   external (RIF) call; for whole frame, called after update_window_end
   -------------------------------------------------------------------------- */»
{
  «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);

  NSTRACE_WHEN (NSTRACE_GROUP_UPDATES, «s:"ns_update_end"»);

«m:/*   »«x:if (f == MOUSE_HL_INFO (f)->mouse_face_mouse_frame) */»
  MOUSE_HL_INFO (f)->mouse_face_defer = 0;

  block_input ();

  [view unlockFocus];
  [[view window] flushWindow];

  unblock_input ();
  ns_updating_frame = NULL;
}

«k:static» «t:void»
«f:ns_focus» («k:struct» «t:frame» *«t:f», «t:NSRect» *«v:r», «t:int» «v:n»)
«m:/* »«x:--------------------------------------------------------------------------
   Internal: Focus on given frame.  During small local updates this is used to
     draw, however during large updates, ns_update_begin and ns_update_end are
     called to wrap the whole thing, in which case these calls are stubbed out.
     Except, on GNUstep, we accumulate the rectangle being drawn into, because
     the back end won't do this automatically, and will just end up flushing
     the entire window.
   -------------------------------------------------------------------------- */»
{
  NSTRACE_WHEN (NSTRACE_GROUP_FOCUS, «s:"ns_focus"»);
  «k:if» (r != NULL)
    {
      NSTRACE_RECT («s:"r"», *r);
    }

  «k:if» (f != ns_updating_frame)
    {
      «t:NSView» *«v:view» = FRAME_NS_VIEW (f);
      «k:if» (view != focus_view)
        {
          «k:if» (focus_view != NULL)
            {
              [focus_view unlockFocus];
              [[focus_view window] flushWindow];
«m:/*»«x:debug_lock--; */»
            }

          «k:if» (view)
            [view lockFocus];
          focus_view = view;
«m:/*»«x:if (view) debug_lock++; */»
        }
    }

  «m:/* »«x:clipping */»
  «k:if» (r)
    {
      [[«t:NSGraphicsContext» currentContext] saveGraphicsState];
      «k:if» (n == 2)
        NSRectClipList (r, 2);
      «k:else»
        NSRectClip (*r);
      gsaved = «c:YES»;
    }
}


«k:static» «t:void»
«f:ns_unfocus» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     Internal: Remove focus on given frame
   -------------------------------------------------------------------------- */»
{
  NSTRACE_WHEN (NSTRACE_GROUP_FOCUS, «s:"ns_unfocus"»);

  «k:if» (gsaved)
    {
      [[«t:NSGraphicsContext» currentContext] restoreGraphicsState];
      gsaved = «c:NO»;
    }

  «k:if» (f != ns_updating_frame)
    {
      «k:if» (focus_view != NULL)
        {
          [focus_view unlockFocus];
          [[focus_view window] flushWindow];
          focus_view = NULL;
«m:/*»«x:debug_lock--; */»
        }
    }
}


«k:static» «t:void»
«f:ns_clip_to_row» («k:struct» «t:window» *«t:w», «k:struct» «t:glyph_row» *«t:row»,
		«k:enum» «t:glyph_row_area» «t:area», «t:BOOL» «v:gc»)
«m:/* »«x:--------------------------------------------------------------------------
     Internal (but parallels other terms): Focus drawing on given row
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:frame» *«t:f» = XFRAME (WINDOW_FRAME (w));
  «t:NSRect» «v:clip_rect»;
  «t:int» «v:window_x», «v:window_y», «v:window_width»;

  window_box (w, area, &window_x, &window_y, &window_width, 0);

  clip_rect.origin.x = window_x;
  clip_rect.origin.y = WINDOW_TO_FRAME_PIXEL_Y (w, max (0, row->y));
  clip_rect.origin.y = max (clip_rect.origin.y, window_y);
  clip_rect.size.width = window_width;
  clip_rect.size.height = row->visible_height;

  ns_focus (f, &clip_rect, 1);
}


«m:/* »«x:==========================================================================

    Visibel bell and beep.

   ========================================================================== */»


«k:@interface» «t:EmacsBell» : «t:NSImageView»
{
  «m:// »«x:Number of currently active bell:s.
»  «t:unsigned» «t:int» nestCount;
}
- («t:void»)«f:show»:(«t:NSView» *)«v:view»;
- («t:void»)«f:hide»;
«k:@end»

«k:@implementation» «t:EmacsBell»

- («t:id»)«f:init»;
{
  «k:if» ((«k:self» = [«k:super» init]))
    {
      nestCount = 0;
      «k:self».image = [«t:NSImage» imageNamed:NSImageNameCaution];
    }
  «k:return» «k:self»;
}

- («t:void»)«f:show»:(«t:NSView» *)«v:view»
{
  NSTRACE («s:"[EmacsBell show:]"»);
  NSTRACE_MSG («s:"nestCount: %u"», nestCount);

  «m:// »«x:Show the image, unless it's already shown.
»  «k:if» (nestCount == 0)
    {
      «t:NSRect» «v:rect» = [view bounds];
      «t:NSPoint» «v:pos»;
      pos.x = rect.origin.x + (rect.size.width  - «k:self».image.size.width )/2;
      pos.y = rect.origin.y + (rect.size.height - «k:self».image.size.height)/2;

      [«k:self» setFrameOrigin:pos];
      [«k:self» setFrameSize:«k:self».image.size];

      [[[view window] contentView] addSubview:«k:self»
                                   positioned:NSWindowAbove
                                   relativeTo:«c:nil»];
    }

  ++nestCount;

  [«k:self» performSelector:«k:@selector»(hide) withObject:«k:self» afterDelay:0.5];
}


- («t:void»)«f:hide»
{
  «m:// »«x:Note: Trace output from this method isn't shown, reason unknown.
»  «m:// »«x:NSTRACE ("[EmacsBell hide]");
»
  --nestCount;

  «m:// »«x:Remove the image once the last bell became inactive.
»  «k:if» (nestCount == 0)
    {
      [«k:self» removeFromSuperview];
    }
}

«k:@end»

«k:static» «t:void»
«f:ns_ring_bell» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     "Beep" routine
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"ns_ring_bell"»);
  «k:if» (visible_bell)
    {
      «k:struct» «t:frame» *«t:frame» = SELECTED_FRAME ();
      «t:NSView» *«v:view»;

      «k:static» «t:EmacsBell» * «v:bell_view» = «c:nil»;
      «k:if» (bell_view == «c:nil»)
        {
          bell_view = [[«t:EmacsBell» alloc] init];
          [bell_view retain];
        }

      block_input ();

      view = FRAME_NS_VIEW (frame);
      «k:if» (view != «c:nil»)
        {
          [bell_view show:view];
        }

      unblock_input ();
    }
  «k:else»
    {
      NSBeep ();
    }
}


«m:/* »«x:==========================================================================

    Frame / window manager related functions

   ========================================================================== */»


«k:static» «t:void»
«f:ns_raise_frame» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     Bring window to foreground and make it active
   -------------------------------------------------------------------------- */»
{
  «t:NSView» *«v:view»;

  check_window_system (f);
  view = FRAME_NS_VIEW (f);
  block_input ();
  «k:if» (FRAME_VISIBLE_P (f))
    [[view window] makeKeyAndOrderFront: NSApp];
  unblock_input ();
}


«k:static» «t:void»
«f:ns_lower_frame» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     Send window to back
   -------------------------------------------------------------------------- */»
{
  «t:NSView» *«v:view»;

  check_window_system (f);
  view = FRAME_NS_VIEW (f);
  block_input ();
  [[view window] orderBack: NSApp];
  unblock_input ();
}


«k:static» «t:void»
«f:ns_frame_raise_lower» («k:struct» «t:frame» *«t:f», «t:bool» «v:raise»)
«m:/* »«x:--------------------------------------------------------------------------
     External (hook)
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"ns_frame_raise_lower"»);

  «k:if» (raise)
    ns_raise_frame (f);
  «k:else»
    ns_lower_frame (f);
}


«k:static» «t:void»
«f:ns_frame_rehighlight» («k:struct» «t:frame» *«t:frame»)
«m:/* »«x:--------------------------------------------------------------------------
     External (hook): called on things like window switching within frame
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:ns_display_info» *«t:dpyinfo» = FRAME_DISPLAY_INFO (frame);
  «k:struct» «t:frame» *«t:old_highlight» = dpyinfo->x_highlight_frame;

  NSTRACE («s:"ns_frame_rehighlight"»);
  «k:if» (dpyinfo->x_focus_frame)
    {
      dpyinfo->x_highlight_frame
	= (FRAMEP (FRAME_FOCUS_FRAME (dpyinfo->x_focus_frame))
           ? XFRAME (FRAME_FOCUS_FRAME (dpyinfo->x_focus_frame))
           : dpyinfo->x_focus_frame);
      «k:if» («n:!»FRAME_LIVE_P (dpyinfo->x_highlight_frame))
        {
          fset_focus_frame (dpyinfo->x_focus_frame, Qnil);
          dpyinfo->x_highlight_frame = dpyinfo->x_focus_frame;
        }
    }
  «k:else»
      dpyinfo->x_highlight_frame = 0;

  «k:if» (dpyinfo->x_highlight_frame &&
         dpyinfo->x_highlight_frame != old_highlight)
    {
      «k:if» (old_highlight)
	{
          x_update_cursor (old_highlight, 1);
	  x_set_frame_alpha (old_highlight);
	}
      «k:if» (dpyinfo->x_highlight_frame)
	{
          x_update_cursor (dpyinfo->x_highlight_frame, 1);
          x_set_frame_alpha (dpyinfo->x_highlight_frame);
	}
    }
}


«t:void»
«f:x_make_frame_visible» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     External: Show the window (X11 semantics)
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"x_make_frame_visible"»);
  «m:/* »«x:XXX: at some points in past this was not needed, as the only place that
     called this (frame.c:Fraise_frame ()) also called raise_lower;
     if this ends up the case again, comment this out again. */»
  «k:if» («n:!»FRAME_VISIBLE_P (f))
    {
      «t:EmacsView» *«v:view» = («t:EmacsView» *)FRAME_NS_VIEW (f);

      SET_FRAME_VISIBLE (f, 1);
      ns_raise_frame (f);

      «m:/* »«x:Making a new frame from a fullscreen frame will make the new frame
         fullscreen also.  So skip handleFS as this will print an error.  */»
      «k:if» ([view fsIsNative] && f->want_fullscreen == FULLSCREEN_BOTH
          && [view isFullscreen])
        «k:return»;

      «k:if» (f->want_fullscreen != FULLSCREEN_NONE)
        {
          block_input ();
          [view handleFS];
          unblock_input ();
        }
    }
}


«t:void»
«f:x_make_frame_invisible» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     External: Hide the window (X11 semantics)
   -------------------------------------------------------------------------- */»
{
  «t:NSView» *«v:view»;
  NSTRACE («s:"x_make_frame_invisible"»);
  check_window_system (f);
  view = FRAME_NS_VIEW (f);
  [[view window] orderOut: NSApp];
  SET_FRAME_VISIBLE (f, 0);
  SET_FRAME_ICONIFIED (f, 0);
}


«t:void»
«f:x_iconify_frame» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     External: Iconify window
   -------------------------------------------------------------------------- */»
{
  «t:NSView» *«v:view»;
  «k:struct» «t:ns_display_info» *«t:dpyinfo»;

  NSTRACE («s:"x_iconify_frame"»);
  check_window_system (f);
  view = FRAME_NS_VIEW (f);
  dpyinfo = FRAME_DISPLAY_INFO (f);

  «k:if» (dpyinfo->x_highlight_frame == f)
    dpyinfo->x_highlight_frame = 0;

  «k:if» ([[view window] windowNumber] <= 0)
    {
      «m:/* »«x:the window is still deferred.  Make it very small, bring it
         on screen and order it out. */»
      «t:NSRect» «v:s» = { { 100, 100}, {0, 0} };
      «t:NSRect» «v:t»;
      t = [[view window] frame];
      [[view window] setFrame: s display: «c:NO»];
      [[view window] orderBack: NSApp];
      [[view window] orderOut: NSApp];
      [[view window] setFrame: t display: «c:NO»];
    }
  [[view window] miniaturize: NSApp];
}

«m:/* »«x:Free X resources of frame F.  */»

«t:void»
«f:x_free_frame_resources» («k:struct» «t:frame» *«t:f»)
{
  «t:NSView» *«v:view»;
  «k:struct» «t:ns_display_info» *«t:dpyinfo»;
  «t:Mouse_HLInfo» *«v:hlinfo»;

  NSTRACE («s:"x_free_frame_resources"»);
  check_window_system (f);
  view = FRAME_NS_VIEW (f);
  dpyinfo = FRAME_DISPLAY_INFO (f);
  hlinfo = MOUSE_HL_INFO (f);

  [(«t:EmacsView» *)«t:view» «v:setWindowClosing»: «c:YES»]; «m:/* »«x:may not have been informed */»

  block_input ();

  free_frame_menubar (f);
  free_frame_faces (f);

  «k:if» (f == dpyinfo->x_focus_frame)
    dpyinfo->x_focus_frame = 0;
  «k:if» (f == dpyinfo->x_highlight_frame)
    dpyinfo->x_highlight_frame = 0;
  «k:if» (f == hlinfo->mouse_face_mouse_frame)
    reset_mouse_highlight (hlinfo);

  «k:if» (f->output_data.ns->miniimage != «c:nil»)
    [f->output_data.ns->miniimage release];

  [[view window] close];
  [view release];

  xfree (f->output_data.ns);

  unblock_input ();
}

«t:void»
«f:x_destroy_window» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     External: Delete the window
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"x_destroy_window"»);
  check_window_system (f);
  x_free_frame_resources (f);
  ns_window_num--;
}


«t:void»
«f:x_set_offset» («k:struct» «t:frame» *«t:f», «t:int» «v:xoff», «t:int» «v:yoff», «t:int» «v:change_grav»)
«m:/* »«x:--------------------------------------------------------------------------
     External: Position the window
   -------------------------------------------------------------------------- */»
{
  «t:NSView» *«v:view» = FRAME_NS_VIEW (f);
  «t:NSArray» *«v:screens» = [«t:NSScreen» screens];
  «t:NSScreen» *«v:fscreen» = [screens objectAtIndex: 0];
  «t:NSScreen» *«v:screen» = [[view window] screen];

  NSTRACE («s:"x_set_offset"»);

  block_input ();

  f->left_pos = xoff;
  f->top_pos = yoff;

  «k:if» (view != «c:nil» && screen && fscreen)
    {
      f->left_pos = f->size_hint_flags & XNegative
        ? [screen visibleFrame].size.width + f->left_pos - FRAME_PIXEL_WIDTH (f)
        : f->left_pos;
      «m:/* »«x:We use visibleFrame here to take menu bar into account.
	 Ideally we should also adjust left/top with visibleFrame.origin.  */»

      f->top_pos = f->size_hint_flags & YNegative
        ? ([screen visibleFrame].size.height + f->top_pos
           - FRAME_PIXEL_HEIGHT (f) - «f:FRAME_NS_TITLEBAR_HEIGHT» (f)
           - «f:FRAME_TOOLBAR_HEIGHT» (f))
        : f->top_pos;
«p:#ifdef» NS_IMPL_GNUSTEP
      «k:if» (f->left_pos < 100)
        f->left_pos = 100;  «m:/* »«x:don't overlap menu */»
«p:#endif»
      «m:/* »«x:Constrain the setFrameTopLeftPoint so we don't move behind the
         menu bar.  */»
      «t:NSPoint» «v:pt» = NSMakePoint (SCREENMAXBOUND (f->left_pos),
                                SCREENMAXBOUND ([fscreen frame].size.height
                                                - NS_TOP_POS (f)));
      NSTRACE_POINT («s:"setFrameTopLeftPoint"», pt);
      [[view window] setFrameTopLeftPoint: pt];
      f->size_hint_flags &= ~(XNegative|YNegative);
    }

  unblock_input ();
}


«t:void»
«f:x_set_window_size» («k:struct» «t:frame» *«t:f»,
                   «t:bool» «v:change_gravity»,
                   «t:int» «v:width»,
                   «t:int» «v:height»,
                   «t:bool» «v:pixelwise»)
«m:/* »«x:--------------------------------------------------------------------------
     Adjust window pixel size based on given character grid size
     Impl is a bit more complex than other terms, need to do some
     internal clipping.
   -------------------------------------------------------------------------- */»
{
  «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);
  «t:NSWindow» *«v:window» = [view window];
  «t:NSRect» «v:wr» = [window frame];
  «t:int» «v:tb» = FRAME_EXTERNAL_TOOL_BAR (f);
  «t:int» «v:pixelwidth», «v:pixelheight»;
  «t:int» «v:rows», «v:cols»;
  «t:int» «v:orig_height» = wr.size.height;

  NSTRACE («s:"x_set_window_size"»);

  «k:if» (view == «c:nil»)
    «k:return»;

  NSTRACE_RECT («s:"current"», wr);
  NSTRACE_MSG («s:"Width:%d Height:%d Pixelwise:%d"», width, height, pixelwise);
  NSTRACE_MSG («s:"Font %d x %d"», FRAME_COLUMN_WIDTH (f), FRAME_LINE_HEIGHT (f));

  block_input ();

  «k:if» (pixelwise)
    {
      pixelwidth = FRAME_TEXT_TO_PIXEL_WIDTH (f, width);
      pixelheight = FRAME_TEXT_TO_PIXEL_HEIGHT (f, height);
      cols = FRAME_PIXEL_WIDTH_TO_TEXT_COLS (f, pixelwidth);
      rows = FRAME_PIXEL_HEIGHT_TO_TEXT_LINES (f, pixelheight);
    }
  «k:else»
    {
      pixelwidth =  FRAME_TEXT_COLS_TO_PIXEL_WIDTH   (f, width);
      pixelheight = FRAME_TEXT_LINES_TO_PIXEL_HEIGHT (f, height);
      cols = width;
      rows = height;
    }

  «m:/* »«x:If we have a toolbar, take its height into account. */»
  «k:if» (tb && «n:!» [view isFullscreen])
    {
    «m:/* »«x:NOTE: previously this would generate wrong result if toolbar not
             yet displayed and fixing toolbar_height=32 helped, but
             now (200903) seems no longer needed */»
    FRAME_TOOLBAR_HEIGHT (f) =
      NSHeight ([window frameRectForContentRect: NSMakeRect (0, 0, 0, 0)])
        - «f:FRAME_NS_TITLEBAR_HEIGHT» (f);
«p:#if» 0
      «m:/* »«x:Only breaks things here, removed by martin 2015-09-30.  */»
«p:#ifdef» NS_IMPL_GNUSTEP
      FRAME_TOOLBAR_HEIGHT (f) -= 3;
«p:#endif»
«p:#endif»
    }
  «k:else»
    FRAME_TOOLBAR_HEIGHT (f) = 0;

  wr.size.width = pixelwidth + f->border_width;
  wr.size.height = pixelheight;
  «k:if» («n:!» [view isFullscreen])
    wr.size.height += FRAME_NS_TITLEBAR_HEIGHT (f)
      + «f:FRAME_TOOLBAR_HEIGHT» (f);

  «m:/* »«x:Do not try to constrain to this screen.  We may have multiple
     screens, and want Emacs to span those.  Constraining to screen
     prevents that, and that is not nice to the user.  */»
 «k:if» (f->output_data.ns->zooming)
   f->output_data.ns->zooming = 0;
 «k:else»
   wr.origin.y += orig_height - wr.size.height;

 frame_size_history_add
   (f, Qx_set_window_size_1, width, height,
    list5 (Fcons (make_number (pixelwidth), make_number (pixelheight)),
	   Fcons (make_number (wr.size.width), make_number (wr.size.height)),
	   make_number (f->border_width),
	   make_number (FRAME_NS_TITLEBAR_HEIGHT (f)),
	   make_number (FRAME_TOOLBAR_HEIGHT (f))));

  [window setFrame: wr display: «c:YES»];

  «m:/* »«x:This is a trick to compensate for Emacs' managing the scrollbar area
     as a fixed number of standard character columns.  Instead of leaving
     blank space for the extra, we chopped it off above.  Now for
     left-hand scrollbars, we shift all rendering to the left by the
     difference between the real width and Emacs' imagined one.  For
     right-hand bars, don't worry about it since the extra is never used.
     (Obviously doesn't work for vertically split windows tho..) */»
  {
    «t:NSPoint» «v:origin» = FRAME_HAS_VERTICAL_SCROLL_BARS_ON_LEFT (f)
      ? NSMakePoint (FRAME_SCROLL_BAR_COLS (f) * FRAME_COLUMN_WIDTH (f)
                     - «f:NS_SCROLL_BAR_WIDTH» (f), 0)
      : NSMakePoint (0, 0);

    [«t:view» setFrame: NSMakeRect (0, 0, pixelwidth, pixelheight)];
    [view setBoundsOrigin: origin];
  }

  [view updateFrameSize: «c:NO»];
  unblock_input ();
}


«k:static» «t:void»
«f:ns_fullscreen_hook» («k:struct» «t:frame» *«t:f»)
{
  «t:EmacsView» *«v:view» = («t:EmacsView» *)FRAME_NS_VIEW (f);

  NSTRACE («s:"ns_fullscreen_hook"»);

  «k:if» («n:!»FRAME_VISIBLE_P (f))
    «k:return»;

   «k:if» («n:!» [view fsIsNative] && f->want_fullscreen == FULLSCREEN_BOTH)
    {
      «m:/* »«x:Old style fs don't initiate correctly if created from
         init/default-frame alist, so use a timer (not nice...).
      */»
      [«t:NSTimer» scheduledTimerWithTimeInterval: 0.5 target: view
                                     selector: «k:@selector» (handleFS)
                                     userInfo: «c:nil» repeats: «c:NO»];
      «k:return»;
    }

  block_input ();
  [view handleFS];
  unblock_input ();
}

«m:/* »«x:==========================================================================

    Color management

   ========================================================================== */»


«t:NSColor» *
«f:ns_lookup_indexed_color» («t:unsigned» «t:long» idx, «k:struct» «t:frame» *«t:f»)
{
  «k:struct» «t:ns_color_table» *«t:color_table» = FRAME_DISPLAY_INFO (f)->color_table;
  «k:if» (idx < 1 || idx >= color_table->avail)
    «k:return» «c:nil»;
  «k:return» color_table->colors[idx];
}


«t:unsigned» «t:long»
ns_index_color («t:NSColor» *«v:color», «k:struct» «t:frame» *«t:f»)
{
  «k:struct» «t:ns_color_table» *«t:color_table» = FRAME_DISPLAY_INFO (f)->color_table;
  «t:ptrdiff_t» «v:idx»;
  «t:ptrdiff_t» «v:i»;

  «k:if» («n:!»color_table->colors)
    {
      color_table->size = NS_COLOR_CAPACITY;
      color_table->avail = 1; «m:/* »«x:skip idx=0 as marker */»
      color_table->colors = xmalloc (color_table->size * sizeof («t:NSColor» *));
      color_table->colors[0] = «c:nil»;
      color_table->empty_indices = [[«t:NSMutableSet» alloc] init];
    }

  «m:/* »«x:Do we already have this color?  */»
  «k:for» (i = 1; i < color_table->avail; i++)
    «k:if» (color_table->colors[i] && [color_table->colors[i] isEqual: color])
      «k:return» i;

  «k:if» ([color_table->empty_indices count] > 0)
    {
      «t:NSNumber» *«v:index» = [color_table->empty_indices anyObject];
      [color_table->empty_indices removeObject: index];
      idx = [index unsignedLongValue];
    }
  «k:else»
    {
      «k:if» (color_table->avail == color_table->size)
	color_table->colors =
	  xpalloc (color_table->colors, &color_table->size, 1,
		   min (ULONG_MAX, PTRDIFF_MAX), sizeof *color_table->colors);
      idx = color_table->avail++;
    }

  color_table->colors[idx] = color;
  [color retain];
«m:/*»«x:fprintf(stderr, "color_table: allocated %d\n",idx);*/»
  «k:return» idx;
}


«t:void»
«f:ns_free_indexed_color» («t:unsigned» «t:long» idx, «k:struct» «t:frame» *«t:f»)
{
  «k:struct» «t:ns_color_table» *«t:color_table»;
  «t:NSColor» *«v:color»;
  «t:NSNumber» *«v:index»;

  «k:if» («n:!»f)
    «k:return»;

  color_table = FRAME_DISPLAY_INFO (f)->color_table;

  «k:if» (idx <= 0 || idx >= color_table->size) {
    message1 («s:"ns_free_indexed_color: Color index out of range.\n"»);
    «k:return»;
  }

  index = [«t:NSNumber» numberWithUnsignedInt: idx];
  «k:if» ([color_table->empty_indices containsObject: index]) {
    message1 («s:"ns_free_indexed_color: attempt to free already freed color.\n"»);
    «k:return»;
  }

  color = color_table->colors[idx];
  [color release];
  color_table->colors[idx] = «c:nil»;
  [color_table->empty_indices addObject: index];
«m:/*»«x:fprintf(stderr, "color_table: FREED %d\n",idx);*/»
}


«k:static» «t:int»
«f:ns_get_color» («k:const» «t:char» *«v:name», «t:NSColor» **«v:col»)
«m:/* »«x:--------------------------------------------------------------------------
     Parse a color name
   -------------------------------------------------------------------------- */»
«m:/* »«x:On *Step, we attempt to mimic the X11 platform here, down to installing an
   X11 rgb.txt-compatible color list in Emacs.clr (see ns_term_init()).
   See: http://thread.gmane.org/gmane.emacs.devel/113050/focus=113272). */»
{
  «t:NSColor» *«v:new» = «c:nil»;
  «k:static» «t:char» «v:hex»[20];
  «t:int» «v:scaling» = 0;
  «t:float» «v:r» = -1.0, «v:g», «v:b»;
  «t:NSString» *«v:nsname» = [«t:NSString» stringWithUTF8String: name];

  NSTRACE («s:"ns_get_color(%s, **)"», name);

  block_input ();

  «k:if» ([nsname isEqualToString: @«s:"ns_selection_bg_color"»])
    {
«p:#ifdef» NS_IMPL_COCOA
      «t:NSString» *«v:defname» = [[«t:NSUserDefaults» standardUserDefaults]
                            stringForKey: @«s:"AppleHighlightColor"»];
      «k:if» (defname != «c:nil»)
        nsname = defname;
      «k:else»
«p:#endif»
      «k:if» ((new = [«t:NSColor» selectedTextBackgroundColor]) != «c:nil»)
        {
          *col = [new colorUsingDefaultColorSpace];
          unblock_input ();
          «k:return» 0;
        }
      «k:else»
        nsname = NS_SELECTION_BG_COLOR_DEFAULT;

      name = [nsname UTF8String];
    }
  «k:else» «k:if» ([nsname isEqualToString: @«s:"ns_selection_fg_color"»])
    {
      «m:/* »«x:NOTE: OSX applications normally don't set foreground selection, but
         text may be unreadable if we don't.
      */»
      «k:if» ((new = [«t:NSColor» selectedTextColor]) != «c:nil»)
        {
          *col = [new colorUsingDefaultColorSpace];
          unblock_input ();
          «k:return» 0;
        }

      nsname = NS_SELECTION_FG_COLOR_DEFAULT;
      name = [nsname UTF8String];
    }

  «m:/* »«x:First, check for some sort of numeric specification. */»
  hex[0] = «s:'\0'»;

  «k:if» (name[0] == «s:'0'» || name[0] == «s:'1'» || name[0] == «s:'.'»)  «m:/* »«x:RGB decimal */»
    {
      «t:NSScanner» *«v:scanner» = [«t:NSScanner» scannerWithString: nsname];
      [scanner scanFloat: &r];
      [scanner scanFloat: &g];
      [scanner scanFloat: &b];
    }
  «k:else» «k:if» («n:!»strncmp(name, «s:"rgb:"», 4))  «m:/* »«x:A newer X11 format -- rgb:r/g/b */»
    scaling = (snprintf (hex, «t:sizeof» «v:hex», «s:"%s"», name + 4) - 2) / 3;
  «k:else» «k:if» (name[0] == «s:'#'»)        «m:/* »«x:An old X11 format; convert to newer */»
    {
      «t:int» «v:len» = (strlen(name) - 1);
      «t:int» «v:start» = (len % 3 == 0) ? 1 : len / 4 + 1;
      «t:int» «v:i»;
      scaling = strlen(name+start) / 3;
      «k:for» (i = 0; i < 3; i++)
	sprintf (hex + i * (scaling + 1), «s:"%.*s/"», scaling,
		 name + start + i * scaling);
      hex[3 * (scaling + 1) - 1] = «s:'\0'»;
    }

  «k:if» (hex[0])
    {
      «t:int» «v:rr», «v:gg», «v:bb»;
      «t:float» «v:fscale» = scaling == 4 ? 65535.0 : (scaling == 2 ? 255.0 : 15.0);
      «k:if» (sscanf (hex, «s:"%x/%x/%x"», &rr, &gg, &bb))
        {
          r = rr / fscale;
          g = gg / fscale;
          b = bb / fscale;
        }
    }

  «k:if» (r >= 0.0F)
    {
      *col = [«t:NSColor» colorForEmacsRed: r green: g blue: b alpha: 1.0];
      unblock_input ();
      «k:return» 0;
    }

  «m:/* »«x:Otherwise, color is expected to be from a list */»
  {
    «t:NSEnumerator» *«v:lenum», *«v:cenum»;
    «t:NSString» *«v:name»;
    «t:NSColorList» *«v:clist»;

«p:#ifdef» NS_IMPL_GNUSTEP
    «m:/* »«x:XXX: who is wrong, the requestor or the implementation? */»
    «k:if» ([nsname compare: @«s:"Highlight"» options: NSCaseInsensitiveSearch]
        == NSOrderedSame)
      nsname = @«s:"highlightColor"»;
«p:#endif»

    lenum = [[«t:NSColorList» availableColorLists] objectEnumerator];
    «k:while» ( (clist = [lenum nextObject]) && new == «c:nil»)
      {
        cenum = [[clist allKeys] objectEnumerator];
        «k:while» ( (name = [cenum nextObject]) && new == «c:nil» )
          {
            «k:if» ([name compare: nsname
                      options: NSCaseInsensitiveSearch] == NSOrderedSame )
              new = [clist colorWithKey: name];
          }
      }
  }

  «k:if» (new)
    *col = [new colorUsingDefaultColorSpace];
  unblock_input ();
  «k:return» new ? 0 : 1;
}


«t:int»
«f:ns_lisp_to_color» («t:Lisp_Object» «v:color», «t:NSColor» **«v:col»)
«m:/* »«x:--------------------------------------------------------------------------
     Convert a Lisp string object to a NS color
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"ns_lisp_to_color"»);
  «k:if» (STRINGP (color))
    «k:return» ns_get_color (SSDATA (color), col);
  «k:else» «k:if» (SYMBOLP (color))
    «k:return» ns_get_color (SSDATA (SYMBOL_NAME (color)), col);
  «k:return» 1;
}


«t:Lisp_Object»
«f:ns_color_to_lisp» («t:NSColor» *«v:col»)
«m:/* »«x:--------------------------------------------------------------------------
     Convert a color to a lisp string with the RGB equivalent
   -------------------------------------------------------------------------- */»
{
  «t:EmacsCGFloat» «v:red», «v:green», «v:blue», «v:alpha», «v:gray»;
  «t:char» «v:buf»[1024];
  «k:const» «t:char» *«v:str»;
  NSTRACE («s:"ns_color_to_lisp"»);

  block_input ();
  «k:if» ([[col colorSpaceName] isEqualToString: NSNamedColorSpace])

      «k:if» ((str =[[col colorNameComponent] UTF8String]))
        {
          unblock_input ();
          «k:return» build_string ((«t:char» *)str);
        }

    [[col colorUsingDefaultColorSpace]
        getRed: &red green: &green blue: &blue alpha: &alpha];
  «k:if» (red == green && red == blue)
    {
      [[col colorUsingColorSpaceName: NSCalibratedWhiteColorSpace]
            getWhite: &gray alpha: &alpha];
      snprintf (buf, sizeof (buf), «s:"#%2.2lx%2.2lx%2.2lx"»,
		lrint («t:gray» * 0xff), lrint («t:gray» * 0xff), lrint («t:gray» * 0xff));
      unblock_input ();
      «k:return» build_string (buf);
    }

  snprintf (buf, sizeof (buf), «s:"#%2.2lx%2.2lx%2.2lx"»,
            lrint («t:red»*0xff), lrint («t:green»*0xff), lrint («t:blue»*0xff));

  unblock_input ();
  «k:return» build_string (buf);
}


«t:void»
«f:ns_query_color»(«t:void» *«v:col», «t:XColor» *«v:color_def», «t:int» «v:setPixel»)
«m:/* »«x:--------------------------------------------------------------------------
         Get ARGB values out of NSColor col and put them into color_def.
         If setPixel, set the pixel to a concatenated version.
         and set color_def pixel to the resulting index.
   -------------------------------------------------------------------------- */»
{
  «t:EmacsCGFloat» «v:r», «v:g», «v:b», «v:a»;

  [((«t:NSColor» *)col) getRed: &r green: &g blue: &b alpha: &a];
  color_def->red   = r * 65535;
  color_def->green = g * 65535;
  color_def->blue  = b * 65535;

  «k:if» (setPixel == «c:YES»)
    color_def->pixel
      = ARGB_TO_ULONG((«t:int»)(«t:a»*255),
		      («t:int»)(«t:r»*255), («t:int»)(«t:g»*255), («t:int»)(«t:b»*255));
}


«t:bool»
«f:ns_defined_color» («k:struct» «t:frame» *«t:f»,
                  «k:const» «t:char» *«v:name»,
                  «t:XColor» *«v:color_def»,
                  «t:bool» «v:alloc»,
                  «t:bool» «v:makeIndex»)
«m:/* »«x:--------------------------------------------------------------------------
         Return true if named color found, and set color_def rgb accordingly.
         If makeIndex and alloc are nonzero put the color in the color_table,
         and set color_def pixel to the resulting index.
         If makeIndex is zero, set color_def pixel to ARGB.
         Return false if not found
   -------------------------------------------------------------------------- */»
{
  «t:NSColor» *«v:col»;
  NSTRACE_WHEN (NSTRACE_GROUP_COLOR, «s:"ns_defined_color"»);

  block_input ();
  «k:if» (ns_get_color (name, &col) != 0) «m:/* »«x:Color not found  */»
    {
      unblock_input ();
      «k:return» 0;
    }
  «k:if» (makeIndex && alloc)
    color_def->pixel = ns_index_color (col, f);
  ns_query_color (col, color_def, «n:!»makeIndex);
  unblock_input ();
  «k:return» 1;
}


«t:void»
«f:x_set_frame_alpha» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     change the entire-frame transparency
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:ns_display_info» *«t:dpyinfo» = FRAME_DISPLAY_INFO (f);
  «t:double» «v:alpha» = 1.0;
  «t:double» «v:alpha_min» = 1.0;

  NSTRACE («s:"x_set_frame_alpha"»);

  «k:if» (dpyinfo->x_highlight_frame == f)
    alpha = f->alpha[0];
  «k:else»
    alpha = f->alpha[1];

  «k:if» (FLOATP (Vframe_alpha_lower_limit))
    alpha_min = XFLOAT_DATA (Vframe_alpha_lower_limit);
  «k:else» «k:if» (INTEGERP (Vframe_alpha_lower_limit))
    alpha_min = (XINT (Vframe_alpha_lower_limit)) / 100.0;

  «k:if» (alpha < 0.0)
    «k:return»;
  «k:else» «k:if» (1.0 < alpha)
    alpha = 1.0;
  «k:else» «k:if» (0.0 <= alpha && alpha < alpha_min && alpha_min <= 1.0)
    alpha = alpha_min;

«p:#ifdef» NS_IMPL_COCOA
  {
    «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);
  [[view window] setAlphaValue: alpha];
  }
«p:#endif»
}


«m:/* »«x:==========================================================================

    Mouse handling

   ========================================================================== */»


«t:void»
«f:frame_set_mouse_pixel_position» («k:struct» «t:frame» *«t:f», «t:int» «v:pix_x», «t:int» «v:pix_y»)
«m:/* »«x:--------------------------------------------------------------------------
     Programmatically reposition mouse pointer in pixel coordinates
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"frame_set_mouse_pixel_position"»);
  ns_raise_frame (f);
«p:#if» 0
  «m:/* »«x:FIXME: this does not work, and what about GNUstep? */»
«p:#ifdef» NS_IMPL_COCOA
  [FRAME_NS_VIEW (f) lockFocus];
  PSsetmouse ((«t:float»)pix_x, («t:float»)pix_y);
  [FRAME_NS_VIEW (f) unlockFocus];
«p:#endif»
«p:#endif»
}

«k:static» «t:int»
«f:note_mouse_movement» («k:struct» «t:frame» *«t:frame», «t:CGFloat» «v:x», «t:CGFloat» «v:y»)
«m:/*   »«x:------------------------------------------------------------------------
     Called by EmacsView on mouseMovement events.  Passes on
     to emacs mainstream code if we moved off of a rect of interest
     known as last_mouse_glyph.
     ------------------------------------------------------------------------ */»
{
  «k:struct» «t:ns_display_info» *«t:dpyinfo» = FRAME_DISPLAY_INFO (frame);
  «t:NSRect» *«v:r»;

«m://  »«x:NSTRACE ("note_mouse_movement");
»
  dpyinfo->last_mouse_motion_frame = frame;
  r = &dpyinfo->last_mouse_glyph;

  «m:/* »«x:Note, this doesn't get called for enter/leave, since we don't have a
     position.  Those are taken care of in the corresponding NSView methods. */»

  «m:/* »«x:has movement gone beyond last rect we were tracking? */»
  «k:if» (x < r->origin.x || x >= r->origin.x + r->size.width
      || y < r->origin.y || y >= r->origin.y + r->size.height)
    {
      ns_update_begin (frame);
      frame->mouse_moved = 1;
      note_mouse_highlight (frame, x, y);
      remember_mouse_glyph (frame, x, y, r);
      ns_update_end (frame);
      «k:return» 1;
    }

  «k:return» 0;
}


«k:static» «t:void»
«f:ns_mouse_position» («k:struct» «t:frame» **«t:fp», «t:int» «v:insist», «t:Lisp_Object» *«v:bar_window»,
                   «k:enum» «t:scroll_bar_part» *«t:part», «t:Lisp_Object» *«v:x», «t:Lisp_Object» *«v:y»,
                   «t:Time» *«v:time»)
«m:/* »«x:--------------------------------------------------------------------------
    External (hook): inform emacs about mouse position and hit parts.
    If a scrollbar is being dragged, set bar_window, part, x, y, time.
    x & y should be position in the scrollbar (the whole bar, not the handle)
    and length of scrollbar respectively
   -------------------------------------------------------------------------- */»
{
  «t:id» «v:view»;
  «t:NSPoint» «v:position»;
  «t:Lisp_Object» «v:frame», «v:tail»;
  «k:struct» «t:frame» *«t:f»;
  «k:struct» «t:ns_display_info» *«t:dpyinfo»;

  NSTRACE («s:"ns_mouse_position"»);

  «k:if» (*fp == NULL)
    {
      fprintf (stderr, «s:"Warning: ns_mouse_position () called with null *fp.\n"»);
      «k:return»;
    }

  dpyinfo = FRAME_DISPLAY_INFO (*fp);

  block_input ();

  «m:/* »«x:Clear the mouse-moved flag for every frame on this display.  */»
  FOR_EACH_FRAME (tail, frame)
    «k:if» (FRAME_NS_P (XFRAME (frame))
        && FRAME_NS_DISPLAY (XFRAME (frame)) == FRAME_NS_DISPLAY (*fp))
      XFRAME (frame)->mouse_moved = 0;

  dpyinfo->last_mouse_scroll_bar = «c:nil»;
  «k:if» (dpyinfo->last_mouse_frame
      && FRAME_LIVE_P (dpyinfo->last_mouse_frame))
    f = dpyinfo->last_mouse_frame;
  «k:else»
    f = dpyinfo->x_focus_frame ? dpyinfo->x_focus_frame : SELECTED_FRAME ();

  «k:if» (f && FRAME_NS_P (f))
    {
      view = FRAME_NS_VIEW (*fp);

      position = [[view window] mouseLocationOutsideOfEventStream];
      position = [view convertPoint: position fromView: «c:nil»];
      remember_mouse_glyph (f, position.x, position.y,
                            &dpyinfo->last_mouse_glyph);
      NSTRACE_POINT («s:"position"», position);

      «k:if» (bar_window) *bar_window = Qnil;
      «k:if» (part) *part = scroll_bar_above_handle;

      «k:if» (x) XSETINT (*x, lrint (position.x));
      «k:if» (y) XSETINT (*y, lrint (position.y));
      «k:if» (time)
        *time = dpyinfo->last_mouse_movement_time;
      *fp = f;
    }

  unblock_input ();
}


«k:static» «t:void»
«f:ns_frame_up_to_date» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
    External (hook): Fix up mouse highlighting right after a full update.
    Can't use FRAME_MOUSE_UPDATE due to ns_frame_begin and ns_frame_end calls.
   -------------------------------------------------------------------------- */»
{
  NSTRACE_WHEN (NSTRACE_GROUP_UPDATES, «s:"ns_frame_up_to_date"»);

  «k:if» (FRAME_NS_P (f))
    {
      «t:Mouse_HLInfo» *«v:hlinfo» = MOUSE_HL_INFO (f);
      «k:if» (f == hlinfo->mouse_face_mouse_frame)
	{
	  block_input ();
	  ns_update_begin(f);
	  note_mouse_highlight (hlinfo->mouse_face_mouse_frame,
				hlinfo->mouse_face_mouse_x,
				hlinfo->mouse_face_mouse_y);
	  ns_update_end(f);
	  unblock_input ();
	}
    }
}


«k:static» «t:void»
«f:ns_define_frame_cursor» («k:struct» «t:frame» *«t:f», «t:Cursor» «v:cursor»)
«m:/* »«x:--------------------------------------------------------------------------
    External (RIF): set frame mouse pointer type.
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"ns_define_frame_cursor"»);
  «k:if» (FRAME_POINTER_TYPE (f) != cursor)
    {
      «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);
      FRAME_POINTER_TYPE (f) = cursor;
      [[view window] invalidateCursorRectsForView: view];
      «m:/* »«x:Redisplay assumes this function also draws the changed frame
         cursor, but this function doesn't, so do it explicitly.  */»
      x_update_cursor (f, 1);
    }
}



«m:/* »«x:==========================================================================

    Keyboard handling

   ========================================================================== */»


«k:static» «t:unsigned»
«f:ns_convert_key» («t:unsigned» «v:code»)
«m:/* »«x:--------------------------------------------------------------------------
    Internal call used by NSView-keyDown.
   -------------------------------------------------------------------------- */»
{
  «k:const» «t:unsigned» «v:last_keysym» = ARRAYELTS (convert_ns_to_X_keysym);
  «t:unsigned» «v:keysym»;
  «m:/* »«x:An array would be faster, but less easy to read. */»
  «k:for» (keysym = 0; keysym < last_keysym; keysym += 2)
    «k:if» (code == convert_ns_to_X_keysym[keysym])
      «k:return» 0xFF00 | convert_ns_to_X_keysym[keysym+1];
  «k:return» 0;
«m:/* »«x:if decide to use keyCode and Carbon table, use this line:
     return code > 0xff ? 0 : 0xFF00 | ns_keycode_to_xkeysym_table[code]; */»
}


«t:char» *
«f:x_get_keysym_name» («t:int» «v:keysym»)
«m:/* »«x:--------------------------------------------------------------------------
    Called by keyboard.c.  Not sure if the return val is important, except
    that it be unique.
   -------------------------------------------------------------------------- */»
{
  «k:static» «t:char» «v:value»[16];
  NSTRACE («s:"x_get_keysym_name"»);
  sprintf (value, «s:"%d"», keysym);
  «k:return» value;
}



«m:/* »«x:==========================================================================

    Block drawing operations

   ========================================================================== */»


«k:static» «t:void»
«f:ns_redraw_scroll_bars» («k:struct» «t:frame» *«t:f»)
{
  «t:int» «v:i»;
  «t:id» «v:view»;
  «t:NSArray» *«v:subviews» = [[FRAME_NS_VIEW (f) superview] subviews];
  NSTRACE («s:"ns_redraw_scroll_bars"»);
  «k:for» (i =[subviews count]-1; i >= 0; i--)
    {
      view = [subviews objectAtIndex: i];
      «k:if» («n:!»[view isKindOfClass: [«t:EmacsScroller» class]]) «k:continue»;
      [view display];
    }
}


«t:void»
«f:ns_clear_frame» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
      External (hook): Erase the entire frame
   -------------------------------------------------------------------------- */»
{
  «t:NSView» *«v:view» = FRAME_NS_VIEW (f);
  «t:NSRect» «v:r»;

  NSTRACE_WHEN (NSTRACE_GROUP_UPDATES, «s:"ns_clear_frame"»);

 «m:/* »«x:comes on initial frame because we have
    after-make-frame-functions = select-frame */»
 «k:if» («n:!»FRAME_DEFAULT_FACE (f))
   «k:return»;

  mark_window_cursors_off (XWINDOW (FRAME_ROOT_WINDOW (f)));

  r = [view bounds];

  block_input ();
  ns_focus (f, &r, 1);
  [ns_lookup_indexed_color (NS_FACE_BACKGROUND (FRAME_DEFAULT_FACE (f)), f) set];
  NSRectFill («v:r»);
  ns_unfocus (f);

  «m:/* »«x:as of 2006/11 or so this is now needed */»
  ns_redraw_scroll_bars (f);
  unblock_input ();
}


«k:static» «t:void»
«f:ns_clear_frame_area» («k:struct» «t:frame» *«t:f», «t:int» «v:x», «t:int» «v:y», «t:int» «v:width», «t:int» «v:height»)
«m:/* »«x:--------------------------------------------------------------------------
    External (RIF):  Clear section of frame
   -------------------------------------------------------------------------- */»
{
  «t:NSRect» «v:r» = NSMakeRect (x, y, width, height);
  «t:NSView» *«v:view» = FRAME_NS_VIEW (f);
  «k:struct» «t:face» *«t:face» = FRAME_DEFAULT_FACE (f);

  «k:if» («n:!»view || «n:!»face)
    «k:return»;

  NSTRACE_WHEN (NSTRACE_GROUP_UPDATES, «s:"ns_clear_frame_area"»);

  r = NSIntersectionRect (r, [view frame]);
  ns_focus (f, &r, 1);
  [ns_lookup_indexed_color (NS_FACE_BACKGROUND (face), f) set];

  NSRectFill («v:r»);

  ns_unfocus (f);
  «k:return»;
}

«k:static» «t:void»
«f:ns_copy_bits» («k:struct» «t:frame» *«t:f», «t:NSRect» «v:src», «t:NSRect» «v:dest»)
{
  «k:if» (FRAME_NS_VIEW (f))
    {
      ns_focus (f, &dest, 1);
      [FRAME_NS_VIEW (f) scrollRect: src
                                 by: NSMakeSize (dest.origin.x - src.origin.x,
                                                 dest.origin.y - src.origin.y)];
      ns_unfocus (f);
    }
}

«k:static» «t:void»
«f:ns_scroll_run» («k:struct» «t:window» *«t:w», «k:struct» «t:run» *«t:run»)
«m:/* »«x:--------------------------------------------------------------------------
    External (RIF):  Insert or delete n lines at line vpos
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:frame» *«t:f» = XFRAME (w->frame);
  «t:int» «v:x», «v:y», «v:width», «v:height», «v:from_y», «v:to_y», «v:bottom_y»;

  NSTRACE («s:"ns_scroll_run"»);

  «m:/* »«x:begin copy from other terms */»
  «m:/* »«x:Get frame-relative bounding box of the text display area of W,
     without mode lines.  Include in this box the left and right
     fringe of W.  */»
  window_box (w, ANY_AREA, &x, &y, &width, &height);

  from_y = WINDOW_TO_FRAME_PIXEL_Y (w, run->current_y);
  to_y = WINDOW_TO_FRAME_PIXEL_Y (w, run->desired_y);
  bottom_y = y + height;

  «k:if» (to_y < from_y)
    {
      «m:/* »«x:Scrolling up.  Make sure we don't copy part of the mode
	 line at the bottom.  */»
      «k:if» (from_y + run->height > bottom_y)
	height = bottom_y - from_y;
      «k:else»
	height = run->height;
    }
  «k:else»
    {
      «m:/* »«x:Scrolling down.  Make sure we don't copy over the mode line.
	 at the bottom.  */»
      «k:if» (to_y + run->height > bottom_y)
	height = bottom_y - to_y;
      «k:else»
	height = run->height;
    }
  «m:/* »«x:end copy from other terms */»

  «k:if» (height == 0)
      «k:return»;

  block_input ();

  x_clear_cursor (w);

  {
    «t:NSRect» «v:srcRect» = NSMakeRect (x, from_y, width, height);
    «t:NSRect» «v:dstRect» = NSMakeRect (x, to_y, width, height);

    ns_copy_bits (f, srcRect , dstRect);
  }

  unblock_input ();
}


«k:static» «t:void»
«f:ns_after_update_window_line» («k:struct» «t:window» *«t:w», «k:struct» «t:glyph_row» *«t:desired_row»)
«m:/* »«x:--------------------------------------------------------------------------
    External (RIF): preparatory to fringe update after text was updated
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:frame» *«t:f»;
  «t:int» «v:width», «v:height»;

  NSTRACE_WHEN (NSTRACE_GROUP_UPDATES, «s:"ns_after_update_window_line"»);

  «m:/* »«x:begin copy from other terms */»
  eassert (w);

  «k:if» («n:!»desired_row->mode_line_p && «n:!»w->pseudo_window_p)
    desired_row->redraw_fringe_bitmaps_p = 1;

  «m:/* »«x:When a window has disappeared, make sure that no rest of
     full-width rows stays visible in the internal border.  */»
  «k:if» (windows_or_buffers_changed
      && desired_row->full_width_p
      && (f = XFRAME (w->frame),
	  width = FRAME_INTERNAL_BORDER_WIDTH (f),
	  width != 0)
      && (height = desired_row->visible_height,
	  height > 0))
    {
      «t:int» «v:y» = WINDOW_TO_FRAME_PIXEL_Y (w, max (0, desired_row->y));

      block_input ();
      ns_clear_frame_area (f, 0, y, width, height);
      ns_clear_frame_area (f,
                           FRAME_PIXEL_WIDTH (f) - «f:width»,
                           y, width, height);
      unblock_input ();
    }
}


«k:static» «t:void»
«f:ns_shift_glyphs_for_insert» («k:struct» «t:frame» *«t:f»,
                           «t:int» «v:x», «t:int» «v:y», «t:int» «v:width», «t:int» «v:height»,
                           «t:int» «v:shift_by»)
«m:/* »«x:--------------------------------------------------------------------------
    External (RIF): copy an area horizontally, don't worry about clearing src
   -------------------------------------------------------------------------- */»
{
  «t:NSRect» «v:srcRect» = NSMakeRect (x, y, width, height);
  «t:NSRect» «v:dstRect» = NSMakeRect (x+shift_by, y, width, height);

  NSTRACE («s:"ns_shift_glyphs_for_insert"»);

  ns_copy_bits (f, srcRect, dstRect);
}



«m:/* »«x:==========================================================================

    Character encoding and metrics

   ========================================================================== */»


«k:static» «t:void»
«f:ns_compute_glyph_string_overhangs» («k:struct» «t:glyph_string» *«t:s»)
«m:/* »«x:--------------------------------------------------------------------------
     External (RIF); compute left/right overhang of whole string and set in s
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:font» *«t:font» = s->font;

  «k:if» (s->char2b)
    {
      «k:struct» «t:font_metrics» «t:metrics»;
      «t:unsigned» «t:int» codes[2];
      codes[0] = *(s->char2b);
      codes[1] = *(s->char2b + s->nchars - 1);

      font->driver->text_extents (font, codes, 2, &metrics);
      s->left_overhang = -metrics.lbearing;
      s->right_overhang
	= metrics.rbearing > metrics.width
	? metrics.rbearing - metrics.width : 0;
    }
  «k:else»
    {
      s->left_overhang = 0;
      «k:if» (EQ (font->driver->type, Qns))
        s->right_overhang = ((«k:struct» «t:nsfont_info» *)font)->ital ?
          FONT_HEIGHT (font) * 0.2 : 0;
      «k:else»
        s->right_overhang = 0;
    }
}



«m:/* »«x:==========================================================================

    Fringe and cursor drawing

   ========================================================================== */»


«k:extern» «t:int» «v:max_used_fringe_bitmap»;
«k:static» «t:void»
«f:ns_draw_fringe_bitmap» («k:struct» «t:window» *«t:w», «k:struct» «t:glyph_row» *«t:row»,
                      «k:struct» «t:draw_fringe_bitmap_params» *«t:p»)
«m:/* »«x:--------------------------------------------------------------------------
    External (RIF); fringe-related
   -------------------------------------------------------------------------- */»
{
  «m:/* »«x:Fringe bitmaps comes in two variants, normal and periodic.  A
     periodic bitmap is used to create a continuous pattern.  Since a
     bitmap is rendered one text line at a time, the start offset (dh)
     of the bitmap varies.  Concretely, this is used for the empty
     line indicator.

     For a bitmap, "h + dh" is the full height and is always
     invariant.  For a normal bitmap "dh" is zero.

     For example, when the period is three and the full height is 72
     the following combinations exists:

       h=72 dh=0
       h=71 dh=1
       h=70 dh=2 */»

  «k:struct» «t:frame» *«t:f» = XFRAME (WINDOW_FRAME (w));
  «k:struct» «t:face» *«t:face» = p->face;
  «k:static» «t:EmacsImage» **«v:bimgs» = NULL;
  «k:static» «t:int» «v:nBimgs» = 0;

  NSTRACE_WHEN (NSTRACE_GROUP_FRINGE, «s:"ns_draw_fringe_bitmap"»);
  NSTRACE_MSG («s:"which:%d cursor:%d overlay:%d width:%d height:%d period:%d"»,
               p->which, p->cursor_p, p->overlay_p, p->wd, p->h, p->dh);

  «m:/* »«x:grow bimgs if needed */»
  «k:if» (nBimgs < max_used_fringe_bitmap)
    {
      bimgs = xrealloc (bimgs, max_used_fringe_bitmap * sizeof *bimgs);
      memset (bimgs + nBimgs, 0,
	      (max_used_fringe_bitmap - nBimgs) * sizeof *bimgs);
      nBimgs = max_used_fringe_bitmap;
    }

  «m:/* »«x:Must clip because of partially visible lines.  */»
  ns_clip_to_row (w, row, ANY_AREA, «c:YES»);

  «k:if» («n:!»p->overlay_p)
    {
      «t:int» «v:bx» = p->bx, «v:by» = p->by, «v:nx» = p->nx, «v:ny» = p->ny;

      «k:if» (bx >= 0 && nx > 0)
        {
          «t:NSRect» «v:r» = NSMakeRect (bx, by, nx, ny);
          NSRectClip («v:r»);
          [ns_lookup_indexed_color (face->background, f) set];
          NSRectFill («v:r»);
        }
    }

  «k:if» (p->which)
    {
      «t:NSRect» «v:r» = NSMakeRect (p->x, p->y, p->wd, p->h);
      «t:EmacsImage» *«v:img» = bimgs[p->which - 1];

      «k:if» («n:!»img)
        {
          «m:// »«x:Note: For "periodic" images, allocate one EmacsImage for
»          «m:// »«x:the base image, and use it for all dh:s.
»          «t:unsigned» «t:short» *bits = p->bits;
          «t:int» «v:full_height» = p->h + p->dh;
          «t:int» «v:i»;
          «t:unsigned» «t:char» *cbits = xmalloc (full_height);

          «k:for» (i = 0; i < full_height; i++)
            cbits[i] = bits[i];
          img = [[«t:EmacsImage» alloc] initFromXBM: cbits width: 8
                                         height: full_height
                                             fg: 0 bg: 0];
          bimgs[p->which - 1] = img;
          xfree (cbits);
        }

      NSTRACE_RECT («s:"r"», r);

      NSRectClip («v:r»);
      «m:/* »«x:Since we composite the bitmap instead of just blitting it, we need
         to erase the whole background. */»
      [ns_lookup_indexed_color(face->background, f) set];
      NSRectFill («v:r»);

      {
        «t:NSColor» *«v:bm_color»;
        «k:if» («n:!»p->cursor_p)
          bm_color = ns_lookup_indexed_color(face->foreground, f);
        «k:else» «k:if» (p->overlay_p)
          bm_color = ns_lookup_indexed_color(face->background, f);
        «k:else»
          bm_color = f->output_data.ns->cursor_color;
        [img setXBMColor: bm_color];
      }

      «m:// »«x:Note: For periodic images, the full image height is "h + hd".
»      «m:// »«x:By using the height h, a suitable part of the image is used.
»      «t:NSRect» «v:fromRect» = NSMakeRect(0, 0, p->wd, p->h);

      NSTRACE_RECT («s:"fromRect"», fromRect);

«p:#ifdef» NS_IMPL_COCOA
      [img drawInRect: r
              fromRect: fromRect
             operation: NSCompositeSourceOver
              fraction: 1.0
           respectFlipped: «c:YES»
                hints: «c:nil»];
«p:#else»
      {
        «t:NSPoint» «v:pt» = r.origin;
        pt.y += p->h;
        [img compositeToPoint: pt operation: NSCompositeSourceOver];
      }
«p:#endif»
    }
  ns_unfocus (f);
}


«k:static» «t:void»
«f:ns_draw_window_cursor» («k:struct» «t:window» *«t:w», «k:struct» «t:glyph_row» *«t:glyph_row»,
		       «t:int» «v:x», «t:int» «v:y», «k:enum» «t:text_cursor_kinds» «t:cursor_type»,
		       «t:int» «v:cursor_width», «t:bool» «v:on_p», «t:bool» «v:active_p»)
«m:/* »«x:--------------------------------------------------------------------------
     External call (RIF): draw cursor.
     Note that CURSOR_WIDTH is meaningful only for (h)bar cursors.
   -------------------------------------------------------------------------- */»
{
  «t:NSRect» «v:r», «v:s»;
  «t:int» «v:fx», «v:fy», «v:h», «v:cursor_height»;
  «k:struct» «t:frame» *«t:f» = WINDOW_XFRAME (w);
  «k:struct» «t:glyph» *«t:phys_cursor_glyph»;
  «k:struct» «t:glyph» *«t:cursor_glyph»;
  «k:struct» «t:face» *«t:face»;
  «t:NSColor» *«v:hollow_color» = FRAME_BACKGROUND_COLOR (f);

  «m:/* »«x:If cursor is out of bounds, don't draw garbage.  This can happen
     in mini-buffer windows when switching between echo area glyphs
     and mini-buffer.  */»

  NSTRACE («s:"ns_draw_window_cursor"»);

  «k:if» («n:!»on_p)
    «k:return»;

  w->phys_cursor_type = cursor_type;
  w->phys_cursor_on_p = on_p;

  «k:if» (cursor_type == NO_CURSOR)
    {
      w->phys_cursor_width = 0;
      «k:return»;
    }

  «k:if» ((phys_cursor_glyph = get_phys_cursor_glyph (w)) == NULL)
    {
      «k:if» (glyph_row->exact_window_width_line_p
          && w->phys_cursor.hpos >= glyph_row->used[TEXT_AREA])
        {
          glyph_row->cursor_in_fringe_p = 1;
          draw_fringe_bitmap (w, glyph_row, 0);
        }
      «k:return»;
    }

  «m:/* »«x:We draw the cursor (with NSRectFill), then draw the glyph on top
     (other terminals do it the other way round).  We must set
     w->phys_cursor_width to the cursor width.  For bar cursors, that
     is CURSOR_WIDTH; for box cursors, it is the glyph width.  */»
  get_phys_cursor_geometry (w, glyph_row, phys_cursor_glyph, &fx, &fy, &h);

  «m:/* »«x:The above get_phys_cursor_geometry call set w->phys_cursor_width
     to the glyph width; replace with CURSOR_WIDTH for (V)BAR cursors. */»
  «k:if» (cursor_type == BAR_CURSOR)
    {
      «k:if» (cursor_width < 1)
	cursor_width = max (FRAME_CURSOR_WIDTH (f), 1);
      w->phys_cursor_width = cursor_width;
    }
  «m:/* »«x:If we have an HBAR, "cursor_width" MAY specify height. */»
  «k:else» «k:if» (cursor_type == HBAR_CURSOR)
    {
      cursor_height = (cursor_width < 1) ? lrint (0.25 * h) : cursor_width;
      «k:if» (cursor_height > glyph_row->height)
        cursor_height = glyph_row->height;
      «k:if» (h > cursor_height) «m:// »«x:Cursor smaller than line height, move down
»        fy += h - cursor_height;
      h = cursor_height;
    }

  r.origin.x = fx, r.origin.y = fy;
  r.size.height = h;
  r.size.width = w->phys_cursor_width;

  «m:/* »«x:TODO: only needed in rare cases with last-resort font in HELLO..
     should we do this more efficiently? */»
  ns_clip_to_row (w, glyph_row, ANY_AREA, «c:NO»); «m:/* »«x:do ns_focus(f, &r, 1); if remove */»


  face = FACE_FROM_ID (f, phys_cursor_glyph->face_id);
  «k:if» (face && NS_FACE_BACKGROUND (face)
      == ns_index_color (FRAME_CURSOR_COLOR (f), f))
    {
      [ns_lookup_indexed_color (NS_FACE_FOREGROUND (face), f) set];
      hollow_color = FRAME_CURSOR_COLOR (f);
    }
  «k:else»
    [FRAME_CURSOR_COLOR (f) set];

«p:#ifdef» NS_IMPL_COCOA
  «m:/* »«x:TODO: This makes drawing of cursor plus that of phys_cursor_glyph
           atomic.  Cleaner ways of doing this should be investigated.
           One way would be to set a global variable DRAWING_CURSOR
  	   when making the call to draw_phys..(), don't focus in that
  	   case, then move the ns_unfocus() here after that call. */»
  NSDisableScreenUpdates ();
«p:#endif»

  «k:switch» (cursor_type)
    {
    «k:case» DEFAULT_CURSOR:
    «k:case» NO_CURSOR:
      «k:break»;
    «k:case» FILLED_BOX_CURSOR:
      NSRectFill («v:r»);
      «k:break»;
    «k:case» HOLLOW_BOX_CURSOR:
      NSRectFill («v:r»);
      [hollow_color set];
      NSRectFill («v:NSInsetRect» (r, 1, 1));
      [FRAME_CURSOR_COLOR (f) set];
      «k:break»;
    «k:case» HBAR_CURSOR:
      NSRectFill («v:r»);
      «k:break»;
    «k:case» BAR_CURSOR:
      s = r;
      «m:/* »«x:If the character under cursor is R2L, draw the bar cursor
         on the right of its glyph, rather than on the left.  */»
      cursor_glyph = get_phys_cursor_glyph (w);
      «k:if» ((cursor_glyph->resolved_level & 1) != 0)
        s.origin.x += cursor_glyph->pixel_width - s.size.width;

      NSRectFill («v:s»);
      «k:break»;
    }
  ns_unfocus (f);

  «m:/* »«x:draw the character under the cursor */»
  «k:if» (cursor_type != NO_CURSOR)
    draw_phys_cursor_glyph (w, glyph_row, DRAW_CURSOR);

«p:#ifdef» NS_IMPL_COCOA
  NSEnableScreenUpdates ();
«p:#endif»

}


«k:static» «t:void»
«f:ns_draw_vertical_window_border» («k:struct» «t:window» *«t:w», «t:int» «v:x», «t:int» «v:y0», «t:int» «v:y1»)
«m:/* »«x:--------------------------------------------------------------------------
     External (RIF): Draw a vertical line.
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:frame» *«t:f» = XFRAME (WINDOW_FRAME (w));
  «k:struct» «t:face» *«t:face»;
  «t:NSRect» «v:r» = NSMakeRect (x, y0, 1, y1-y0);

  NSTRACE («s:"ns_draw_vertical_window_border"»);

  face = FACE_FROM_ID (f, VERTICAL_BORDER_FACE_ID);
  «k:if» (face)
      [ns_lookup_indexed_color(face->foreground, f) set];

  ns_focus (f, &r, 1);
  NSRectFill(«v:r»);
  ns_unfocus (f);
}


«k:static» «t:void»
«f:ns_draw_window_divider» («k:struct» «t:window» *«t:w», «t:int» «v:x0», «t:int» «v:x1», «t:int» «v:y0», «t:int» «v:y1»)
«m:/* »«x:--------------------------------------------------------------------------
     External (RIF): Draw a window divider.
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:frame» *«t:f» = XFRAME (WINDOW_FRAME (w));
  «k:struct» «t:face» *«t:face»;
  «t:NSRect» «v:r» = NSMakeRect (x0, y0, x1-x0, y1-y0);

  NSTRACE («s:"ns_draw_window_divider"»);

  face = FACE_FROM_ID (f, WINDOW_DIVIDER_FACE_ID);
  «k:if» (face)
      [ns_lookup_indexed_color(face->foreground, f) set];

  ns_focus (f, &r, 1);
  NSRectFill(«v:r»);
  ns_unfocus (f);
}

«k:static» «t:void»
«f:ns_show_hourglass» («k:struct» «t:frame» *«t:f»)
{
  «m:/* »«x:TODO: add NSProgressIndicator to all frames.  */»
}

«k:static» «t:void»
«f:ns_hide_hourglass» («k:struct» «t:frame» *«t:f»)
{
  «m:/* »«x:TODO: remove NSProgressIndicator from all frames.  */»
}

«m:/* »«x:==========================================================================

    Glyph drawing operations

   ========================================================================== */»

«k:static» «t:int»
«f:ns_get_glyph_string_clip_rect» («k:struct» «t:glyph_string» *«t:s», «t:NativeRectangle» *«v:nr»)
«m:/* »«x:--------------------------------------------------------------------------
    Wrapper utility to account for internal border width on full-width lines,
    and allow top full-width rows to hit the frame top.  nr should be pointer
    to two successive NSRects.  Number of rects actually used is returned.
   -------------------------------------------------------------------------- */»
{
  «t:int» «v:n» = get_glyph_string_clip_rects (s, nr, 2);
  «k:return» n;
}

«m:/* »«x:--------------------------------------------------------------------
   Draw a wavy line under glyph string s. The wave fills wave_height
   pixels from y.

                    x          wave_length = 2
                                 --
                y    *   *   *   *   *
                     |* * * * * * * * *
    wave_height = 3  | *   *   *   *
  --------------------------------------------------------------------- */»

«k:static» «t:void»
«f:ns_draw_underwave» («k:struct» «t:glyph_string» *«t:s», «t:EmacsCGFloat» «v:width», «t:EmacsCGFloat» «v:x»)
{
  «t:int» «v:wave_height» = 3, «v:wave_length» = 2;
  «t:int» «v:y», «v:dx», «v:dy», «v:odd», «v:xmax»;
  «t:NSPoint» «v:a», «v:b»;
  «t:NSRect» «v:waveClip»;

  dx = wave_length;
  dy = wave_height - 1;
  y =  s->ybase - wave_height + 3;
  xmax = x + width;

  «m:/* »«x:Find and set clipping rectangle */»
  waveClip = NSMakeRect (x, y, width, wave_height);
  [[«t:NSGraphicsContext» currentContext] saveGraphicsState];
  «t:NSRectClip» («v:waveClip»);

  «m:/* »«x:Draw the waves */»
  a.x = x - ((«t:int»)(x) % dx) + («t:EmacsCGFloat») 0.5;
  b.x = a.x + dx;
  odd = («t:int»)(a.x/dx) % 2;
  a.y = b.y = y + 0.5;

  «k:if» (odd)
    a.y += dy;
  «k:else»
    b.y += dy;

  «k:while» (a.x <= xmax)
    {
      [«t:NSBezierPath» strokeLineFromPoint:a toPoint:b];
      a.x = b.x, a.y = b.y;
      b.x += dx, b.y = y + 0.5 + odd*dy;
      odd = «n:!»odd;
    }

  «m:/* »«x:Restore previous clipping rectangle(s) */»
  [[«t:NSGraphicsContext» currentContext] restoreGraphicsState];
}



«t:void»
«f:ns_draw_text_decoration» («k:struct» «t:glyph_string» *«t:s», «k:struct» «t:face» *«t:face»,
                         «t:NSColor» *«v:defaultCol», «t:CGFloat» «v:width», «t:CGFloat» «v:x»)
«m:/* »«x:--------------------------------------------------------------------------
   Draw underline, overline, and strike-through on glyph string s.
   -------------------------------------------------------------------------- */»
{
  «k:if» (s->for_overlaps)
    «k:return»;

  «m:/* »«x:Do underline. */»
  «k:if» (face->underline_p)
    {
      «k:if» (s->face->underline_type == FACE_UNDER_WAVE)
        {
          «k:if» (face->underline_defaulted_p)
            [defaultCol set];
          «k:else»
            [ns_lookup_indexed_color (face->underline_color, s->f) set];

          ns_draw_underwave (s, width, x);
        }
      «k:else» «k:if» (s->face->underline_type == FACE_UNDER_LINE)
        {

          «t:NSRect» «v:r»;
          «t:unsigned» «t:long» thickness, position;

          «m:/* »«x:If the prev was underlined, match its appearance. */»
          «k:if» (s->prev && s->prev->face->underline_p
	      && s->prev->face->underline_type == FACE_UNDER_LINE
              && s->prev->underline_thickness > 0)
            {
              thickness = s->prev->underline_thickness;
              position = s->prev->underline_position;
            }
          «k:else»
            {
              «k:struct» «t:font» *«t:font»;
              «t:unsigned» «t:long» descent;

              font=s->font;
              descent = s->y + s->height - s->ybase;

              «m:/* »«x:Use underline thickness of font, defaulting to 1. */»
              thickness = (font && font->underline_thickness > 0)
                ? font->underline_thickness : 1;

              «m:/* »«x:Determine the offset of underlining from the baseline. */»
              «k:if» (x_underline_at_descent_line)
                position = descent - thickness;
              «k:else» «k:if» (x_use_underline_position_properties
                       && font && font->underline_position >= 0)
                position = font->underline_position;
              «k:else» «k:if» (font)
                position = lround (font->descent / 2);
              «k:else»
                position = underline_minimum_offset;

              position = max (position, underline_minimum_offset);

              «m:/* »«x:Ensure underlining is not cropped. */»
              «k:if» (descent <= position)
                {
                  position = descent - 1;
                  thickness = 1;
                }
              «k:else» «k:if» (descent < position + thickness)
                thickness = 1;
            }

          s->underline_thickness = thickness;
          s->underline_position = position;

          r = NSMakeRect (x, s->ybase + position, width, thickness);

          «k:if» (face->underline_defaulted_p)
            [defaultCol set];
          «k:else»
            [ns_lookup_indexed_color (face->underline_color, s->f) set];
          NSRectFill («v:r»);
        }
    }
  «m:/* »«x:Do overline. We follow other terms in using a thickness of 1
     and ignoring overline_margin. */»
  «k:if» (face->overline_p)
    {
      «t:NSRect» «v:r»;
      r = NSMakeRect (x, s->y, width, 1);

      «k:if» (face->overline_color_defaulted_p)
        [defaultCol set];
      «k:else»
        [ns_lookup_indexed_color (face->overline_color, s->f) set];
      NSRectFill («v:r»);
    }

  «m:/* »«x:Do strike-through.  We follow other terms for thickness and
     vertical position.*/»
  «k:if» (face->strike_through_p)
    {
      «t:NSRect» «v:r»;
      «t:unsigned» «t:long» dy;

      dy = lrint ((s->height - 1) / 2);
      r = NSMakeRect (x, s->y + dy, width, 1);

      «k:if» (face->strike_through_color_defaulted_p)
        [defaultCol set];
      «k:else»
        [ns_lookup_indexed_color (face->strike_through_color, s->f) set];
      NSRectFill («v:r»);
    }
}

«k:static» «t:void»
«f:ns_draw_box» («t:NSRect» «v:r», «t:CGFloat» «v:thickness», «t:NSColor» *«v:col»,
             «t:char» «v:left_p», «t:char» «v:right_p»)
«m:/* »«x:--------------------------------------------------------------------------
    Draw an unfilled rect inside r, optionally leaving left and/or right open.
    Note we can't just use an NSDrawRect command, because of the possibility
    of some sides not being drawn, and because the rect will be filled.
   -------------------------------------------------------------------------- */»
{
  «t:NSRect» «v:s» = r;
  [col set];

  «m:/* »«x:top, bottom */»
  s.size.height = thickness;
  NSRectFill («v:s»);
  s.origin.y += r.size.height - thickness;
  NSRectFill («v:s»);

  s.size.height = r.size.height;
  s.origin.y = r.origin.y;

  «m:/* »«x:left, right (optional) */»
  s.size.width = thickness;
  «k:if» (left_p)
    NSRectFill (s);
  «k:if» (right_p)
    {
      s.origin.x += r.size.width - thickness;
      NSRectFill («v:s»);
    }
}


«k:static» «t:void»
«f:ns_draw_relief» («t:NSRect» «v:r», «t:int» «v:thickness», «t:char» «v:raised_p»,
               «t:char» «v:top_p», «t:char» «v:bottom_p», «t:char» «v:left_p», «t:char» «v:right_p»,
               «k:struct» «t:glyph_string» *«t:s»)
«m:/* »«x:--------------------------------------------------------------------------
    Draw a relief rect inside r, optionally leaving some sides open.
    Note we can't just use an NSDrawBezel command, because of the possibility
    of some sides not being drawn, and because the rect will be filled.
   -------------------------------------------------------------------------- */»
{
  «k:static» «t:NSColor» *«v:baseCol» = «c:nil», *«v:lightCol» = «c:nil», *«v:darkCol» = «c:nil»;
  «t:NSColor» *«v:newBaseCol» = «c:nil»;
  «t:NSRect» «v:sr» = r;

  NSTRACE («s:"ns_draw_relief"»);

  «m:/* »«x:set up colors */»

  «k:if» (s->face->use_box_color_for_shadows_p)
    {
      newBaseCol = ns_lookup_indexed_color (s->face->box_color, s->f);
    }
«m:/*     »«x:else if (s->first_glyph->type == IMAGE_GLYPH
	   && s->img->pixmap
   	   && !IMAGE_BACKGROUND_TRANSPARENT (s->img, s->f, 0))
       {
         newBaseCol = IMAGE_BACKGROUND  (s->img, s->f, 0);
       } */»
  «k:else»
    {
      newBaseCol = ns_lookup_indexed_color (s->face->background, s->f);
    }

  «k:if» (newBaseCol == «c:nil»)
    newBaseCol = [«t:NSColor» grayColor];

  «k:if» (newBaseCol != baseCol)  «m:/* »«x:TODO: better check */»
    {
      [baseCol release];
      baseCol = [newBaseCol retain];
      [lightCol release];
      lightCol = [[baseCol highlightWithLevel: 0.2] retain];
      [darkCol release];
      darkCol = [[baseCol shadowWithLevel: 0.3] retain];
    }

  [(raised_p ? lightCol : darkCol) set];

  «m:/* »«x:TODO: mitering. Using NSBezierPath doesn't work because of color switch. */»

  «m:/* »«x:top */»
  sr.size.height = thickness;
  «k:if» (top_p) «t:NSRectFill» («v:sr»);

  «m:/* »«x:left */»
  sr.size.height = r.size.height;
  sr.size.width = thickness;
  «k:if» (left_p) «t:NSRectFill» («v:sr»);

  [(raised_p ? darkCol : lightCol) set];

  «m:/* »«x:bottom */»
  sr.size.width = r.size.width;
  sr.size.height = thickness;
  sr.origin.y += r.size.height - thickness;
  «k:if» (bottom_p) «t:NSRectFill» («v:sr»);

  «m:/* »«x:right */»
  sr.size.height = r.size.height;
  sr.origin.y = r.origin.y;
  sr.size.width = thickness;
  sr.origin.x += r.size.width - thickness;
  «k:if» (right_p) «t:NSRectFill» («v:sr»);
}


«k:static» «t:void»
«f:ns_dumpglyphs_box_or_relief» («k:struct» «t:glyph_string» *«t:s»)
«m:/* »«x:--------------------------------------------------------------------------
      Function modeled after x_draw_glyph_string_box ().
      Sets up parameters for drawing.
   -------------------------------------------------------------------------- */»
{
  «t:int» «v:right_x», «v:last_x»;
  «t:char» «v:left_p», «v:right_p»;
  «k:struct» «t:glyph» *«t:last_glyph»;
  «t:NSRect» «v:r»;
  «t:int» «v:thickness»;
  «k:struct» «t:face» *«t:face»;

  «k:if» (s->hl == DRAW_MOUSE_FACE)
    {
      face = FACE_FROM_ID (s->f, MOUSE_HL_INFO (s->f)->mouse_face_face_id);
      «k:if» («n:!»face)
        face = FACE_FROM_ID (s->f, MOUSE_FACE_ID);
    }
  «k:else»
    face = s->face;

  thickness = face->box_line_width;

  NSTRACE («s:"ns_dumpglyphs_box_or_relief"»);

  last_x = ((s->row->full_width_p && «n:!»s->w->pseudo_window_p)
	    ? WINDOW_RIGHT_EDGE_X (s->w)
	    : window_box_right (s->w, s->area));
  last_glyph = (s->cmp || s->img
                ? s->first_glyph : s->first_glyph + s->nchars-1);

  right_x = ((s->row->full_width_p && s->extends_to_end_of_line_p
	      ? last_x - 1 : min (last_x, s->x + s->background_width) - 1));

  left_p = (s->first_glyph->left_box_line_p
	    || (s->hl == DRAW_MOUSE_FACE
		&& (s->prev == NULL || s->prev->hl != s->hl)));
  right_p = (last_glyph->right_box_line_p
	     || (s->hl == DRAW_MOUSE_FACE
		 && (s->next == NULL || s->next->hl != s->hl)));

  r = NSMakeRect (s->x, s->y, right_x - s->x + 1, s->height);

  «m:/* »«x:TODO: Sometimes box_color is 0 and this seems wrong; should investigate. */»
  «k:if» (s->face->box == FACE_SIMPLE_BOX && s->face->box_color)
    {
      ns_draw_box (r, abs (thickness),
                   ns_lookup_indexed_color (face->box_color, s->f),
                  left_p, right_p);
    }
  «k:else»
    {
      ns_draw_relief (r, abs (thickness), s->face->box == FACE_RAISED_BOX,
                     1, 1, left_p, right_p, s);
    }
}


«k:static» «t:void»
«f:ns_maybe_dumpglyphs_background» («k:struct» «t:glyph_string» *«t:s», «t:char» «v:force_p»)
«m:/* »«x:--------------------------------------------------------------------------
      Modeled after x_draw_glyph_string_background, which draws BG in
      certain cases.  Others are left to the text rendering routine.
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"ns_maybe_dumpglyphs_background"»);

  «k:if» («n:!»s->background_filled_p«m:/* »«x:|| s->hl == DRAW_MOUSE_FACE*/»)
    {
      «t:int» «v:box_line_width» = max (s->face->box_line_width, 0);
      «k:if» (FONT_HEIGHT (s->font) < s->height - 2 * box_line_width
	  «m:/* »«x:When xdisp.c ignores FONT_HEIGHT, we cannot trust font
	     dimensions, since the actual glyphs might be much
	     smaller.  So in that case we always clear the rectangle
	     with background color.  */»
	  || FONT_TOO_HIGH (s->font)
          || s->font_not_found_p || s->extends_to_end_of_line_p || force_p)
	{
          «k:struct» «t:face» *«t:face»;
          «k:if» (s->hl == DRAW_MOUSE_FACE)
            {
              face = FACE_FROM_ID (s->f,
				   MOUSE_HL_INFO (s->f)->mouse_face_face_id);
              «k:if» («n:!»face)
                face = FACE_FROM_ID (s->f, MOUSE_FACE_ID);
            }
          «k:else»
            face = FACE_FROM_ID (s->f, s->first_glyph->face_id);
          «k:if» («n:!»face->stipple)
            [(NS_FACE_BACKGROUND (face) != 0
              ? ns_lookup_indexed_color (NS_FACE_BACKGROUND (face), s->f)
              : FRAME_BACKGROUND_COLOR (s->f)) set];
          «k:else»
            {
              «k:struct» «t:ns_display_info» *«t:dpyinfo» = FRAME_DISPLAY_INFO (s->f);
              [[dpyinfo->bitmaps[face->stipple-1].img stippleMask] set];
            }

          «k:if» (s->hl != DRAW_CURSOR)
            {
              «t:NSRect» «v:r» = NSMakeRect (s->x, s->y + box_line_width,
                                    s->background_width,
                                    s->height-2*box_line_width);
              NSRectFill («v:r»);
            }

	  s->background_filled_p = 1;
	}
    }
}


«k:static» «t:void»
«f:ns_dumpglyphs_image» («k:struct» «t:glyph_string» *«t:s», «t:NSRect» «v:r»)
«m:/* »«x:--------------------------------------------------------------------------
      Renders an image and associated borders.
   -------------------------------------------------------------------------- */»
{
  «t:EmacsImage» *«v:img» = s->img->pixmap;
  «t:int» «v:box_line_vwidth» = max (s->face->box_line_width, 0);
  «t:int» «v:x» = s->x, «v:y» = s->ybase - image_ascent (s->img, s->face, &s->slice);
  «t:int» «v:bg_x», «v:bg_y», «v:bg_height»;
  «t:int» «v:th»;
  «t:char» «v:raised_p»;
  «t:NSRect» «v:br»;
  «k:struct» «t:face» *«t:face»;
  «t:NSColor» *«v:tdCol»;

  NSTRACE («s:"ns_dumpglyphs_image"»);

  «k:if» (s->face->box != FACE_NO_BOX
      && s->first_glyph->left_box_line_p && s->slice.x == 0)
    x += abs (s->face->box_line_width);

  bg_x = x;
  bg_y =  s->slice.y == 0 ? s->y : s->y + box_line_vwidth;
  bg_height = s->height;
  «m:/* »«x:other terms have this, but was causing problems w/tabbar mode */»
  «m:/* »«x:- 2 * box_line_vwidth; */»

  «k:if» (s->slice.x == 0) x += s->img->hmargin;
  «k:if» (s->slice.y == 0) y += s->img->vmargin;

  «m:/* »«x:Draw BG: if we need larger area than image itself cleared, do that,
     otherwise, since we composite the image under NS (instead of mucking
     with its background color), we must clear just the image area. */»
  «k:if» (s->hl == DRAW_MOUSE_FACE)
    {
      face = FACE_FROM_ID (s->f, MOUSE_HL_INFO (s->f)->mouse_face_face_id);
      «k:if» («n:!»face)
       face = FACE_FROM_ID (s->f, MOUSE_FACE_ID);
    }
  «k:else»
    face = FACE_FROM_ID (s->f, s->first_glyph->face_id);

  [ns_lookup_indexed_color (NS_FACE_BACKGROUND (face), s->f) set];

  «k:if» (bg_height > s->slice.height || s->img->hmargin || s->img->vmargin
      || s->img->mask || s->img->pixmap == 0 || s->width != s->background_width)
    {
      br = NSMakeRect (bg_x, bg_y, s->background_width, bg_height);
      s->background_filled_p = 1;
    }
  «k:else»
    {
      br = NSMakeRect (x, y, s->slice.width, s->slice.height);
    }

  «t:NSRectFill» («v:br»);

  «m:/* »«x:Draw the image.. do we need to draw placeholder if img ==nil? */»
  «k:if» (img != «c:nil»)
    {
«p:#ifdef» NS_IMPL_COCOA
      «t:NSRect» «v:dr» = NSMakeRect (x, y, s->slice.width, s->slice.height);
      «t:NSRect» «v:ir» = NSMakeRect (s->slice.x, s->slice.y,
                              s->slice.width, s->slice.height);
      [img drawInRect: dr
             fromRect: ir
             operation: NSCompositeSourceOver
              fraction: 1.0
           respectFlipped: «c:YES»
                hints: «c:nil»];
«p:#else»
      [«t:img» compositeToPoint: NSMakePoint (x, y + s->slice.height)
                  operation: NSCompositeSourceOver];
«p:#endif»
    }

  «k:if» (s->hl == DRAW_CURSOR)
    {
    [FRAME_CURSOR_COLOR (s->f) set];
    «k:if» (s->w->phys_cursor_type == FILLED_BOX_CURSOR)
      tdCol = ns_lookup_indexed_color (NS_FACE_BACKGROUND (face), s->f);
    «k:else»
      «m:/* »«x:Currently on NS img->mask is always 0. Since
         get_window_cursor_type specifies a hollow box cursor when on
         a non-masked image we never reach this clause. But we put it
         in in anticipation of better support for image masks on
         NS. */»
      tdCol = ns_lookup_indexed_color (NS_FACE_FOREGROUND (face), s->f);
    }
  «k:else»
    {
      tdCol = ns_lookup_indexed_color (NS_FACE_FOREGROUND (face), s->f);
    }

  «m:/* »«x:Draw underline, overline, strike-through. */»
  ns_draw_text_decoration (s, face, tdCol, br.size.width, br.origin.x);

  «m:/* »«x:Draw relief, if requested */»
  «k:if» (s->img->relief || s->hl ==DRAW_IMAGE_RAISED || s->hl ==DRAW_IMAGE_SUNKEN)
    {
      «k:if» (s->hl == DRAW_IMAGE_SUNKEN || s->hl == DRAW_IMAGE_RAISED)
        {
          th = tool_bar_button_relief >= 0 ?
            tool_bar_button_relief : DEFAULT_TOOL_BAR_BUTTON_RELIEF;
          raised_p = (s->hl == DRAW_IMAGE_RAISED);
        }
      «k:else»
        {
          th = abs (s->img->relief);
          raised_p = (s->img->relief > 0);
        }

      r.origin.x = x - th;
      r.origin.y = y - th;
      r.size.width = s->slice.width + 2*th-1;
      r.size.height = s->slice.height + 2*th-1;
      ns_draw_relief (r, th, raised_p,
                      s->slice.y == 0,
                      s->slice.y + s->slice.height == s->img->height,
                      s->slice.x == 0,
                      s->slice.x + s->slice.width == s->img->width, s);
    }

  «m:/* »«x:If there is no mask, the background won't be seen,
     so draw a rectangle on the image for the cursor.
     Do this for all images, getting transparency right is not reliable.  */»
  «k:if» (s->hl == DRAW_CURSOR)
    {
      «t:int» «v:thickness» = abs (s->img->relief);
      «k:if» (thickness == 0) thickness = 1;
      ns_draw_box (br, thickness, FRAME_CURSOR_COLOR (s->f), 1, 1);
    }
}


«k:static» «t:void»
«f:ns_dumpglyphs_stretch» («k:struct» «t:glyph_string» *«t:s»)
{
  «t:NSRect» «v:r»[2];
  «t:int» «v:n», «v:i»;
  «k:struct» «t:face» *«t:face»;
  «t:NSColor» *«v:fgCol», *«v:bgCol»;

  «k:if» («n:!»s->background_filled_p)
    {
      n = ns_get_glyph_string_clip_rect (s, r);
      *r = NSMakeRect (s->x, s->y, s->background_width, s->height);

      ns_focus (s->f, r, n);

      «k:if» (s->hl == DRAW_MOUSE_FACE)
       {
         face = FACE_FROM_ID (s->f, MOUSE_HL_INFO (s->f)->mouse_face_face_id);
         «k:if» («n:!»face)
           face = FACE_FROM_ID (s->f, MOUSE_FACE_ID);
       }
      «k:else»
       face = FACE_FROM_ID (s->f, s->first_glyph->face_id);

      bgCol = ns_lookup_indexed_color (NS_FACE_BACKGROUND (face), s->f);
      fgCol = ns_lookup_indexed_color (NS_FACE_FOREGROUND (face), s->f);

      «k:for» (i = 0; i < n; ++i)
        {
          «k:if» («n:!»s->row->full_width_p)
            {
	      «t:int» «v:overrun», «v:leftoverrun»;

              «m:/* »«x:truncate to avoid overwriting fringe and/or scrollbar */»
	      overrun = max (0, (s->x + s->background_width)
			     - («t:WINDOW_BOX_RIGHT_EDGE_X» (s->w)
				- «f:WINDOW_RIGHT_FRINGE_WIDTH» (s->w)));
              r[i].size.width -= overrun;

	      «m:/* »«x:truncate to avoid overwriting to left of the window box */»
	      leftoverrun = (WINDOW_BOX_LEFT_EDGE_X (s->w)
			     + «f:WINDOW_LEFT_FRINGE_WIDTH» (s->w)) - «f:s»->x;

	      «k:if» (leftoverrun > 0)
		{
		  r[i].origin.x += leftoverrun;
		  r[i].size.width -= leftoverrun;
		}

              «m:/* »«x:XXX: Try to work between problem where a stretch glyph on
                 a partially-visible bottom row will clear part of the
                 modeline, and another where list-buffers headers and similar
                 rows erroneously have visible_height set to 0.  Not sure
                 where this is coming from as other terms seem not to show. */»
              r[i].size.height = min (s->height, s->row->visible_height);
            }

          [bgCol set];

          «m:/* »«x:NOTE: under NS this is NOT used to draw cursors, but we must avoid
             overwriting cursor (usually when cursor on a tab) */»
          «k:if» (s->hl == DRAW_CURSOR)
            {
              «t:CGFloat» «v:x», «v:width»;

              x = r[i].origin.x;
              width = s->w->phys_cursor_width;
              r[i].size.width -= width;
              r[i].origin.x += width;

              NSRectFill («v:r»[i]);

              «m:/* »«x:Draw overlining, etc. on the cursor. */»
              «k:if» (s->w->phys_cursor_type == FILLED_BOX_CURSOR)
                ns_draw_text_decoration (s, face, bgCol, width, x);
              «k:else»
                ns_draw_text_decoration (s, face, fgCol, width, x);
            }
          «k:else»
            {
              NSRectFill («v:r»[i]);
            }

          «m:/* »«x:Draw overlining, etc. on the stretch glyph (or the part
             of the stretch glyph after the cursor). */»
          ns_draw_text_decoration (s, face, fgCol, r[i].size.width,
                                   r[i].origin.x);
        }
      ns_unfocus (s->f);
      s->background_filled_p = 1;
    }
}


«k:static» «t:void»
«f:ns_draw_composite_glyph_string_foreground» («k:struct» «t:glyph_string» *«t:s»)
{
  «t:int» «v:i», «v:j», «v:x»;
  «k:struct» «t:font» *«t:font» = s->font;

  «m:/* »«x:If first glyph of S has a left box line, start drawing the text
     of S to the right of that box line.  */»
  «k:if» (s->face && s->face->box != FACE_NO_BOX
      && s->first_glyph->left_box_line_p)
    x = s->x + eabs (s->face->box_line_width);
  «k:else»
    x = s->x;

  «m:/* »«x:S is a glyph string for a composition.  S->cmp_from is the index
     of the first character drawn for glyphs of this composition.
     S->cmp_from == 0 means we are drawing the very first character of
     this composition.  */»

  «m:/* »«x:Draw a rectangle for the composition if the font for the very
     first character of the composition could not be loaded.  */»
  «k:if» (s->font_not_found_p)
    {
      «k:if» (s->cmp_from == 0)
        {
          «t:NSRect» «v:r» = NSMakeRect (s->x, s->y, s->width-1, s->height -1);
          ns_draw_box (r, 1, FRAME_CURSOR_COLOR (s->f), 1, 1);
        }
    }
  «k:else» «k:if» («n:!» s->first_glyph->u.cmp.automatic)
    {
      «t:int» «v:y» = s->ybase;

      «k:for» (i = 0, j = s->cmp_from; i < s->nchars; i++, j++)
	«m:/* »«x:TAB in a composition means display glyphs with padding
	   space on the left or right.  */»
	«k:if» (COMPOSITION_GLYPH (s->cmp, j) != «s:'\t'»)
	  {
	    «t:int» «v:xx» = x + s->cmp->offsets[j * 2];
	    «t:int» «v:yy» = y - s->cmp->offsets[j * 2 + 1];

	    font->driver->draw (s, j, j + 1, xx, yy, false);
	    «k:if» (s->face->overstrike)
	      font->driver->draw (s, j, j + 1, xx + 1, yy, false);
	  }
    }
  «k:else»
    {
      «t:Lisp_Object» «v:gstring» = composition_gstring_from_id (s->cmp_id);
      «t:Lisp_Object» «v:glyph»;
      «t:int» «v:y» = s->ybase;
      «t:int» «v:width» = 0;

      «k:for» (i = j = s->cmp_from; i < s->cmp_to; i++)
	{
	  glyph = LGSTRING_GLYPH (gstring, i);
	  «k:if» (NILP (LGLYPH_ADJUSTMENT (glyph)))
	    width += LGLYPH_WIDTH (glyph);
	  «k:else»
	    {
	      «t:int» «v:xoff», «v:yoff», «v:wadjust»;

	      «k:if» (j < i)
		{
		  font->driver->draw (s, j, i, x, y, false);
		  «k:if» (s->face->overstrike)
		    font->driver->draw (s, j, i, x + 1, y, false);
		  x += width;
		}
	      xoff = LGLYPH_XOFF (glyph);
	      yoff = LGLYPH_YOFF (glyph);
	      wadjust = LGLYPH_WADJUST (glyph);
	      font->driver->draw (s, i, i + 1, x + xoff, y + yoff, false);
	      «k:if» (s->face->overstrike)
		font->driver->draw (s, i, i + 1, x + xoff + 1, y + yoff,
				    false);
	      x += wadjust;
	      j = i + 1;
	      width = 0;
	    }
	}
      «k:if» (j < i)
	{
	  font->driver->draw (s, j, i, x, y, false);
	  «k:if» (s->face->overstrike)
	    font->driver->draw (s, j, i, x + 1, y, false);
	}
    }
}

«k:static» «t:void»
«f:ns_draw_glyph_string» («k:struct» «t:glyph_string» *«t:s»)
«m:/* »«x:--------------------------------------------------------------------------
      External (RIF): Main draw-text call.
   -------------------------------------------------------------------------- */»
{
  «m:/* »«x:TODO (optimize): focus for box and contents draw */»
  «t:NSRect» «v:r»[2];
  «t:int» «v:n», «v:flags»;
  «t:char» «v:box_drawn_p» = 0;
  «k:struct» «t:font» *«t:font» = s->face->font;
  «k:if» («n:!» font) font = FRAME_FONT (s->f);

  NSTRACE_WHEN (NSTRACE_GROUP_GLYPHS, «s:"ns_draw_glyph_string"»);

  «k:if» (s->next && s->right_overhang && «n:!»s->for_overlaps«m:/*»«x:&&s->hl!=DRAW_CURSOR*/»)
    {
      «t:int» «v:width»;
      «k:struct» «t:glyph_string» *«t:next»;

      «k:for» (width = 0, next = s->next;
	   next && width < s->right_overhang;
	   width += next->width, next = next->next)
	«k:if» (next->first_glyph->type != IMAGE_GLYPH)
          {
            «k:if» (next->first_glyph->type != STRETCH_GLYPH)
              {
                n = ns_get_glyph_string_clip_rect (s->next, r);
                ns_focus (s->f, r, n);
                ns_maybe_dumpglyphs_background (s->next, 1);
                ns_unfocus (s->f);
              }
            «k:else»
              {
                ns_dumpglyphs_stretch (s->next);
              }
            next->num_clips = 0;
          }
    }

  «k:if» («n:!»s->for_overlaps && s->face->box != FACE_NO_BOX
        && (s->first_glyph->type == CHAR_GLYPH
	    || s->first_glyph->type == COMPOSITE_GLYPH))
    {
      n = ns_get_glyph_string_clip_rect (s, r);
      ns_focus (s->f, r, n);
      ns_maybe_dumpglyphs_background (s, 1);
      ns_dumpglyphs_box_or_relief (s);
      ns_unfocus (s->f);
      box_drawn_p = 1;
    }

  «k:switch» (s->first_glyph->type)
    {

    «k:case» IMAGE_GLYPH:
      n = ns_get_glyph_string_clip_rect (s, r);
      ns_focus (s->f, r, n);
      ns_dumpglyphs_image (s, r[0]);
      ns_unfocus (s->f);
      «k:break»;

    «k:case» STRETCH_GLYPH:
      ns_dumpglyphs_stretch (s);
      «k:break»;

    «k:case» CHAR_GLYPH:
    «k:case» COMPOSITE_GLYPH:
      n = ns_get_glyph_string_clip_rect (s, r);
      ns_focus (s->f, r, n);

      «k:if» (s->for_overlaps || (s->cmp_from > 0
			      && «n:!» s->first_glyph->u.cmp.automatic))
        s->background_filled_p = 1;
      «k:else»
        ns_maybe_dumpglyphs_background
          (s, s->first_glyph->type == COMPOSITE_GLYPH);

      flags = s->hl == DRAW_CURSOR ? NS_DUMPGLYPH_CURSOR :
        (s->hl == DRAW_MOUSE_FACE ? NS_DUMPGLYPH_MOUSEFACE :
         (s->for_overlaps ? NS_DUMPGLYPH_FOREGROUND :
          NS_DUMPGLYPH_NORMAL));

      «k:if» (s->hl == DRAW_CURSOR && s->w->phys_cursor_type == FILLED_BOX_CURSOR)
        {
          «t:unsigned» «t:long» tmp = NS_FACE_BACKGROUND (s->face);
          NS_FACE_BACKGROUND (s->face) = NS_FACE_FOREGROUND (s->face);
          NS_FACE_FOREGROUND (s->face) = tmp;
        }

      {
        «t:BOOL» «v:isComposite» = s->first_glyph->type == COMPOSITE_GLYPH;

        «k:if» (isComposite)
          ns_draw_composite_glyph_string_foreground (s);
        «k:else»
          font->driver->draw
            (s, s->cmp_from, s->nchars, s->x, s->ybase,
             (flags == NS_DUMPGLYPH_NORMAL && «n:!»s->background_filled_p)
             || flags == NS_DUMPGLYPH_MOUSEFACE);
      }

      {
        «t:NSColor» *«v:col» = (NS_FACE_FOREGROUND (s->face) != 0
                        ? ns_lookup_indexed_color (NS_FACE_FOREGROUND (s->face),
                                                   s->f)
                        : FRAME_FOREGROUND_COLOR (s->f));
        [col set];

        «m:/* »«x:Draw underline, overline, strike-through. */»
        ns_draw_text_decoration (s, s->face, col, s->width, s->x);
      }

      «k:if» (s->hl == DRAW_CURSOR && s->w->phys_cursor_type == FILLED_BOX_CURSOR)
        {
          «t:unsigned» «t:long» tmp = NS_FACE_BACKGROUND (s->face);
          NS_FACE_BACKGROUND (s->face) = NS_FACE_FOREGROUND (s->face);
          NS_FACE_FOREGROUND (s->face) = tmp;
        }

      ns_unfocus (s->f);
      «k:break»;

    «k:case» GLYPHLESS_GLYPH:
      n = ns_get_glyph_string_clip_rect (s, r);
      ns_focus (s->f, r, n);

      «k:if» (s->for_overlaps || (s->cmp_from > 0
			      && «n:!» s->first_glyph->u.cmp.automatic))
        s->background_filled_p = 1;
      «k:else»
        ns_maybe_dumpglyphs_background
          (s, s->first_glyph->type == COMPOSITE_GLYPH);
      «m:/* »«x:... */»
      «m:/* »«x:Not yet implemented.  */»
      «m:/* »«x:... */»
      ns_unfocus (s->f);
      «k:break»;

    «k:default»:
      emacs_abort ();
    }

  «m:/* »«x:Draw box if not done already. */»
  «k:if» («n:!»s->for_overlaps && «n:!»box_drawn_p && s->face->box != FACE_NO_BOX)
    {
      n = ns_get_glyph_string_clip_rect (s, r);
      ns_focus (s->f, r, n);
      ns_dumpglyphs_box_or_relief (s);
      ns_unfocus (s->f);
    }

  s->num_clips = 0;
}



«m:/* »«x:==========================================================================

    Event loop

   ========================================================================== */»


«k:static» «t:void»
«f:ns_send_appdefined» («t:int» «v:value»)
«m:/* »«x:--------------------------------------------------------------------------
    Internal: post an appdefined event which EmacsApp-sendEvent will
              recognize and take as a command to halt the event loop.
   -------------------------------------------------------------------------- */»
{
  NSTRACE_WHEN (NSTRACE_GROUP_EVENTS, «s:"ns_send_appdefined(%d)"», value);

«p:#ifdef» NS_IMPL_GNUSTEP
  «m:// »«x:GNUstep needs postEvent to happen on the main thread.
»  «k:if» («n:!» [[«t:NSThread» currentThread] isMainThread])
    {
      «t:EmacsApp» *«v:app» = («t:EmacsApp» *)NSApp;
      app->nextappdefined = value;
      [app performSelectorOnMainThread:«k:@selector» (sendFromMainThread:)
                            withObject:«c:nil»
                         waitUntilDone:«c:YES»];
      «k:return»;
    }
«p:#endif»

  «m:/* »«x:Only post this event if we haven't already posted one.  This will end
       the [NXApp run] main loop after having processed all events queued at
       this moment.  */»

«p:#ifdef» NS_IMPL_COCOA
  «k:if» («n:!» send_appdefined)
    {
      «m:/* »«x:OSX 10.10.1 swallows the AppDefined event we are sending ourselves
         in certain situations (rapid incoming events).
         So check if we have one, if not add one.  */»
      «t:NSEvent» *«v:appev» = [«t:NSApp» nextEventMatchingMask:NSApplicationDefinedMask
                                          untilDate:[«t:NSDate» distantPast]
                                             inMode:NSDefaultRunLoopMode
                                            dequeue:«c:NO»];
      «k:if» («n:!» appev) send_appdefined = «c:YES»;
    }
«p:#endif»

  «k:if» (send_appdefined)
    {
      «t:NSEvent» *«v:nxev»;

      «m:/* »«x:We only need one NX_APPDEFINED event to stop NXApp from running.  */»
      send_appdefined = «c:NO»;

      «m:/* »«x:Don't need wakeup timer any more */»
      «k:if» (timed_entry)
        {
          [timed_entry invalidate];
          [timed_entry release];
          timed_entry = «c:nil»;
        }

      nxev = [«t:NSEvent» otherEventWithType: NSApplicationDefined
                                location: NSMakePoint (0, 0)
                           modifierFlags: 0
                               timestamp: 0
                            windowNumber: [[«t:NSApp» mainWindow] windowNumber]
                                 context: [«t:NSApp» context]
                                 subtype: 0
                                   data1: value
                                   data2: 0];

      «m:/* »«x:Post an application defined event on the event queue.  When this is
         received the [NXApp run] will return, thus having processed all
         events which are currently queued.  */»
      [«t:NSApp» postEvent: nxev atStart: «c:NO»];
    }
}

«p:#ifdef» HAVE_NATIVE_FS
«k:static» «t:void»
«f:check_native_fs» ()
{
  «t:Lisp_Object» «v:frame», «v:tail»;

  «k:if» (ns_last_use_native_fullscreen == ns_use_native_fullscreen)
    «k:return»;

  ns_last_use_native_fullscreen = ns_use_native_fullscreen;

  «f:FOR_EACH_FRAME» («t:tail», «t:frame»)
    {
      «k:struct» «t:frame» *«t:f» = XFRAME (frame);
      «k:if» (FRAME_NS_P (f))
        {
          «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);
          [view updateCollectionBehavior];
        }
    }
}
«p:#endif»

«m:/* »«x:GNUstep does not have cancelTracking.  */»
«p:#ifdef» NS_IMPL_COCOA
«m:/* »«x:Check if menu open should be canceled or continued as normal.  */»
«t:void»
«f:ns_check_menu_open» («t:NSMenu» *«v:menu»)
{
  «m:/* »«x:Click in menu bar? */»
  «t:NSArray» *«v:a» = [[«t:NSApp» mainMenu] itemArray];
  «t:int» «v:i»;
  «t:BOOL» «v:found» = «c:NO»;

  «k:if» (menu == «c:nil») «m:// »«x:Menu tracking ended.
»    {
      «k:if» (menu_will_open_state == MENU_OPENING)
        menu_will_open_state = MENU_NONE;
      «k:return»;
    }

  «k:for» (i = 0; «n:!» found && i < [a count]; i++)
    found = menu == [[a objectAtIndex:i] submenu];
  «k:if» (found)
    {
      «k:if» (menu_will_open_state == MENU_NONE && emacs_event)
        {
          «t:NSEvent» *«v:theEvent» = [«t:NSApp» currentEvent];
          «k:struct» «t:frame» *«t:emacsframe» = SELECTED_FRAME ();

          [menu cancelTracking];
          menu_will_open_state = MENU_PENDING;
          emacs_event->kind = MENU_BAR_ACTIVATE_EVENT;
          EV_TRAILER (theEvent);

          «t:CGEventRef» «v:ourEvent» = CGEventCreate (NULL);
          menu_mouse_point = CGEventGetLocation (ourEvent);
          «t:CFRelease» («v:ourEvent»);
        }
      «k:else» «k:if» (menu_will_open_state == MENU_OPENING)
        {
          menu_will_open_state = MENU_NONE;
        }
    }
}

«m:/* »«x:Redo saved menu click if state is MENU_PENDING.  */»
«t:void»
«f:ns_check_pending_open_menu» ()
{
  «k:if» (menu_will_open_state == MENU_PENDING)
    {
      «t:CGEventSourceRef» «v:source»
        = CGEventSourceCreate (kCGEventSourceStateHIDSystemState);

      «t:CGEventRef» «v:event» = CGEventCreateMouseEvent (source,
                                                  kCGEventLeftMouseDown,
                                                  menu_mouse_point,
                                                  kCGMouseButtonLeft);
      CGEventSetType («v:event», kCGEventLeftMouseDown);
      CGEventPost («v:kCGHIDEventTap», event);
      CFRelease («v:event»);
      «t:CFRelease» («v:source»);

      menu_will_open_state = MENU_OPENING;
    }
}
«p:#endif» «m:/* »«x:NS_IMPL_COCOA */»

«k:static» «t:void»
«f:unwind_apploopnr» («t:Lisp_Object» «v:not_used»)
{
  --apploopnr;
  n_emacs_events_pending = 0;
  ns_finish_events ();
  q_event_ptr = NULL;
}

«k:static» «t:int»
«f:ns_read_socket» («k:struct» «t:terminal» *«t:terminal», «k:struct» «t:input_event» *«t:hold_quit»)
«m:/* »«x:--------------------------------------------------------------------------
     External (hook): Post an event to ourself and keep reading events until
     we read it back again.  In effect process all events which were waiting.
     From 21+ we have to manage the event buffer ourselves.
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:input_event» «t:ev»;
  «t:int» «v:nevents»;

  NSTRACE_WHEN (NSTRACE_GROUP_EVENTS, «s:"ns_read_socket"»);

«p:#ifdef» HAVE_NATIVE_FS
  check_native_fs ();
«p:#endif»

  «k:if» ([«t:NSApp» modalWindow] != «c:nil»)
    «k:return» -1;

  «k:if» (hold_event_q.nr > 0)
    {
      «t:int» «v:i»;
      «k:for» (i = 0; i < hold_event_q.nr; ++i)
        kbd_buffer_store_event_hold (&hold_event_q.q[i], hold_quit);
      hold_event_q.nr = 0;
      «k:return» i;
    }

  block_input ();
  n_emacs_events_pending = 0;
  ns_init_events (&ev);
  q_event_ptr = hold_quit;

  «m:/* »«x:we manage autorelease pools by allocate/reallocate each time around
     the loop; strict nesting is occasionally violated but seems not to
     matter.. earlier methods using full nesting caused major memory leaks */»
  [outerpool release];
  outerpool = [[«t:NSAutoreleasePool» alloc] init];

  «m:/* »«x:If have pending open-file requests, attend to the next one of those. */»
  «k:if» (ns_pending_files && [ns_pending_files count] != 0
      && [(«t:EmacsApp» *)«t:NSApp» «v:openFile»: [ns_pending_files objectAtIndex: 0]])
    {
      [ns_pending_files removeObjectAtIndex: 0];
    }
  «m:/* »«x:Deal with pending service requests. */»
  «k:else» «k:if» (ns_pending_service_names && [ns_pending_service_names count] != 0
    && [(«t:EmacsApp» *)
         «t:NSApp» «v:fulfillService»: [ns_pending_service_names objectAtIndex: 0]
                      withArg: [ns_pending_service_args objectAtIndex: 0]])
    {
      [ns_pending_service_names removeObjectAtIndex: 0];
      [ns_pending_service_args removeObjectAtIndex: 0];
    }
  «k:else»
    {
      «t:ptrdiff_t» «v:specpdl_count» = SPECPDL_INDEX ();
      «m:/* »«x:Run and wait for events.  We must always send one NX_APPDEFINED event
         to ourself, otherwise [NXApp run] will never exit.  */»
      send_appdefined = «c:YES»;
      ns_send_appdefined (-1);

      «k:if» (++apploopnr != 1)
        {
          emacs_abort ();
        }
      record_unwind_protect (unwind_apploopnr, Qt);
      [«t:NSApp» run];
      unbind_to (specpdl_count, Qnil);  «m:/* »«x:calls unwind_apploopnr */»
    }

  nevents = n_emacs_events_pending;
  n_emacs_events_pending = 0;
  ns_finish_events ();
  q_event_ptr = NULL;
  unblock_input ();

  «k:return» nevents;
}


«t:int»
«f:ns_select» («t:int» «v:nfds», «t:fd_set» *«v:readfds», «t:fd_set» *«v:writefds»,
	   «t:fd_set» *«v:exceptfds», «k:struct» «t:timespec» «k:const» *«t:timeout»,
	   «t:sigset_t» «k:const» *«v:sigmask»)
«m:/* »«x:--------------------------------------------------------------------------
     Replacement for select, checking for events
   -------------------------------------------------------------------------- */»
{
  «t:int» «v:result»;
  «t:int» «v:t», «v:k», «v:nr» = 0;
  «k:struct» «t:input_event» «t:event»;
  «t:char» «v:c»;

  NSTRACE_WHEN (NSTRACE_GROUP_EVENTS, «s:"ns_select"»);

«p:#ifdef» HAVE_NATIVE_FS
  check_native_fs ();
«p:#endif»

  «k:if» (hold_event_q.nr > 0)
    {
      «m:/* »«x:We already have events pending. */»
      raise (SIGIO);
      errno = EINTR;
      «k:return» -1;
    }

  «k:for» (k = 0; k < nfds+1; k++)
    {
      «k:if» (readfds && FD_ISSET(k, readfds)) ++nr;
      «k:if» (writefds && FD_ISSET(k, writefds)) ++nr;
    }

  «k:if» (NSApp == «c:nil»
      || (timeout && timeout->tv_sec == 0 && timeout->tv_nsec == 0))
    «k:return» pselect (nfds, readfds, writefds, exceptfds, timeout, sigmask);

  [outerpool release];
  outerpool = [[«t:NSAutoreleasePool» alloc] init];


  send_appdefined = «c:YES»;
  «k:if» (nr > 0)
    {
      pthread_mutex_lock (&select_mutex);
      select_nfds = nfds;
      select_valid = 0;
      «k:if» (readfds)
        {
          select_readfds = *readfds;
          select_valid += SELECT_HAVE_READ;
        }
      «k:if» (writefds)
        {
          select_writefds = *writefds;
          select_valid += SELECT_HAVE_WRITE;
        }

      «k:if» (timeout)
        {
          select_timeout = *timeout;
          select_valid += SELECT_HAVE_TMO;
        }

      pthread_mutex_unlock (&select_mutex);

      «m:/* »«x:Inform fd_handler that select should be called */»
      c = «s:'g'»;
      emacs_write_sig (selfds[1], &c, 1);
    }
  «k:else» «k:if» (nr == 0 && timeout)
    {
      «m:/* »«x:No file descriptor, just a timeout, no need to wake fd_handler  */»
      «t:double» «v:time» = timespectod (*timeout);
      timed_entry = [[«t:NSTimer» scheduledTimerWithTimeInterval: time
                                                      target: NSApp
                                                    selector:
                                  «k:@selector» (timeout_handler:)
                                                    userInfo: 0
                                                     repeats: «c:NO»]
                      retain];
    }
  «k:else» «m:/* »«x:No timeout and no file descriptors, can this happen?  */»
    {
      «m:/* »«x:Send appdefined so we exit from the loop */»
      ns_send_appdefined (-1);
    }

  block_input ();
  ns_init_events (&event);
  «k:if» (++apploopnr != 1)
    {
      emacs_abort ();
    }

  {
    «t:ptrdiff_t» «v:specpdl_count» = SPECPDL_INDEX ();
    record_unwind_protect (unwind_apploopnr, Qt);
    [«t:NSApp» run];
    unbind_to (specpdl_count, Qnil);  «m:/* »«x:calls unwind_apploopnr */»
  }

  ns_finish_events ();
  «k:if» (nr > 0 && readfds)
    {
      c = «s:'s'»;
      emacs_write_sig (selfds[1], &c, 1);
    }
  unblock_input ();

  t = last_appdefined_event_data;

  «k:if» (t != NO_APPDEFINED_DATA)
    {
      last_appdefined_event_data = NO_APPDEFINED_DATA;

      «k:if» (t == -2)
        {
          «m:/* »«x:The NX_APPDEFINED event we received was a timeout. */»
          result = 0;
        }
      «k:else» «k:if» (t == -1)
        {
          «m:/* »«x:The NX_APPDEFINED event we received was the result of
             at least one real input event arriving.  */»
          errno = EINTR;
          result = -1;
        }
      «k:else»
        {
          «m:/* »«x:Received back from select () in fd_handler; copy the results */»
          pthread_mutex_lock (&select_mutex);
          «k:if» (readfds) *readfds = select_readfds;
          «k:if» (writefds) *writefds = select_writefds;
          pthread_mutex_unlock (&select_mutex);
          result = t;
        }
    }
  «k:else»
    {
      errno = EINTR;
      result = -1;
    }

  «k:return» result;
}



«m:/* »«x:==========================================================================

    Scrollbar handling

   ========================================================================== */»


«k:static» «t:void»
«f:ns_set_vertical_scroll_bar» («k:struct» «t:window» *«t:window»,
                           «t:int» «v:portion», «t:int» «v:whole», «t:int» «v:position»)
«m:/* »«x:--------------------------------------------------------------------------
      External (hook): Update or add scrollbar
   -------------------------------------------------------------------------- */»
{
  «t:Lisp_Object» «v:win»;
  «t:NSRect» «v:r», «v:v»;
  «k:struct» «t:frame» *«t:f» = XFRAME (WINDOW_FRAME (window));
  «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);
  «t:EmacsScroller» *«v:bar»;
  «t:int» «v:window_y», «v:window_height»;
  «t:int» «v:top», «v:left», «v:height», «v:width»;
  «t:BOOL» «v:update_p» = «c:YES»;

  «m:/* »«x:optimization; display engine sends WAY too many of these.. */»
  «k:if» («n:!»NILP (window->vertical_scroll_bar))
    {
      bar = XNS_SCROLL_BAR (window->vertical_scroll_bar);
      «k:if» ([bar checkSamePosition: position portion: portion whole: whole])
        {
          «k:if» (view->scrollbarsNeedingUpdate == 0)
            {
              «k:if» («n:!»windows_or_buffers_changed)
                  «k:return»;
            }
          «k:else»
            view->scrollbarsNeedingUpdate--;
          update_p = «c:NO»;
        }
    }

  NSTRACE («s:"ns_set_vertical_scroll_bar"»);

  «m:/* »«x:Get dimensions.  */»
  window_box (window, ANY_AREA, 0, &window_y, 0, &window_height);
  top = window_y;
  height = window_height;
  width = WINDOW_CONFIG_SCROLL_BAR_COLS (window) * FRAME_COLUMN_WIDTH (f);
  left = WINDOW_SCROLL_BAR_AREA_X (window);

  r = NSMakeRect (left, top, width, height);
  «m:/* »«x:the parent view is flipped, so we need to flip y value */»
  v = [view frame];
  r.origin.y = (v.size.height - r.size.height - r.origin.y);

  XSETWINDOW (win, window);
  block_input ();

  «m:/* »«x:we want at least 5 lines to display a scrollbar */»
  «k:if» (WINDOW_TOTAL_LINES (window) < 5)
    {
      «k:if» («n:!»NILP (window->vertical_scroll_bar))
        {
          bar = XNS_SCROLL_BAR (window->vertical_scroll_bar);
          [bar removeFromSuperview];
          wset_vertical_scroll_bar (window, Qnil);
          [bar release];
        }
      ns_clear_frame_area (f, left, top, width, height);
      unblock_input ();
      «k:return»;
    }

  «k:if» (NILP (window->vertical_scroll_bar))
    {
      «k:if» (width > 0 && height > 0)
	ns_clear_frame_area (f, left, top, width, height);

      bar = [[«t:EmacsScroller» alloc] initFrame: r window: win];
      wset_vertical_scroll_bar (window, make_save_ptr (bar));
      update_p = «c:YES»;
    }
  «k:else»
    {
      «t:NSRect» «v:oldRect»;
      bar = XNS_SCROLL_BAR (window->vertical_scroll_bar);
      oldRect = [bar frame];
      r.size.width = oldRect.size.width;
      «k:if» (FRAME_LIVE_P (f) && «n:!»NSEqualRects (oldRect, r))
        {
          «k:if» (oldRect.origin.x != r.origin.x)
              ns_clear_frame_area (f, left, top, width, height);
          [bar setFrame: r];
        }
    }

  «k:if» (update_p)
    [bar setPosition: position portion: portion whole: whole];
  unblock_input ();
}


«k:static» «t:void»
«f:ns_set_horizontal_scroll_bar» («k:struct» «t:window» *«t:window»,
			      «t:int» «v:portion», «t:int» «v:whole», «t:int» «v:position»)
«m:/* »«x:--------------------------------------------------------------------------
      External (hook): Update or add scrollbar
   -------------------------------------------------------------------------- */»
{
  «t:Lisp_Object» «v:win»;
  «t:NSRect» «v:r», «v:v»;
  «k:struct» «t:frame» *«t:f» = XFRAME (WINDOW_FRAME (window));
  «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);
  «t:EmacsScroller» *«v:bar»;
  «t:int» «v:top», «v:height», «v:left», «v:width»;
  «t:int» «v:window_x», «v:window_width»;
  «t:BOOL» «v:update_p» = «c:YES»;

  «m:/* »«x:optimization; display engine sends WAY too many of these.. */»
  «k:if» («n:!»NILP (window->horizontal_scroll_bar))
    {
      bar = XNS_SCROLL_BAR (window->horizontal_scroll_bar);
      «k:if» ([bar checkSamePosition: position portion: portion whole: whole])
        {
          «k:if» (view->scrollbarsNeedingUpdate == 0)
            {
              «k:if» («n:!»windows_or_buffers_changed)
                  «k:return»;
            }
          «k:else»
            view->scrollbarsNeedingUpdate--;
          update_p = «c:NO»;
        }
    }

  NSTRACE («s:"ns_set_horizontal_scroll_bar"»);

  «m:/* »«x:Get dimensions.  */»
  window_box (window, ANY_AREA, 0, &window_x, &window_width, 0);
  left = window_x;
  width = window_width;
  height = WINDOW_CONFIG_SCROLL_BAR_LINES (window) * FRAME_LINE_HEIGHT (f);
  top = WINDOW_SCROLL_BAR_AREA_Y (window);

  r = NSMakeRect (left, top, width, height);
  «m:/* »«x:the parent view is flipped, so we need to flip y value */»
  v = [view frame];
  «m:/* »«x:??????? PXW/scrollbars !!!!!!!!!!!!!!!!!!!! */»
  r.origin.y = (v.size.height - r.size.height - r.origin.y);

  XSETWINDOW (win, window);
  block_input ();

  «k:if» (WINDOW_TOTAL_COLS (window) < 5)
    {
      «k:if» («n:!»NILP (window->horizontal_scroll_bar))
        {
          bar = XNS_SCROLL_BAR (window->horizontal_scroll_bar);
          [bar removeFromSuperview];
          wset_horizontal_scroll_bar (window, Qnil);
        }
      ns_clear_frame_area (f, left, top, width, height);
      unblock_input ();
      «k:return»;
    }

  «k:if» (NILP (window->horizontal_scroll_bar))
    {
      «k:if» (width > 0 && height > 0)
	ns_clear_frame_area (f, left, top, width, height);

      bar = [[«t:EmacsScroller» alloc] initFrame: r window: win];
      wset_horizontal_scroll_bar (window, make_save_ptr (bar));
      update_p = «c:YES»;
    }
  «k:else»
    {
      «t:NSRect» «v:oldRect»;
      bar = XNS_SCROLL_BAR (window->horizontal_scroll_bar);
      oldRect = [bar frame];
      r.size.width = oldRect.size.width;
      «k:if» (FRAME_LIVE_P (f) && «n:!»NSEqualRects (oldRect, r))
        {
          «k:if» (oldRect.origin.x != r.origin.x)
              ns_clear_frame_area (f, left, top, width, height);
          [bar setFrame: r];
          update_p = «c:YES»;
        }
    }

  «k:if» (update_p)
    [bar setPosition: position portion: portion whole: whole];
  unblock_input ();
}


«k:static» «t:void»
«f:ns_condemn_scroll_bars» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     External (hook): arrange for all frame's scrollbars to be removed
     at next call to judge_scroll_bars, except for those redeemed.
   -------------------------------------------------------------------------- */»
{
  «t:int» «v:i»;
  «t:id» «v:view»;
  «t:NSArray» *«v:subviews» = [[FRAME_NS_VIEW (f) superview] subviews];

  NSTRACE («s:"ns_condemn_scroll_bars"»);

  «k:for» (i =[subviews count]-1; i >= 0; i--)
    {
      view = [subviews objectAtIndex: i];
      «k:if» ([view isKindOfClass: [«t:EmacsScroller» class]])
        [view condemn];
    }
}


«k:static» «t:void»
«f:ns_redeem_scroll_bar» («k:struct» «t:window» *«t:window»)
«m:/* »«x:--------------------------------------------------------------------------
     External (hook): arrange to spare this window's scrollbar
     at next call to judge_scroll_bars.
   -------------------------------------------------------------------------- */»
{
  «t:id» «v:bar»;
  NSTRACE («s:"ns_redeem_scroll_bar"»);
  «k:if» («n:!»NILP (window->vertical_scroll_bar))
    {
      bar = XNS_SCROLL_BAR (window->vertical_scroll_bar);
      [bar reprieve];
    }

  «k:if» («n:!»NILP (window->horizontal_scroll_bar))
    {
      bar = XNS_SCROLL_BAR (window->horizontal_scroll_bar);
      [bar reprieve];
    }
}


«k:static» «t:void»
«f:ns_judge_scroll_bars» («k:struct» «t:frame» *«t:f»)
«m:/* »«x:--------------------------------------------------------------------------
     External (hook): destroy all scrollbars on frame that weren't
     redeemed after call to condemn_scroll_bars.
   -------------------------------------------------------------------------- */»
{
  «t:int» «v:i»;
  «t:id» «v:view»;
  «t:EmacsView» *«v:eview» = FRAME_NS_VIEW (f);
  «t:NSArray» *«v:subviews» = [[eview superview] subviews];
  «t:BOOL» «v:removed» = «c:NO»;

  NSTRACE («s:"ns_judge_scroll_bars"»);
  «k:for» (i = [subviews count]-1; i >= 0; --i)
    {
      view = [subviews objectAtIndex: i];
      «k:if» («n:!»[view isKindOfClass: [«t:EmacsScroller» class]]) «k:continue»;
      «k:if» ([view judge])
        removed = «c:YES»;
    }

  «k:if» (removed)
    [eview updateFrameSize: «c:NO»];
}

«m:/* »«x:==========================================================================

    Initialization

   ========================================================================== */»

«t:int»
«f:x_display_pixel_height» («k:struct» «t:ns_display_info» *«t:dpyinfo»)
{
  «t:NSArray» *«v:screens» = [«t:NSScreen» screens];
  «t:NSEnumerator» *«v:enumerator» = [screens objectEnumerator];
  «t:NSScreen» *«v:screen»;
  «t:NSRect» «v:frame»;

  frame = NSZeroRect;
  «k:while» ((screen = [enumerator nextObject]) != «c:nil»)
    frame = NSUnionRect (frame, [screen frame]);

  «k:return» NSHeight (frame);
}

«t:int»
«f:x_display_pixel_width» («k:struct» «t:ns_display_info» *«t:dpyinfo»)
{
  «t:NSArray» *«v:screens» = [«t:NSScreen» screens];
  «t:NSEnumerator» *«v:enumerator» = [screens objectEnumerator];
  «t:NSScreen» *«v:screen»;
  «t:NSRect» «v:frame»;

  frame = NSZeroRect;
  «k:while» ((screen = [enumerator nextObject]) != «c:nil»)
    frame = NSUnionRect (frame, [screen frame]);

  «k:return» NSWidth (frame);
}


«k:static» «t:Lisp_Object» «f:ns_string_to_lispmod» («k:const» «t:char» *«v:s»)
«m:/* »«x:--------------------------------------------------------------------------
     Convert modifier name to lisp symbol
   -------------------------------------------------------------------------- */»
{
  «k:if» («n:!»strncmp (SSDATA (SYMBOL_NAME (Qmeta)), s, 10))
    «k:return» Qmeta;
  «k:else» «k:if» («n:!»strncmp (SSDATA (SYMBOL_NAME (Qsuper)), s, 10))
    «k:return» Qsuper;
  «k:else» «k:if» («n:!»strncmp (SSDATA (SYMBOL_NAME (Qcontrol)), s, 10))
    «k:return» Qcontrol;
  «k:else» «k:if» («n:!»strncmp (SSDATA (SYMBOL_NAME (Qalt)), s, 10))
    «k:return» Qalt;
  «k:else» «k:if» («n:!»strncmp (SSDATA (SYMBOL_NAME (Qhyper)), s, 10))
    «k:return» Qhyper;
  «k:else» «k:if» («n:!»strncmp (SSDATA (SYMBOL_NAME (Qnone)), s, 10))
    «k:return» Qnone;
  «k:else»
    «k:return» Qnil;
}


«k:static» «t:void»
«f:ns_default» («k:const» «t:char» *«v:parameter», «t:Lisp_Object» *«v:result»,
           «t:Lisp_Object» «v:yesval», «t:Lisp_Object» «v:noval»,
           «t:BOOL» «v:is_float», «t:BOOL» «v:is_modstring»)
«m:/* »«x:--------------------------------------------------------------------------
      Check a parameter value in user's preferences
   -------------------------------------------------------------------------- */»
{
  «k:const» «t:char» *«v:value» = ns_get_defaults_value (parameter);

  «k:if» (value)
    {
      «t:double» «v:f»;
      «t:char» *«v:pos»;
      «k:if» (c_strcasecmp (value, «s:"YES"») == 0)
        *result = yesval;
      «k:else» «k:if» (c_strcasecmp (value, «s:"NO"») == 0)
        *result = noval;
      «k:else» «k:if» (is_float && (f = strtod (value, &pos), pos != value))
        *result = make_float (f);
      «k:else» «k:if» (is_modstring && value)
        *result = ns_string_to_lispmod (value);
      «k:else» fprintf (stderr,
                   «s:"Bad value for default \"%s\": \"%s\"\n"», parameter, value);
    }
}


«k:static» «t:void»
«f:ns_initialize_display_info» («k:struct» «t:ns_display_info» *«t:dpyinfo»)
«m:/* »«x:--------------------------------------------------------------------------
      Initialize global info and storage for display.
   -------------------------------------------------------------------------- */»
{
    «t:NSScreen» *«v:screen» = [«t:NSScreen» mainScreen];
    «t:NSWindowDepth» «v:depth» = [screen depth];

    dpyinfo->resx = 72.27; «m:/* »«x:used 75.0, but this makes pt == pixel, expected */»
    dpyinfo->resy = 72.27;
    dpyinfo->color_p = «n:!»[«t:NSDeviceWhiteColorSpace» isEqualToString:
                                                  NSColorSpaceFromDepth (depth)]
                && «n:!»[«t:NSCalibratedWhiteColorSpace» isEqualToString:
                                                 NSColorSpaceFromDepth (depth)];
    dpyinfo->n_planes = NSBitsPerPixelFromDepth (depth);
    dpyinfo->color_table = xmalloc (sizeof *dpyinfo->color_table);
    dpyinfo->color_table->colors = NULL;
    dpyinfo->root_window = 42; «m:/* »«x:a placeholder.. */»
    dpyinfo->x_highlight_frame = dpyinfo->x_focus_frame = NULL;
    dpyinfo->n_fonts = 0;
    dpyinfo->smallest_font_height = 1;
    dpyinfo->smallest_char_width = 1;

    reset_mouse_highlight (&dpyinfo->mouse_highlight);
}


«m:/* »«x:This and next define (many of the) public functions in this file. */»
«m:/* »«x:x_... are generic versions in xdisp.c that we, and other terms, get away
         with using despite presence in the "system dependent" redisplay
         interface.  In addition, many of the ns_ methods have code that is
         shared with all terms, indicating need for further refactoring. */»
«k:extern» «t:frame_parm_handler» «v:ns_frame_parm_handlers»[];
«k:static» «k:struct» «t:redisplay_interface» «t:ns_redisplay_interface» =
{
  ns_frame_parm_handlers,
  x_produce_glyphs,
  x_write_glyphs,
  x_insert_glyphs,
  x_clear_end_of_line,
  ns_scroll_run,
  ns_after_update_window_line,
  ns_update_window_begin,
  ns_update_window_end,
  0, «m:/* »«x:flush_display */»
  x_clear_window_mouse_face,
  x_get_glyph_overhangs,
  x_fix_overlapping_area,
  ns_draw_fringe_bitmap,
  0, «m:/* »«x:define_fringe_bitmap */» «m:/* »«x:FIXME: simplify ns_draw_fringe_bitmap */»
  0, «m:/* »«x:destroy_fringe_bitmap */»
  ns_compute_glyph_string_overhangs,
  ns_draw_glyph_string,
  ns_define_frame_cursor,
  ns_clear_frame_area,
  ns_draw_window_cursor,
  ns_draw_vertical_window_border,
  ns_draw_window_divider,
  ns_shift_glyphs_for_insert,
  ns_show_hourglass,
  ns_hide_hourglass
};


«k:static» «t:void»
«f:ns_delete_display» («k:struct» «t:ns_display_info» *«t:dpyinfo»)
{
  «m:/* »«x:TODO... */»
}


«m:/* »«x:This function is called when the last frame on a display is deleted. */»
«k:static» «t:void»
«f:ns_delete_terminal» («k:struct» «t:terminal» *«t:terminal»)
{
  «k:struct» «t:ns_display_info» *«t:dpyinfo» = terminal->display_info.ns;

  NSTRACE («s:"ns_delete_terminal"»);

  «m:/* »«x:Protect against recursive calls.  delete_frame in
     delete_terminal calls us back when it deletes our last frame.  */»
  «k:if» («n:!»terminal->name)
    «k:return»;

  block_input ();

  x_destroy_all_bitmaps (dpyinfo);
  ns_delete_display (dpyinfo);
  unblock_input ();
}


«k:static» «k:struct» «t:terminal» *
«t:ns_create_terminal» («k:struct» «t:ns_display_info» *«t:dpyinfo»)
«m:/* »«x:--------------------------------------------------------------------------
      Set up use of NS before we make the first connection.
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:terminal» *«t:terminal»;

  NSTRACE («s:"ns_create_terminal"»);

  terminal = create_terminal (output_ns, &ns_redisplay_interface);

  terminal->display_info.ns = dpyinfo;
  dpyinfo->terminal = terminal;

  terminal->clear_frame_hook = ns_clear_frame;
  terminal->ring_bell_hook = ns_ring_bell;
  terminal->update_begin_hook = ns_update_begin;
  terminal->update_end_hook = ns_update_end;
  terminal->read_socket_hook = ns_read_socket;
  terminal->frame_up_to_date_hook = ns_frame_up_to_date;
  terminal->mouse_position_hook = ns_mouse_position;
  terminal->frame_rehighlight_hook = ns_frame_rehighlight;
  terminal->frame_raise_lower_hook = ns_frame_raise_lower;
  terminal->fullscreen_hook = ns_fullscreen_hook;
  terminal->menu_show_hook = ns_menu_show;
  terminal->popup_dialog_hook = ns_popup_dialog;
  terminal->set_vertical_scroll_bar_hook = ns_set_vertical_scroll_bar;
  terminal->set_horizontal_scroll_bar_hook = ns_set_horizontal_scroll_bar;
  terminal->condemn_scroll_bars_hook = ns_condemn_scroll_bars;
  terminal->redeem_scroll_bar_hook = ns_redeem_scroll_bar;
  terminal->judge_scroll_bars_hook = ns_judge_scroll_bars;
  terminal->delete_frame_hook = x_destroy_window;
  terminal->delete_terminal_hook = ns_delete_terminal;
  «m:/* »«x:Other hooks are NULL by default.  */»

  «k:return» terminal;
}


«k:struct» «t:ns_display_info» *
«t:ns_term_init» («t:Lisp_Object» «v:display_name»)
«m:/* »«x:--------------------------------------------------------------------------
     Start the Application and get things rolling.
   -------------------------------------------------------------------------- */»
{
  «k:struct» «t:terminal» *«t:terminal»;
  «k:struct» «t:ns_display_info» *«t:dpyinfo»;
  «k:static» «t:int» «v:ns_initialized» = 0;
  «t:Lisp_Object» «v:tmp»;

  «k:if» (ns_initialized) «k:return» x_display_list;
  ns_initialized = 1;

  block_input ();

  NSTRACE («s:"ns_term_init"»);

  [outerpool release];
  outerpool = [[«t:NSAutoreleasePool» alloc] init];

  «m:/* »«x:count object allocs (About, click icon); on OS X use ObjectAlloc tool */»
  «m:/*»«x:GSDebugAllocationActive (YES); */»
  block_input ();

  baud_rate = 38400;
  Fset_input_interrupt_mode («v:Qnil»);

  «k:if» (selfds[0] == -1)
    {
      «k:if» (emacs_pipe (selfds) != 0)
        {
          fprintf (stderr, «s:"Failed to create pipe: %s\n"»,
                   emacs_strerror (errno));
          emacs_abort ();
        }

      fcntl (selfds[0], F_SETFL, O_NONBLOCK|fcntl (selfds[0], F_GETFL));
      FD_ZERO (&select_readfds);
      FD_ZERO (&select_writefds);
      pthread_mutex_init (&select_mutex, NULL);
    }

  ns_pending_files = [[«t:NSMutableArray» alloc] init];
  ns_pending_service_names = [[«t:NSMutableArray» alloc] init];
  ns_pending_service_args = [[«t:NSMutableArray» alloc] init];

«m:/* »«x:Start app and create the main menu, window, view.
     Needs to be here because ns_initialize_display_info () uses AppKit classes.
     The view will then ask the NSApp to stop and return to Emacs. */»
  [«t:EmacsApp» sharedApplication];
  «k:if» (NSApp == «c:nil»)
    «k:return» NULL;
  [«t:NSApp» setDelegate: NSApp];

  «m:/* »«x:Start the select thread.  */»
  [«t:NSThread» detachNewThreadSelector:«k:@selector» (fd_handler:)
                           toTarget:NSApp
                         withObject:«c:nil»];

  «m:/* »«x:debugging: log all notifications */»
  «m:/*   »«x:[[NSNotificationCenter defaultCenter] addObserver: NSApp
                                         selector: @selector (logNotification:)
                                             name: nil object: nil]; */»

  dpyinfo = xzalloc (sizeof *dpyinfo);

  ns_initialize_display_info (dpyinfo);
  terminal = ns_create_terminal (dpyinfo);

  terminal->kboard = allocate_kboard (Qns);
  «m:/* »«x:Don't let the initial kboard remain current longer than necessary.
     That would cause problems if a file loaded on startup tries to
     prompt in the mini-buffer.  */»
  «k:if» (current_kboard == initial_kboard)
    current_kboard = terminal->kboard;
  terminal->kboard->reference_count++;

  dpyinfo->next = x_display_list;
  x_display_list = dpyinfo;

  dpyinfo->name_list_element = Fcons (display_name, Qnil);

  terminal->name = xlispstrdup (display_name);

  unblock_input ();

  «k:if» («n:!»inhibit_x_resources)
    {
      ns_default («s:"GSFontAntiAlias"», &ns_antialias_text,
                 Qt, Qnil, «c:NO», «c:NO»);
      tmp = Qnil;
      «m:/* »«x:this is a standard variable */»
      ns_default («s:"AppleAntiAliasingThreshold"», &tmp,
                 make_float (10.0), make_float (6.0), «c:YES», «c:NO»);
      ns_antialias_threshold = NILP (tmp) ? 10.0 : XFLOATINT (tmp);
    }

  NSTRACE_MSG («s:"Colors"»);

  {
    «t:NSColorList» *«v:cl» = [«t:NSColorList» colorListNamed: @«s:"Emacs"»];

    «k:if» ( cl == «c:nil» )
      {
        «t:Lisp_Object» «v:color_file», «v:color_map», «v:color»;
        «t:unsigned» «t:long» c;
        «t:char» *«v:name»;

        color_file = Fexpand_file_name (build_string («s:"rgb.txt"»),
                         «t:Fsymbol_value» («v:intern» («s:"data-directory"»)));

        color_map = Fx_load_color_file (color_file);
        «k:if» (NILP (color_map))
          fatal («s:"Could not read %s.\n"», SDATA (color_file));

        cl = [[«t:NSColorList» alloc] initWithName: @«s:"Emacs"»];
        «k:for» ( ; CONSP (color_map); color_map = XCDR (color_map))
          {
            color = XCAR (color_map);
            name = SSDATA (XCAR (color));
            c = XINT (XCDR (color));
            [cl setColor:
                  [«t:NSColor» colorForEmacsRed: RED_FROM_ULONG (c) / 255.0
                                      green: GREEN_FROM_ULONG (c) / 255.0
                                       blue: BLUE_FROM_ULONG (c) / 255.0
                                      alpha: 1.0]
                  forKey: [«t:NSString» stringWithUTF8String: name]];
          }
        [cl writeToFile: «c:nil»];
      }
  }

  NSTRACE_MSG («s:"Versions"»);

  {
«p:#ifdef» NS_IMPL_GNUSTEP
    Vwindow_system_version = build_string (gnustep_base_version);
«p:#else»
    «m:/*»«x:PSnextrelease (128, c); */»
    «t:char» «v:c»[DBL_BUFSIZE_BOUND];
    «t:int» «v:len» = dtoastr (c, «t:sizeof» «v:c», 0, 0, NSAppKitVersionNumber);
    Vwindow_system_version = make_unibyte_string (c, len);
«p:#endif»
  }

  delete_keyboard_wait_descriptor (0);

  ns_app_name = [[«t:NSProcessInfo» processInfo] processName];

  «m:/* »«x:Set up OS X app menu */»

  NSTRACE_MSG («s:"Menu init"»);

«p:#ifdef» NS_IMPL_COCOA
  {
    «t:NSMenu» *«v:appMenu»;
    «t:NSMenuItem» *«v:item»;
    «m:/* »«x:set up the application menu */»
    svcsMenu = [[«t:EmacsMenu» alloc] initWithTitle: @«s:"Services"»];
    [svcsMenu setAutoenablesItems: «c:NO»];
    appMenu = [[«t:EmacsMenu» alloc] initWithTitle: @«s:"Emacs"»];
    [appMenu setAutoenablesItems: «c:NO»];
    mainMenu = [[«t:EmacsMenu» alloc] initWithTitle: @«s:""»];
    dockMenu = [[«t:EmacsMenu» alloc] initWithTitle: @«s:""»];

    [«t:appMenu» insertItemWithTitle: @«s:"About Emacs"»
                          action: «k:@selector» (orderFrontStandardAboutPanel:)
                   keyEquivalent: @«s:""»
                         atIndex: 0];
    [appMenu insertItem: [«t:NSMenuItem» separatorItem] atIndex: 1];
    [«t:appMenu» insertItemWithTitle: @«s:"Preferences..."»
                          action: «k:@selector» (showPreferencesWindow:)
                   keyEquivalent: @«s:","»
                         atIndex: 2];
    [appMenu insertItem: [«t:NSMenuItem» separatorItem] atIndex: 3];
    item = [appMenu insertItemWithTitle: @«s:"Services"»
                                 action: «k:@selector» (menuDown:)
                          keyEquivalent: @«s:""»
                                atIndex: 4];
    [appMenu setSubmenu: svcsMenu forItem: item];
    [appMenu insertItem: [«t:NSMenuItem» separatorItem] atIndex: 5];
    [«t:appMenu» insertItemWithTitle: @«s:"Hide Emacs"»
                          action: «k:@selector» (hide:)
                   keyEquivalent: @«s:"h"»
                         atIndex: 6];
    item =  [appMenu insertItemWithTitle: @«s:"Hide Others"»
                          action: «k:@selector» (hideOtherApplications:)
                   keyEquivalent: @«s:"h"»
                         atIndex: 7];
    [item setKeyEquivalentModifierMask: NSCommandKeyMask | NSAlternateKeyMask];
    [appMenu insertItem: [«t:NSMenuItem» separatorItem] atIndex: 8];
    [«t:appMenu» insertItemWithTitle: @«s:"Quit Emacs"»
                          action: «k:@selector» (terminate:)
                   keyEquivalent: @«s:"q"»
                         atIndex: 9];

    item = [mainMenu insertItemWithTitle: ns_app_name
                                  action: «k:@selector» (menuDown:)
                           keyEquivalent: @«s:""»
                                 atIndex: 0];
    [mainMenu setSubmenu: appMenu forItem: item];
    [«t:dockMenu» insertItemWithTitle: @«s:"New Frame"»
			   action: «k:@selector» (newFrame:)
		    keyEquivalent: @«s:""»
			  atIndex: 0];

    [«t:NSApp» setMainMenu: mainMenu];
    [«t:NSApp» setAppleMenu: appMenu];
    [«t:NSApp» setServicesMenu: svcsMenu];
    «m:/* »«x:Needed at least on Cocoa, to get dock menu to show windows */»
    [«t:NSApp» setWindowsMenu: [[«t:NSMenu» alloc] init]];

    [[«t:NSNotificationCenter» defaultCenter]
      addObserver: mainMenu
         selector: «k:@selector» (trackingNotification:)
             name: NSMenuDidBeginTrackingNotification object: mainMenu];
    [[«t:NSNotificationCenter» defaultCenter]
      addObserver: mainMenu
         selector: «k:@selector» (trackingNotification:)
             name: NSMenuDidEndTrackingNotification object: mainMenu];
  }
«p:#endif» «m:/* »«x:MAC OS X menu setup */»

  «m:/* »«x:Register our external input/output types, used for determining
     applicable services and also drag/drop eligibility. */»

  NSTRACE_MSG («s:"Input/output types"»);

  ns_send_types = [[«t:NSArray» arrayWithObjects: NSStringPboardType, «c:nil»] retain];
  ns_return_types = [[«t:NSArray» arrayWithObjects: NSStringPboardType, «c:nil»]
                      retain];
  ns_drag_types = [[«t:NSArray» arrayWithObjects:
                            NSStringPboardType,
                            NSTabularTextPboardType,
                            NSFilenamesPboardType,
                            NSURLPboardType, «c:nil»] retain];

  «m:/* »«x:If fullscreen is in init/default-frame-alist, focus isn't set
     right for fullscreen windows, so set this.  */»
  [«t:NSApp» activateIgnoringOtherApps:«c:YES»];

  NSTRACE_MSG («s:"Call NSApp run"»);

  [«t:NSApp» run];
  ns_do_open_file = «c:YES»;

«p:#ifdef» NS_IMPL_GNUSTEP
  «m:/* »«x:GNUstep steals SIGCHLD for use in NSTask, but we don't use NSTask.
     We must re-catch it so subprocess works.  */»
  catch_child_signal ();
«p:#endif»

  NSTRACE_MSG («s:"ns_term_init done"»);

  unblock_input ();

  «k:return» dpyinfo;
}


«t:void»
«f:ns_term_shutdown» («t:int» «v:sig»)
{
  [[«t:NSUserDefaults» standardUserDefaults] synchronize];

  «m:/* »«x:code not reached in emacs.c after this is called by shut_down_emacs: */»
  «k:if» (STRINGP (Vauto_save_list_file_name))
    unlink (SSDATA (Vauto_save_list_file_name));

  «k:if» (sig == 0 || sig == SIGTERM)
    {
      [«t:NSApp» terminate: NSApp];
    }
  «k:else» «m:// »«x:force a stack trace to happen
»    {
      emacs_abort ();
    }
}


«m:/* »«x:==========================================================================

    EmacsApp implementation

   ========================================================================== */»


«k:@implementation» «t:EmacsApp»

- («t:id»)«f:init»
{
  NSTRACE («s:"[EmacsApp init]"»);

  «k:if» ((«k:self» = [«k:super» init]))
    {
«p:#ifdef» NS_IMPL_COCOA
      «k:self»->isFirst = «c:YES»;
«p:#endif»
«p:#ifdef» NS_IMPL_GNUSTEP
      «k:self»->applicationDidFinishLaunchingCalled = «c:NO»;
«p:#endif»
    }

  «k:return» «k:self»;
}

«p:#ifdef» NS_IMPL_COCOA
- («t:void»)«f:run»
{
  NSTRACE («s:"[EmacsApp run]"»);

«p:#if»«n:«p:n»»«p:def» NSAppKitVersionNumber10_9
«p:#define» «v:NSAppKitVersionNumber10_9» 1265
«p:#endif»

    «k:if» ((«t:int»)NSAppKitVersionNumber != NSAppKitVersionNumber10_9)
      {
        [«k:super» run];
        «k:return»;
      }

  «t:NSAutoreleasePool» *«v:pool» = [[«t:NSAutoreleasePool» alloc] init];

  «k:if» (isFirst) [«k:self» finishLaunching];
  isFirst = «c:NO»;

  shouldKeepRunning = «c:YES»;
  «k:do»
    {
      [pool release];
      pool = [[«t:NSAutoreleasePool» alloc] init];

      «t:NSEvent» *«v:event» =
        [«k:self» nextEventMatchingMask:NSAnyEventMask
                          untilDate:[«t:NSDate» distantFuture]
                             inMode:NSDefaultRunLoopMode
                            dequeue:«c:YES»];

      [«k:self» sendEvent:event];
      [«k:self» updateWindows];
    } «k:while» (shouldKeepRunning);

  [pool release];
}

- («t:void»)«f:stop»: («t:id»)«v:sender»
{
  NSTRACE («s:"[EmacsApp stop:]"»);

    shouldKeepRunning = «c:NO»;
    «m:// »«x:Stop possible dialog also.  Noop if no dialog present.
»    «m:// »«x:The file dialog still leaks 7k - 10k on 10.9 though.
»    [«k:super» stop:sender];
}
«p:#endif» «m:/* »«x:NS_IMPL_COCOA */»

- («t:void»)«f:logNotification»: («t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsApp logNotification:]"»);

  «k:const» «t:char» *«v:name» = [[notification name] UTF8String];
  «k:if» («n:!»strstr (name, «s:"Update"») && «n:!»strstr (name, «s:"NSMenu"»)
      && «n:!»strstr (name, «s:"WindowNumber"»))
    NSLog (@«s:"notification: '%@'"», [notification name]);
}


- («t:void»)«f:sendEvent»: («t:NSEvent» *)«v:theEvent»
«m:/* »«x:--------------------------------------------------------------------------
     Called when NSApp is running for each event received.  Used to stop
     the loop when we choose, since there's no way to just run one iteration.
   -------------------------------------------------------------------------- */»
{
  «t:int» «v:type» = [theEvent type];
  «t:NSWindow» *«v:window» = [theEvent window];

  NSTRACE_WHEN (NSTRACE_GROUP_EVENTS, «s:"[EmacsApp sendEvent:]"»);
  NSTRACE_MSG («s:"Type: %d"», type);

«p:#ifdef» NS_IMPL_GNUSTEP
  «m:// »«x:Keyboard events aren't propagated to file dialogs for some reason.
»  «k:if» ([«t:NSApp» modalWindow] != «c:nil» &&
      (type == NSKeyDown || type == NSKeyUp || type == NSFlagsChanged))
    {
      [[«t:NSApp» modalWindow] sendEvent: theEvent];
      «k:return»;
    }
«p:#endif»

  «k:if» (represented_filename != «c:nil» && represented_frame)
    {
      «t:NSString» *«v:fstr» = represented_filename;
      «t:NSView» *«v:view» = FRAME_NS_VIEW (represented_frame);
«p:#ifdef» NS_IMPL_COCOA
      «m:/* »«x:work around a bug observed on 10.3 and later where
         setTitleWithRepresentedFilename does not clear out previous state
         if given filename does not exist */»
      «k:if» («n:!» [[«t:NSFileManager» defaultManager] fileExistsAtPath: fstr])
        [[view window] setRepresentedFilename: @«s:""»];
«p:#endif»
      [[view window] setRepresentedFilename: fstr];
      [represented_filename release];
      represented_filename = «c:nil»;
      represented_frame = NULL;
    }

  «k:if» (type == NSApplicationDefined)
    {
      «k:switch» ([theEvent data2])
        {
«p:#ifdef» NS_IMPL_COCOA
        «k:case» NSAPP_DATA2_RUNASSCRIPT:
          ns_run_ascript ();
          [«k:self» stop: «k:self»];
          «k:return»;
«p:#endif»
        «k:case» NSAPP_DATA2_RUNFILEDIALOG:
          ns_run_file_dialog ();
          [«k:self» stop: «k:self»];
          «k:return»;
        }
    }

  «k:if» (type == NSCursorUpdate && window == «c:nil»)
    {
      fprintf (stderr, «s:"Dropping external cursor update event.\n"»);
      «k:return»;
    }

  «k:if» (type == NSApplicationDefined)
    {
      «m:/* »«x:Events posted by ns_send_appdefined interrupt the run loop here.
         But, if a modal window is up, an appdefined can still come through,
         (e.g., from a makeKeyWindow event) but stopping self also stops the
         modal loop. Just defer it until later. */»
      «k:if» ([«t:NSApp» modalWindow] == «c:nil»)
        {
          last_appdefined_event_data = [theEvent data1];
          [«k:self» stop: «k:self»];
        }
      «k:else»
        {
          send_appdefined = «c:YES»;
        }
    }


«p:#ifdef» NS_IMPL_COCOA
  «m:/* »«x:If no dialog and none of our frames have focus and it is a move, skip it.
     It is a mouse move in an auxiliary menu, i.e. on the top right on OSX,
     such as Wifi, sound, date or similar.
     This prevents "spooky" highlighting in the frame under the menu.  */»
  «k:if» (type == NSMouseMoved && [«t:NSApp» modalWindow] == «c:nil»)
    {
      «k:struct» «t:ns_display_info» *«t:di»;
      «t:BOOL» «v:has_focus» = «c:NO»;
      «k:for» (di = x_display_list; «n:!» has_focus && di; di = di->next)
        has_focus = di->x_focus_frame != 0;
      «k:if» («n:!» has_focus)
        «k:return»;
    }
«p:#endif»

  NSTRACE_UNSILENCE();

  [«k:super» sendEvent: theEvent];
}


- («t:void»)«f:showPreferencesWindow»: («t:id»)«v:sender»
{
  «k:struct» «t:frame» *«t:emacsframe» = SELECTED_FRAME ();
  «t:NSEvent» *«v:theEvent» = [«t:NSApp» currentEvent];

  «k:if» («n:!»emacs_event)
    «k:return»;
  emacs_event->kind = NS_NONKEY_EVENT;
  emacs_event->code = KEY_NS_SHOW_PREFS;
  emacs_event->modifiers = 0;
  EV_TRAILER (theEvent);
}


- («t:void»)«f:newFrame»: («t:id»)«v:sender»
{
  NSTRACE («s:"[EmacsApp newFrame:]"»);

  «k:struct» «t:frame» *«t:emacsframe» = SELECTED_FRAME ();
  «t:NSEvent» *«v:theEvent» = [«t:NSApp» currentEvent];

  «k:if» («n:!»emacs_event)
    «k:return»;
  emacs_event->kind = NS_NONKEY_EVENT;
  emacs_event->code = KEY_NS_NEW_FRAME;
  emacs_event->modifiers = 0;
  EV_TRAILER (theEvent);
}


«m:/* »«x:Open a file (used by below, after going into queue read by ns_read_socket) */»
- («t:BOOL») «f:openFile»: («t:NSString» *)«v:fileName»
{
  NSTRACE («s:"[EmacsApp openFile:]"»);

  «k:struct» «t:frame» *«t:emacsframe» = SELECTED_FRAME ();
  «t:NSEvent» *«v:theEvent» = [«t:NSApp» currentEvent];

  «k:if» («n:!»emacs_event)
    «k:return» «c:NO»;

  emacs_event->kind = NS_NONKEY_EVENT;
  emacs_event->code = KEY_NS_OPEN_FILE_LINE;
  ns_input_file = append2 (ns_input_file, build_string ([fileName UTF8String]));
  ns_input_line = Qnil; «m:/* »«x:can be start or cons start,end */»
  emacs_event->modifiers =0;
  EV_TRAILER (theEvent);

  «k:return» «c:YES»;
}


«m:/* »«x:**************************************************************************

      EmacsApp delegate implementation

   ************************************************************************** */»

- («t:void»)«f:applicationDidFinishLaunching»: («t:NSNotification» *)«v:notification»
«m:/* »«x:--------------------------------------------------------------------------
     When application is loaded, terminate event loop in ns_term_init
   -------------------------------------------------------------------------- */»
{
  NSTRACE («s:"[EmacsApp applicationDidFinishLaunching:]"»);

«p:#ifdef» NS_IMPL_GNUSTEP
  ((«t:EmacsApp» *)«k:self»)->applicationDidFinishLaunchingCalled = «c:YES»;
«p:#endif»
  [«t:NSApp» setServicesProvider: NSApp];

  [«k:self» antialiasThresholdDidChange:«c:nil»];
«p:#ifdef» NS_IMPL_COCOA
  [[«t:NSNotificationCenter» defaultCenter]
    addObserver:«k:self»
       selector:«k:@selector»(antialiasThresholdDidChange:)
	   name:NSAntialiasThresholdChangedNotification
	 object:«c:nil»];
«p:#endif»

  ns_send_appdefined (-2);
}

- («t:void»)«f:antialiasThresholdDidChange»:(«t:NSNotification» *)«v:notification»
{
«p:#ifdef» NS_IMPL_COCOA
  macfont_update_antialias_threshold ();
«p:#endif»
}


«m:/* »«x:Termination sequences:
    C-x C-c:
    Cmd-Q:
    MenuBar | File | Exit:
    Select Quit from App menubar:
        -terminate
	KEY_NS_POWER_OFF, (save-buffers-kill-emacs)
	ns_term_shutdown()

    Select Quit from Dock menu:
    Logout attempt:
        -appShouldTerminate
          Cancel -> Nothing else
          Accept ->

	  -terminate
	  KEY_NS_POWER_OFF, (save-buffers-kill-emacs)
	  ns_term_shutdown()

*/»

- («t:void») «f:terminate»: («t:id»)«v:sender»
{
  NSTRACE («s:"[EmacsApp terminate:]"»);

  «k:struct» «t:frame» *«t:emacsframe» = SELECTED_FRAME ();

  «k:if» («n:!»emacs_event)
    «k:return»;

  emacs_event->kind = NS_NONKEY_EVENT;
  emacs_event->code = KEY_NS_POWER_OFF;
  emacs_event->arg = Qt; «m:/* »«x:mark as non-key event */»
  EV_TRAILER ((«t:id»)«c:nil»);
}

«k:static» «t:bool»
«f:runAlertPanel»(«t:NSString» *«v:title»,
              «t:NSString» *«v:msgFormat»,
              «t:NSString» *«v:defaultButton»,
              «t:NSString» *«v:alternateButton»)
{
«p:#if» «n:!»«p:defined» (NS_IMPL_COCOA) || \
  MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_9
  «k:return» NSRunAlertPanel(title, msgFormat, defaultButton, alternateButton, «c:nil»)
    == NSAlertDefaultReturn;
«p:#else»
  «t:NSAlert» *«v:alert» = [[«t:NSAlert» alloc] init];
  [alert setAlertStyle: NSCriticalAlertStyle];
  [alert setMessageText: msgFormat];
  [alert addButtonWithTitle: defaultButton];
  [alert addButtonWithTitle: alternateButton];
  «t:NSInteger» «v:ret» = [alert runModal];
  [alert release];
  «k:return» ret == NSAlertFirstButtonReturn;
«p:#endif»
}


- («t:NSApplicationTerminateReply»)«f:applicationShouldTerminate»: («t:id»)«v:sender»
{
  NSTRACE («s:"[EmacsApp applicationShouldTerminate:]"»);

  «t:bool» «v:ret»;

  «k:if» (NILP (ns_confirm_quit)) «m://   »«x:|| ns_shutdown_properly  --> TO DO
»    «k:return» NSTerminateNow;

    ret = runAlertPanel(ns_app_name,
                        @«s:"Exit requested.  Would you like to Save Buffers and Exit, or Cancel the request?"»,
                        @«s:"Save Buffers and Exit"», @«s:"Cancel"»);

    «k:if» (ret)
        «k:return» NSTerminateNow;
    «k:else»
        «k:return» NSTerminateCancel;
    «k:return» NSTerminateNow;  «m:/* »«x:just in case */»
}

«k:static» «t:int»
«f:not_in_argv» («t:NSString» *«v:arg»)
{
  «t:int» «v:k»;
  «k:const» «t:char» *«v:a» = [arg UTF8String];
  «k:for» (k = 1; k < initial_argc; ++k)
    «k:if» (strcmp (a, initial_argv[k]) == 0) «k:return» 0;
  «k:return» 1;
}

«m:/*   »«x:Notification from the Workspace to open a file */»
- («t:BOOL»)«f:application»: «v:sender» «f:openFile»: («t:NSString» *)«v:file»
{
  «k:if» (ns_do_open_file || not_in_argv (file))
    [ns_pending_files addObject: file];
  «k:return» «c:YES»;
}


«m:/*   »«x:Open a file as a temporary file */»
- («t:BOOL»)«f:application»: «v:sender» «f:openTempFile»: («t:NSString» *)«v:file»
{
  «k:if» (ns_do_open_file || not_in_argv (file))
    [ns_pending_files addObject: file];
  «k:return» «c:YES»;
}


«m:/*   »«x:Notification from the Workspace to open a file noninteractively (?) */»
- («t:BOOL»)«f:application»: «v:sender» «f:openFileWithoutUI»: («t:NSString» *)«v:file»
{
  «k:if» (ns_do_open_file || not_in_argv (file))
    [ns_pending_files addObject: file];
  «k:return» «c:YES»;
}

«m:/*   »«x:Notification from the Workspace to open multiple files */»
- («t:void»)«f:application»: «v:sender» «f:openFiles»: («t:NSArray» *)«v:fileList»
{
  «t:NSEnumerator» *«v:files» = [fileList objectEnumerator];
  «t:NSString» *«v:file»;
  «m:/* »«x:Don't open files from the command line unconditionally,
     Cocoa parses the command line wrong, --option value tries to open value
     if --option is the last option.  */»
  «k:while» ((file = [files nextObject]) != «c:nil»)
    «k:if» (ns_do_open_file || not_in_argv (file))
      [ns_pending_files addObject: file];

  [«k:self» replyToOpenOrPrint: NSApplicationDelegateReplySuccess];

}


«m:/* »«x:Handle dock menu requests.  */»
- («t:NSMenu» *)«f:applicationDockMenu»: («t:NSApplication» *) «v:sender»
{
  «k:return» dockMenu;
}


«m:/* »«x:TODO: these may help w/IO switching btwn terminal and NSApp */»
- («t:void»)«f:applicationWillBecomeActive»: («t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsApp applicationWillBecomeActive:]"»);
  «m://»«x:ns_app_active=YES;
»}

- («t:void»)«f:applicationDidBecomeActive»: («t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsApp applicationDidBecomeActive:]"»);

«p:#ifdef» NS_IMPL_GNUSTEP
  «k:if» («n:!» applicationDidFinishLaunchingCalled)
    [«k:self» applicationDidFinishLaunching:notification];
«p:#endif»
  «m://»«x:ns_app_active=YES;
»
  ns_update_auto_hide_menu_bar ();
  «m:// »«x:No constraining takes place when the application is not active.
»  ns_constrain_all_frames ();
}
- («t:void»)«f:applicationDidResignActive»: («t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsApp applicationDidResignActive:]"»);

  «m://»«x:ns_app_active=NO;
»  ns_send_appdefined (-1);
}



«m:/* »«x:==========================================================================

    EmacsApp aux handlers for managing event loop

   ========================================================================== */»


- («t:void»)«f:timeout_handler»: («t:NSTimer» *)«v:timedEntry»
«m:/* »«x:--------------------------------------------------------------------------
     The timeout specified to ns_select has passed.
   -------------------------------------------------------------------------- */»
{
  «m:/*»«x:NSTRACE ("timeout_handler"); */»
  ns_send_appdefined (-2);
}

«p:#ifdef» NS_IMPL_GNUSTEP
- («t:void»)«f:sendFromMainThread»:(«t:id»)«v:unused»
{
  ns_send_appdefined (nextappdefined);
}
«p:#endif»

- («t:void»)«f:fd_handler»:(«t:id»)«v:unused»
«m:/* »«x:--------------------------------------------------------------------------
     Check data waiting on file descriptors and terminate if so
   -------------------------------------------------------------------------- */»
{
  «t:int» «v:result»;
  «t:int» «v:waiting» = 1, «v:nfds»;
  «t:char» «v:c»;

  «t:fd_set» «v:readfds», «v:writefds», *«v:wfds»;
  «k:struct» «t:timespec» «t:timeout», *«t:tmo»;
  «t:NSAutoreleasePool» *«v:pool» = «c:nil»;

  «m:/* »«x:NSTRACE ("fd_handler"); */»

  «k:for» (;;)
    {
      [pool release];
      pool = [[«t:NSAutoreleasePool» alloc] init];

      «k:if» (waiting)
        {
          «t:fd_set» «v:fds»;
          FD_ZERO (&fds);
          FD_SET (selfds[0], &fds);
          result = select (selfds[0]+1, &fds, NULL, NULL, NULL);
          «k:if» (result > 0 && read (selfds[0], &c, 1) == 1 && c == «s:'g'»)
	    waiting = 0;
        }
      «k:else»
        {
          pthread_mutex_lock (&select_mutex);
          nfds = select_nfds;

          «k:if» (select_valid & SELECT_HAVE_READ)
            readfds = select_readfds;
          «k:else»
            FD_ZERO (&readfds);

          «k:if» (select_valid & SELECT_HAVE_WRITE)
            {
              writefds = select_writefds;
              wfds = &writefds;
            }
          «k:else»
            wfds = NULL;
          «k:if» (select_valid & SELECT_HAVE_TMO)
            {
              timeout = select_timeout;
              tmo = &timeout;
            }
          «k:else»
            tmo = NULL;

          pthread_mutex_unlock (&select_mutex);

          FD_SET (selfds[0], &readfds);
          «k:if» (selfds[0] >= nfds) nfds = selfds[0]+1;

          result = pselect (nfds, &readfds, wfds, NULL, tmo, NULL);

          «k:if» (result == 0)
            ns_send_appdefined (-2);
          «k:else» «k:if» (result > 0)
            {
              «k:if» (FD_ISSET (selfds[0], &readfds))
                {
                  «k:if» (read (selfds[0], &c, 1) == 1 && c == «s:'s'»)
		    waiting = 1;
                }
              «k:else»
                {
                  pthread_mutex_lock (&select_mutex);
                  «k:if» (select_valid & SELECT_HAVE_READ)
                    select_readfds = readfds;
                  «k:if» (select_valid & SELECT_HAVE_WRITE)
                    select_writefds = writefds;
                  «k:if» (select_valid & SELECT_HAVE_TMO)
                    select_timeout = timeout;
                  pthread_mutex_unlock (&select_mutex);

                  ns_send_appdefined (result);
                }
            }
          waiting = 1;
        }
    }
}



«m:/* »«x:==========================================================================

    Service provision

   ========================================================================== */»

«m:/* »«x:called from system: queue for next pass through event loop */»
- («t:void»)«f:requestService»: («t:NSPasteboard» *)«v:pboard»
              «f:userData»: («t:NSString» *)«v:userData»
                 «f:error»: («t:NSString» **)«v:error»
{
  [ns_pending_service_names addObject: userData];
  [ns_pending_service_args addObject: [«t:NSString» stringWithUTF8String:
      SSDATA (ns_string_from_pasteboard (pboard))]];
}


«m:/* »«x:called from ns_read_socket to clear queue */»
- («t:BOOL»)«f:fulfillService»: («t:NSString» *)«v:name» «f:withArg»: («t:NSString» *)«v:arg»
{
  «k:struct» «t:frame» *«t:emacsframe» = SELECTED_FRAME ();
  «t:NSEvent» *«v:theEvent» = [«t:NSApp» currentEvent];

  NSTRACE («s:"[EmacsApp fulfillService:withArg:]"»);

  «k:if» («n:!»emacs_event)
    «k:return» «c:NO»;

  emacs_event->kind = NS_NONKEY_EVENT;
  emacs_event->code = KEY_NS_SPI_SERVICE_CALL;
  ns_input_spi_name = build_string ([name UTF8String]);
  ns_input_spi_arg = build_string ([arg UTF8String]);
  emacs_event->modifiers = EV_MODIFIERS (theEvent);
  EV_TRAILER (theEvent);

  «k:return» «c:YES»;
}


«k:@end»  «m:/* »«x:EmacsApp */»



«m:/* »«x:==========================================================================

    EmacsView implementation

   ========================================================================== */»


«k:@implementation» «t:EmacsView»

«m:/* »«x:needed to inform when window closed from LISP */»
- («t:void») «f:setWindowClosing»: («t:BOOL»)«v:closing»
{
  NSTRACE («s:"[EmacsView setWindowClosing:%d]"», closing);

  windowClosing = closing;
}


- («t:void»)«f:dealloc»
{
  NSTRACE («s:"[EmacsView dealloc]"»);
  [toolbar release];
  «k:if» (fs_state == FULLSCREEN_BOTH)
    [nonfs_window release];
  [«k:super» dealloc];
}


«m:/* »«x:called on font panel selection */»
- («t:void»)«f:changeFont»: («t:id»)«v:sender»
{
  «t:NSEvent» *«v:e» = [[«k:self» window] currentEvent];
  «k:struct» «t:face» *«t:face» = FRAME_DEFAULT_FACE (emacsframe);
  «k:struct» «t:font» *«t:font» = face->font;
  «t:id» «v:newFont»;
  «t:CGFloat» «v:size»;
  «t:NSFont» *«v:nsfont»;

  NSTRACE («s:"[EmacsView changeFont:]"»);

  «k:if» («n:!»emacs_event)
    «k:return»;

«p:#ifdef» NS_IMPL_GNUSTEP
  nsfont = ((«k:struct» «t:nsfont_info» *)font)->nsfont;
«p:#endif»
«p:#ifdef» NS_IMPL_COCOA
  nsfont = («t:NSFont» *) macfont_get_nsctfont (font);
«p:#endif»

  «k:if» ((newFont = [sender convertFont: nsfont]))
    {
      SET_FRAME_GARBAGED (emacsframe); «m:/* »«x:now needed as of 2008/10 */»

      emacs_event->kind = NS_NONKEY_EVENT;
      emacs_event->modifiers = 0;
      emacs_event->code = KEY_NS_CHANGE_FONT;

      size = [newFont pointSize];
      ns_input_fontsize = make_number (lrint (size));
      ns_input_font = build_string ([[newFont familyName] UTF8String]);
      EV_TRAILER (e);
    }
}


- («t:BOOL»)«f:acceptsFirstResponder»
{
  NSTRACE («s:"[EmacsView acceptsFirstResponder]"»);
  «k:return» «c:YES»;
}


- («t:void»)«f:resetCursorRects»
{
  «t:NSRect» «v:visible» = [«k:self» visibleRect];
  «t:NSCursor» *«v:currentCursor» = FRAME_POINTER_TYPE (emacsframe);
  NSTRACE («s:"[EmacsView resetCursorRects]"»);

  «k:if» (currentCursor == «c:nil»)
    currentCursor = [«t:NSCursor» arrowCursor];

  «k:if» («n:!»NSIsEmptyRect (visible))
    [«k:self» addCursorRect: visible cursor: currentCursor];
  [currentCursor setOnMouseEntered: «c:YES»];
}



«m:/*****************************************************************************»«x:/»
«m:/* »«x:Keyboard handling. */»
«p:#define» «v:NS_KEYLOG» 0

- («t:void»)«f:keyDown»: («t:NSEvent» *)«v:theEvent»
{
  «t:Mouse_HLInfo» *«v:hlinfo» = MOUSE_HL_INFO (emacsframe);
  «t:int» «v:code»;
  «t:unsigned» «v:fnKeysym» = 0;
  «k:static» «t:NSMutableArray» *«v:nsEvArray»;
  «t:int» «v:left_is_none»;
  «t:unsigned» «t:int» flags = [theEvent modifierFlags];

  NSTRACE («s:"[EmacsView keyDown:]"»);

  «m:/* »«x:Rhapsody and OS X give up and down events for the arrow keys */»
  «k:if» (ns_fake_keydown == «c:YES»)
    ns_fake_keydown = «c:NO»;
  «k:else» «k:if» ([theEvent type] != NSKeyDown)
    «k:return»;

  «k:if» («n:!»emacs_event)
    «k:return»;

 «k:if» («n:!»[[«k:self» window] isKeyWindow]
     && [[theEvent window] isKindOfClass: [«t:EmacsWindow» class]]
     «m:/* »«x:we must avoid an infinite loop here. */»
     && («t:EmacsView» *)[[theEvent window] delegate] != «k:self»)
   {
     «m:/* »«x:XXX: There is an occasional condition in which, when Emacs display
         updates a different frame from the current one, and temporarily
         selects it, then processes some interrupt-driven input
         (dispnew.c:3878), OS will send the event to the correct NSWindow, but
         for some reason that window has its first responder set to the NSView
         most recently updated (I guess), which is not the correct one. */»
     [(«t:EmacsView» *)[[theEvent window] delegate] keyDown: theEvent];
     «k:return»;
   }

  «k:if» (nsEvArray == «c:nil»)
    nsEvArray = [[«t:NSMutableArray» alloc] initWithCapacity: 1];

  [«t:NSCursor» setHiddenUntilMouseMoves: «c:YES»];

  «k:if» (hlinfo->mouse_face_hidden && INTEGERP (Vmouse_highlight))
    {
      clear_mouse_face (hlinfo);
      hlinfo->mouse_face_hidden = 1;
    }

  «k:if» («n:!»processingCompose)
    {
      «m:/* »«x:When using screen sharing, no left or right information is sent,
         so use Left key in those cases.  */»
      «t:int» «v:is_left_key», «v:is_right_key»;

      code = ([[theEvent charactersIgnoringModifiers] length] == 0) ?
        0 : [[theEvent charactersIgnoringModifiers] characterAtIndex: 0];

      «m:/* »«x:(Carbon way: [theEvent keyCode]) */»

      «m:/* »«x:is it a "function key"? */»
      «m:/* »«x:Note: Sometimes a plain key will have the NSNumericPadKeyMask
         flag set (this is probably a bug in the OS).
      */»
      «k:if» (code < 0x00ff && (flags&NSNumericPadKeyMask))
        {
          fnKeysym = ns_convert_key ([theEvent keyCode] | NSNumericPadKeyMask);
        }
      «k:if» (fnKeysym == 0)
        {
          fnKeysym = ns_convert_key (code);
        }

      «k:if» (fnKeysym)
        {
          «m:/* »«x:COUNTERHACK: map 'Delete' on upper-right main KB to 'Backspace',
             because Emacs treats Delete and KP-Delete same (in simple.el). */»
          «k:if» ((fnKeysym == 0xFFFF && [theEvent keyCode] == 0x33)
«p:#ifdef» NS_IMPL_GNUSTEP
              «m:/*  »«x:GNUstep uses incompatible keycodes, even for those that are
                  supposed to be hardware independent.  Just check for delete.
                  Keypad delete does not have keysym 0xFFFF.
                  See http://savannah.gnu.org/bugs/?25395
              */»
              || (fnKeysym == 0xFFFF && code == 127)
«p:#endif»
            )
            code = 0xFF08; «m:/* »«x:backspace */»
          «k:else»
            code = fnKeysym;
        }

      «m:/* »«x:are there modifiers? */»
      emacs_event->modifiers = 0;

      «k:if» (flags & NSHelpKeyMask)
          emacs_event->modifiers |= hyper_modifier;

      «k:if» (flags & NSShiftKeyMask)
        emacs_event->modifiers |= shift_modifier;

      is_right_key = (flags & NSRightCommandKeyMask) == NSRightCommandKeyMask;
      is_left_key = (flags & NSLeftCommandKeyMask) == NSLeftCommandKeyMask
        || («n:!» is_right_key && (flags & NSCommandKeyMask) == NSCommandKeyMask);

      «k:if» (is_right_key)
        emacs_event->modifiers |= parse_solitary_modifier
          (EQ (ns_right_command_modifier, Qleft)
           ? ns_command_modifier
           : ns_right_command_modifier);

      «k:if» (is_left_key)
        {
          emacs_event->modifiers |= parse_solitary_modifier
            (ns_command_modifier);

          «m:/* »«x:if super (default), take input manager's word so things like
             dvorak / qwerty layout work */»
          «k:if» (EQ (ns_command_modifier, Qsuper)
              && «n:!»fnKeysym
              && [[theEvent characters] length] != 0)
            {
              «m:/* »«x:XXX: the code we get will be unshifted, so if we have
                 a shift modifier, must convert ourselves */»
              «k:if» («n:!»(flags & NSShiftKeyMask))
                code = [[theEvent characters] characterAtIndex: 0];
«p:#if» 0
              «m:/* »«x:this is ugly and also requires linking w/Carbon framework
                 (for LMGetKbdType) so for now leave this rare (?) case
                 undealt with.. in future look into CGEvent methods */»
              «k:else»
                {
                  «t:long» «v:smv» = GetScriptManagerVariable (smKeyScript);
                  «t:Handle» «v:uchrHandle» = GetResource
                    («s:'uchr'», GetScriptVariable (smv, smScriptKeys));
                  «t:UInt32» «v:dummy» = 0;
                  UCKeyTranslate ((«v:UCKeyboardLayout»*)*uchrHandle,
                                 [[theEvent characters] characterAtIndex: 0],
                                 kUCKeyActionDisplay,
                                 (flags & ~NSCommandKeyMask) >> 8,
                                 «t:LMGetKbdType» (), kUCKeyTranslateNoDeadKeysMask,
                                 &dummy, 1, &dummy, &code);
                  code &= 0xFF;
                }
«p:#endif»
            }
        }

      is_right_key = (flags & NSRightControlKeyMask) == NSRightControlKeyMask;
      is_left_key = (flags & NSLeftControlKeyMask) == NSLeftControlKeyMask
        || («n:!» is_right_key && (flags & NSControlKeyMask) == NSControlKeyMask);

      «k:if» (is_right_key)
          emacs_event->modifiers |= parse_solitary_modifier
              (EQ (ns_right_control_modifier, Qleft)
               ? ns_control_modifier
               : ns_right_control_modifier);

      «k:if» (is_left_key)
        emacs_event->modifiers |= parse_solitary_modifier
          (ns_control_modifier);

      «k:if» (flags & NS_FUNCTION_KEY_MASK && «n:!»fnKeysym)
          emacs_event->modifiers |=
            parse_solitary_modifier (ns_function_modifier);

      left_is_none = NILP (ns_alternate_modifier)
        || EQ (ns_alternate_modifier, Qnone);

      is_right_key = (flags & NSRightAlternateKeyMask)
        == NSRightAlternateKeyMask;
      is_left_key = (flags & NSLeftAlternateKeyMask) == NSLeftAlternateKeyMask
        || («n:!» is_right_key
            && (flags & NSAlternateKeyMask) == NSAlternateKeyMask);

      «k:if» (is_right_key)
        {
          «k:if» ((NILP (ns_right_alternate_modifier)
               || EQ (ns_right_alternate_modifier, Qnone)
               || (EQ (ns_right_alternate_modifier, Qleft) && left_is_none))
              && «n:!»fnKeysym)
            {   «m:/* »«x:accept pre-interp alt comb */»
              «k:if» ([[theEvent characters] length] > 0)
                code = [[theEvent characters] characterAtIndex: 0];
              «m:/*»«x:HACK: clear lone shift modifier to stop next if from firing */»
              «k:if» (emacs_event->modifiers == shift_modifier)
                emacs_event->modifiers = 0;
            }
          «k:else»
            emacs_event->modifiers |= parse_solitary_modifier
              (EQ (ns_right_alternate_modifier, Qleft)
               ? ns_alternate_modifier
               : ns_right_alternate_modifier);
        }

      «k:if» (is_left_key) «m:/* »«x:default = meta */»
        {
          «k:if» (left_is_none && «n:!»fnKeysym)
            {   «m:/* »«x:accept pre-interp alt comb */»
              «k:if» ([[theEvent characters] length] > 0)
                code = [[theEvent characters] characterAtIndex: 0];
              «m:/*»«x:HACK: clear lone shift modifier to stop next if from firing */»
              «k:if» (emacs_event->modifiers == shift_modifier)
                emacs_event->modifiers = 0;
            }
          «k:else»
              emacs_event->modifiers |=
                parse_solitary_modifier (ns_alternate_modifier);
        }

  «k:if» (NS_KEYLOG)
    fprintf (stderr, «s:"keyDown: code =%x\tfnKey =%x\tflags = %x\tmods = %x\n"»,
             code, fnKeysym, flags, emacs_event->modifiers);

      «m:/* »«x:if it was a function key or had modifiers, pass it directly to emacs */»
      «k:if» (fnKeysym || (emacs_event->modifiers
                       && (emacs_event->modifiers != shift_modifier)
                       && [[theEvent charactersIgnoringModifiers] length] > 0))
«m:/*»«x:[[theEvent characters] length] */»
        {
          emacs_event->kind = NON_ASCII_KEYSTROKE_EVENT;
          «k:if» (code < 0x20)
            code |= (1<<28)|(3<<16);
          «k:else» «k:if» (code == 0x7f)
            code |= (1<<28)|(3<<16);
          «k:else» «k:if» («n:!»fnKeysym)
            emacs_event->kind = code > 0xFF
              ? MULTIBYTE_CHAR_KEYSTROKE_EVENT : ASCII_KEYSTROKE_EVENT;

          emacs_event->code = code;
          EV_TRAILER (theEvent);
          processingCompose = «c:NO»;
          «k:return»;
        }
    }


  «k:if» (NS_KEYLOG && «n:!»processingCompose)
    fprintf (stderr, «s:"keyDown: Begin compose sequence.\n"»);

  processingCompose = «c:YES»;
  [nsEvArray addObject: theEvent];
  [«k:self» interpretKeyEvents: nsEvArray];
  [nsEvArray removeObject: theEvent];
}


«p:#ifdef» NS_IMPL_COCOA
«m:/* »«x:Needed to pick up Ctrl-tab and possibly other events that OS X has
   decided not to send key-down for.
   See http://osdir.com/ml/editors.vim.mac/2007-10/msg00141.html
   This only applies on Tiger and earlier.
   If it matches one of these, send it on to keyDown. */»
-(«t:void»)«f:keyUp»: («t:NSEvent» *)«v:theEvent»
{
  «t:int» «v:flags» = [theEvent modifierFlags];
  «t:int» «v:code» = [theEvent keyCode];

  NSTRACE («s:"[EmacsView keyUp:]"»);

  «k:if» (floor (NSAppKitVersionNumber) <= 824 «m:/*»«x:NSAppKitVersionNumber10_4*/» &&
      code == 0x30 && (flags & NSControlKeyMask) && «n:!»(flags & NSCommandKeyMask))
    {
      «k:if» (NS_KEYLOG)
        fprintf (stderr, «s:"keyUp: passed test"»);
      ns_fake_keydown = «c:YES»;
      [«k:self» keyDown: theEvent];
    }
}
«p:#endif»


«m:/* »«x:<NSTextInput> implementation (called through super interpretKeyEvents:]). */»


«m:/* »«x:<NSTextInput>: called when done composing;
   NOTE: also called when we delete over working text, followed immed.
         by doCommandBySelector: deleteBackward: */»
- («t:void»)«f:insertText»: («t:id»)«v:aString»
{
  «t:int» «v:code»;
  «t:int» «v:len» = [(«t:NSString» *)«t:aString» «v:length»];
  «t:int» «v:i»;

  NSTRACE («s:"[EmacsView insertText:]"»);

  «k:if» (NS_KEYLOG)
    NSLog (@«s:"insertText '%@'\tlen = %d"», aString, len);
  processingCompose = «c:NO»;

  «k:if» («n:!»emacs_event)
    «k:return»;

  «m:/* »«x:first, clear any working text */»
  «k:if» (workingText != «c:nil»)
    [«k:self» deleteWorkingText];

  «m:/* »«x:now insert the string as keystrokes */»
  «k:for» (i =0; i<len; i++)
    {
      code = [aString characterAtIndex: i];
      «m:/* »«x:TODO: still need this? */»
      «k:if» (code == 0x2DC)
        code = «s:'~'»; «m:/* »«x:0x7E */»
      «k:if» (code != 32) «m:/* »«x:Space */»
        emacs_event->modifiers = 0;
      emacs_event->kind
	= code > 0xFF ? MULTIBYTE_CHAR_KEYSTROKE_EVENT : ASCII_KEYSTROKE_EVENT;
      emacs_event->code = code;
      EV_TRAILER ((«t:id»)«c:nil»);
    }
}


«m:/* »«x:<NSTextInput>: inserts display of composing characters */»
- («t:void»)«f:setMarkedText»: («t:id»)«v:aString» «f:selectedRange»: («t:NSRange»)«v:selRange»
{
  «t:NSString» *«v:str» = [aString respondsToSelector: «k:@selector» (string)] ?
    [aString string] : aString;

  NSTRACE («s:"[EmacsView setMarkedText:selectedRange:]"»);

  «k:if» (NS_KEYLOG)
    NSLog (@«s:"setMarkedText '%@' len =%lu range %lu from %lu"»,
           str, («t:unsigned» «t:long»)[str length],
           («t:unsigned» «t:long»)selRange.length,
           («t:unsigned» «t:long»)selRange.location);

  «k:if» (workingText != «c:nil»)
    [«k:self» deleteWorkingText];
  «k:if» ([str length] == 0)
    «k:return»;

  «k:if» («n:!»emacs_event)
    «k:return»;

  processingCompose = «c:YES»;
  workingText = [str copy];
  ns_working_text = build_string ([workingText UTF8String]);

  emacs_event->kind = NS_TEXT_EVENT;
  emacs_event->code = KEY_NS_PUT_WORKING_TEXT;
  EV_TRAILER ((«t:id»)«c:nil»);
}


«m:/* »«x:delete display of composing characters [not in <NSTextInput>] */»
- («t:void»)«f:deleteWorkingText»
{
  NSTRACE («s:"[EmacsView deleteWorkingText]"»);

  «k:if» (workingText == «c:nil»)
    «k:return»;
  «k:if» (NS_KEYLOG)
    NSLog(@«s:"deleteWorkingText len =%lu\n"», («t:unsigned» «t:long»)[workingText length]);
  [workingText release];
  workingText = «c:nil»;
  processingCompose = «c:NO»;

  «k:if» («n:!»emacs_event)
    «k:return»;

  emacs_event->kind = NS_TEXT_EVENT;
  emacs_event->code = KEY_NS_UNPUT_WORKING_TEXT;
  EV_TRAILER ((«t:id»)«c:nil»);
}


- («t:BOOL»)«f:hasMarkedText»
{
  NSTRACE («s:"[EmacsView hasMarkedText]"»);

  «k:return» workingText != «c:nil»;
}


- («t:NSRange»)«f:markedRange»
{
  NSTRACE («s:"[EmacsView markedRange]"»);

  «t:NSRange» «v:rng» = workingText != «c:nil»
    ? NSMakeRange (0, [workingText length]) : NSMakeRange (NSNotFound, 0);
  «k:if» (NS_KEYLOG)
    NSLog (@«s:"markedRange request"»);
  «k:return» rng;
}


- («t:void»)«f:unmarkText»
{
  NSTRACE («s:"[EmacsView unmarkText]"»);

  «k:if» (NS_KEYLOG)
    NSLog (@«s:"unmark (accept) text"»);
  [«k:self» deleteWorkingText];
  processingCompose = «c:NO»;
}


«m:/* »«x:used to position char selection windows, etc. */»
- («t:NSRect»)«f:firstRectForCharacterRange»: («t:NSRange»)«v:theRange»
{
  «t:NSRect» «v:rect»;
  «t:NSPoint» «v:pt»;
  «k:struct» «t:window» *«t:win» = XWINDOW (FRAME_SELECTED_WINDOW (emacsframe));

  NSTRACE («s:"[EmacsView firstRectForCharacterRange:]"»);

  «k:if» (NS_KEYLOG)
    NSLog (@«s:"firstRectForCharRange request"»);

  rect.size.width = theRange.length * FRAME_COLUMN_WIDTH (emacsframe);
  rect.size.height = FRAME_LINE_HEIGHT (emacsframe);
  pt.x = WINDOW_TEXT_TO_FRAME_PIXEL_X (win, win->phys_cursor.x);
  pt.y = WINDOW_TO_FRAME_PIXEL_Y (win, win->phys_cursor.y
                                       +FRAME_LINE_HEIGHT (emacsframe));

  pt = [«k:self» convertPoint: pt toView: «c:nil»];
  pt = [[«k:self» window] convertBaseToScreen: pt];
  rect.origin = pt;
  «k:return» rect;
}


- («t:NSInteger»)«f:conversationIdentifier»
{
  «k:return» («t:NSInteger»)«k:self»;
}


- («t:void»)«f:doCommandBySelector»: («t:SEL»)«v:aSelector»
{
  NSTRACE («s:"[EmacsView doCommandBySelector:]"»);

  «k:if» (NS_KEYLOG)
    NSLog (@«s:"doCommandBySelector: %@"», «t:NSStringFromSelector» («v:aSelector»));

  processingCompose = «c:NO»;
  «k:if» (aSelector == «k:@selector» (deleteBackward:))
    {
      «m:/* »«x:happens when user backspaces over an ongoing composition:
         throw a 'delete' into the event queue */»
      «k:if» («n:!»emacs_event)
        «k:return»;
      emacs_event->kind = NON_ASCII_KEYSTROKE_EVENT;
      emacs_event->code = 0xFF08;
      EV_TRAILER ((«t:id»)«c:nil»);
    }
}

- («t:NSArray» *)«f:validAttributesForMarkedText»
{
  «k:static» «t:NSArray» *«v:arr» = «c:nil»;
  «k:if» (arr == «c:nil») arr = [«t:NSArray» new];
 «m:/* »«x:[[NSArray arrayWithObject: NSUnderlineStyleAttributeName] retain]; */»
  «k:return» arr;
}

- («t:NSRange»)«f:selectedRange»
{
  «k:if» (NS_KEYLOG)
    NSLog (@«s:"selectedRange request"»);
  «k:return» NSMakeRange (NSNotFound, 0);
}

«p:#if» «p:defined» (NS_IMPL_COCOA) || GNUSTEP_GUI_MAJOR_VERSION > 0 || \
    GNUSTEP_GUI_MINOR_VERSION > 22
- («t:NSUInteger»)«f:characterIndexForPoint»: («t:NSPoint»)«v:thePoint»
«p:#else»
- («t:unsigned» «t:int»)characterIndexForPoint: («t:NSPoint»)thePoint
«p:#endif»
{
  «k:if» (NS_KEYLOG)
    NSLog (@«s:"characterIndexForPoint request"»);
  «k:return» 0;
}

- («t:NSAttributedString» *)«f:attributedSubstringFromRange»: («t:NSRange»)«v:theRange»
{
  «k:static» «t:NSAttributedString» *«v:str» = «c:nil»;
  «k:if» (str == «c:nil») str = [«t:NSAttributedString» new];
  «k:if» (NS_KEYLOG)
    NSLog (@«s:"attributedSubstringFromRange request"»);
  «k:return» str;
}

«m:/* »«x:End <NSTextInput> impl. */»
«m:/*****************************************************************************»«x:/»


«m:/* »«x:This is what happens when the user presses a mouse button.  */»
- («t:void»)«f:mouseDown»: («t:NSEvent» *)«v:theEvent»
{
  «k:struct» «t:ns_display_info» *«t:dpyinfo» = FRAME_DISPLAY_INFO (emacsframe);
  «t:NSPoint» «v:p» = [«k:self» convertPoint: [theEvent locationInWindow] fromView: «c:nil»];

  NSTRACE («s:"[EmacsView mouseDown:]"»);

  [«k:self» deleteWorkingText];

  «k:if» («n:!»emacs_event)
    «k:return»;

  dpyinfo->last_mouse_frame = emacsframe;
  «m:/* »«x:appears to be needed to prevent spurious movement events generated on
     button clicks */»
  emacsframe->mouse_moved = 0;

  «k:if» ([theEvent type] == NSScrollWheel)
    {
      «t:CGFloat» «v:delta» = [theEvent deltaY];
      «m:/* »«x:Mac notebooks send wheel events w/delta =0 when trackpad scrolling */»
      «k:if» (delta == 0)
        {
          delta = [theEvent deltaX];
          «k:if» (delta == 0)
            {
              NSTRACE_MSG («s:"deltaIsZero"»);
              «k:return»;
            }
          emacs_event->kind = HORIZ_WHEEL_EVENT;
        }
      «k:else»
        emacs_event->kind = WHEEL_EVENT;

      emacs_event->code = 0;
      emacs_event->modifiers = EV_MODIFIERS (theEvent) |
        ((delta > 0) ? up_modifier : down_modifier);
    }
  «k:else»
    {
      emacs_event->kind = MOUSE_CLICK_EVENT;
      emacs_event->code = EV_BUTTON (theEvent);
      emacs_event->modifiers = EV_MODIFIERS (theEvent)
                             | EV_UDMODIFIERS (theEvent);
    }
  XSETINT (emacs_event->x, lrint (p.x));
  XSETINT (emacs_event->y, lrint (p.y));
  EV_TRAILER (theEvent);
}


- («t:void»)«f:rightMouseDown»: («t:NSEvent» *)«v:theEvent»
{
  NSTRACE («s:"[EmacsView rightMouseDown:]"»);
  [«k:self» mouseDown: theEvent];
}


- («t:void»)«f:otherMouseDown»: («t:NSEvent» *)«v:theEvent»
{
  NSTRACE («s:"[EmacsView otherMouseDown:]"»);
  [«k:self» mouseDown: theEvent];
}


- («t:void»)«f:mouseUp»: («t:NSEvent» *)«v:theEvent»
{
  NSTRACE («s:"[EmacsView mouseUp:]"»);
  [«k:self» mouseDown: theEvent];
}


- («t:void»)«f:rightMouseUp»: («t:NSEvent» *)«v:theEvent»
{
  NSTRACE («s:"[EmacsView rightMouseUp:]"»);
  [«k:self» mouseDown: theEvent];
}


- («t:void»)«f:otherMouseUp»: («t:NSEvent» *)«v:theEvent»
{
  NSTRACE («s:"[EmacsView otherMouseUp:]"»);
  [«k:self» mouseDown: theEvent];
}


- («t:void») «f:scrollWheel»: («t:NSEvent» *)«v:theEvent»
{
  NSTRACE («s:"[EmacsView scrollWheel:]"»);
  [«k:self» mouseDown: theEvent];
}


«m:/* »«x:Tell emacs the mouse has moved. */»
- («t:void»)«f:mouseMoved»: («t:NSEvent» *)«v:e»
{
  «t:Mouse_HLInfo» *«v:hlinfo» = MOUSE_HL_INFO (emacsframe);
  «k:struct» «t:ns_display_info» *«t:dpyinfo» = FRAME_DISPLAY_INFO (emacsframe);
  «t:Lisp_Object» «v:frame»;
  «t:NSPoint» «v:pt»;

  NSTRACE_WHEN (NSTRACE_GROUP_EVENTS, «s:"[EmacsView mouseMoved:]"»);

  dpyinfo->last_mouse_movement_time = EV_TIMESTAMP (e);
  pt = [«k:self» convertPoint: [e locationInWindow] fromView: «c:nil»];
  dpyinfo->last_mouse_motion_x = pt.x;
  dpyinfo->last_mouse_motion_y = pt.y;

  «m:/* »«x:update any mouse face */»
  «k:if» (hlinfo->mouse_face_hidden)
    {
      hlinfo->mouse_face_hidden = 0;
      clear_mouse_face (hlinfo);
    }

  «m:/* »«x:tooltip handling */»
  previous_help_echo_string = help_echo_string;
  help_echo_string = Qnil;

  «k:if» («n:!»NILP (Vmouse_autoselect_window))
    {
      NSTRACE_MSG («s:"mouse_autoselect_window"»);
      «k:static» «t:Lisp_Object» «v:last_mouse_window»;
      «t:Lisp_Object» «v:window»
	= window_from_coordinates (emacsframe, pt.x, pt.y, 0, 0);

      «k:if» (WINDOWP (window)
          && «n:!»EQ (window, last_mouse_window)
          && «n:!»EQ (window, selected_window)
          && (focus_follows_mouse
              || (EQ (XWINDOW (window)->frame,
                      XWINDOW (selected_window)->frame))))
        {
          NSTRACE_MSG («s:"in_window"»);
          emacs_event->kind = SELECT_WINDOW_EVENT;
          emacs_event->frame_or_window = window;
          EV_TRAILER2 (e);
        }
      «m:/* »«x:Remember the last window where we saw the mouse.  */»
      last_mouse_window = window;
    }

  «k:if» («n:!»note_mouse_movement (emacsframe, pt.x, pt.y))
    help_echo_string = previous_help_echo_string;

  XSETFRAME (frame, emacsframe);
  «k:if» («n:!»NILP (help_echo_string) || «n:!»NILP (previous_help_echo_string))
    {
      «m:/* »«x:NOTE: help_echo_{window,pos,object} are set in xdisp.c
         (note_mouse_highlight), which is called through the
         note_mouse_movement () call above */»
      any_help_event_p = «c:YES»;
      gen_help_event (help_echo_string, frame, help_echo_window,
                      help_echo_object, help_echo_pos);
    }

  «k:if» (emacsframe->mouse_moved && send_appdefined)
    ns_send_appdefined (-1);
}


- («t:void»)«f:mouseDragged»: («t:NSEvent» *)«v:e»
{
  NSTRACE («s:"[EmacsView mouseDragged:]"»);
  [«k:self» mouseMoved: e];
}


- («t:void»)«f:rightMouseDragged»: («t:NSEvent» *)«v:e»
{
  NSTRACE («s:"[EmacsView rightMouseDragged:]"»);
  [«k:self» mouseMoved: e];
}


- («t:void»)«f:otherMouseDragged»: («t:NSEvent» *)«v:e»
{
  NSTRACE («s:"[EmacsView otherMouseDragged:]"»);
  [«k:self» mouseMoved: e];
}


- («t:BOOL»)«f:windowShouldClose»: («t:id»)«v:sender»
{
  «t:NSEvent» *«v:e» =[[«k:self» window] currentEvent];

  NSTRACE («s:"[EmacsView windowShouldClose:]"»);
  windowClosing = «c:YES»;
  «k:if» («n:!»emacs_event)
    «k:return» «c:NO»;
  emacs_event->kind = DELETE_WINDOW_EVENT;
  emacs_event->modifiers = 0;
  emacs_event->code = 0;
  EV_TRAILER (e);
  «m:/* »«x:Don't close this window, let this be done from lisp code.  */»
  «k:return» «c:NO»;
}

- («t:void») «f:updateFrameSize»: («t:BOOL») «v:delay»;
{
  «t:NSWindow» *«v:window» = [«k:self» window];
  «t:NSRect» «v:wr» = [window frame];
  «t:int» «v:extra» = 0;
  «t:int» «v:oldc» = cols, «v:oldr» = rows;
  «t:int» «v:oldw» = FRAME_PIXEL_WIDTH (emacsframe);
  «t:int» «v:oldh» = FRAME_PIXEL_HEIGHT (emacsframe);
  «t:int» «v:neww», «v:newh»;

  NSTRACE («s:"[EmacsView updateFrameSize:]"»);
  NSTRACE_SIZE («s:"Original size"», NSMakeSize (oldw, oldh));
  NSTRACE_RECT («s:"Original frame"», wr);
  NSTRACE_MSG  («s:"Original columns: %d"», cols);
  NSTRACE_MSG  («s:"Original rows: %d"», rows);

  «k:if» («n:!» [«k:self» isFullscreen])
    {
«p:#ifdef» NS_IMPL_GNUSTEP
      «m:// »«x:GNUstep does not always update the tool bar height.  Force it.
»      «k:if» (toolbar && [toolbar isVisible])
          update_frame_tool_bar (emacsframe);
«p:#endif»

      extra = FRAME_NS_TITLEBAR_HEIGHT (emacsframe)
        + «f:FRAME_TOOLBAR_HEIGHT» (emacsframe);
    }

  «k:if» (wait_for_tool_bar)
    {
      «k:if» (FRAME_TOOLBAR_HEIGHT (emacsframe) == 0)
        {
          NSTRACE_MSG («s:"Waiting for toolbar"»);
          «k:return»;
        }
      wait_for_tool_bar = «c:NO»;
    }

  neww = («t:int»)wr.size.width - emacsframe->border_width;
  newh = («t:int»)wr.size.height - extra;

  NSTRACE_SIZE («s:"New size"», NSMakeSize (neww, newh));
  NSTRACE_MSG («s:"tool_bar_height: %d"», emacsframe->tool_bar_height);

  cols = FRAME_PIXEL_WIDTH_TO_TEXT_COLS (emacsframe, neww);
  rows = FRAME_PIXEL_HEIGHT_TO_TEXT_LINES (emacsframe, newh);

  «k:if» (cols < MINWIDTH)
    cols = MINWIDTH;

  «k:if» (rows < MINHEIGHT)
    rows = MINHEIGHT;

  NSTRACE_MSG («s:"New columns: %d"», cols);
  NSTRACE_MSG («s:"New rows: %d"», rows);

  «k:if» (oldr != rows || oldc != cols || neww != oldw || newh != oldh)
    {
      «t:NSView» *«v:view» = FRAME_NS_VIEW (emacsframe);
      «t:NSWindow» *«v:win» = [view window];

      change_frame_size (emacsframe,
                         FRAME_PIXEL_TO_TEXT_WIDTH (emacsframe, neww),
                         FRAME_PIXEL_TO_TEXT_HEIGHT (emacsframe, newh),
                         0, delay, 0, 1);
      SET_FRAME_GARBAGED (emacsframe);
      cancel_mouse_face (emacsframe);

      wr = NSMakeRect (0, 0, neww, newh);

      [view setFrame: wr];

      «m:// »«x:to do: consider using [NSNotificationCenter postNotificationName:].
»      [«k:self» windowDidMove: «m:// »«x:Update top/left.
»	      [«t:NSNotification» notificationWithName:NSWindowDidMoveNotification
					    object:[view window]]];
    }
  «k:else»
    {
      NSTRACE_MSG («s:"No change"»);
    }
}

- («t:NSSize»)«f:windowWillResize»: («t:NSWindow» *)«v:sender» «f:toSize»: («t:NSSize»)«v:frameSize»
«m:/* »«x:normalize frame to gridded text size */»
{
  «t:int» «v:extra» = 0;

  NSTRACE («s:"[EmacsView windowWillResize:toSize: "» NSTRACE_FMT_SIZE «s:"]"»,
           NSTRACE_ARG_SIZE (frameSize));
  NSTRACE_RECT   («s:"[sender frame]"», [sender frame]);
  NSTRACE_FSTYPE («s:"fs_state"», fs_state);

  «k:if» (fs_state == FULLSCREEN_MAXIMIZED
      && (maximized_width != («t:int»)frameSize.width
          || maximized_height != («t:int»)frameSize.height))
    [«k:self» setFSValue: FULLSCREEN_NONE];
  «k:else» «k:if» (fs_state == FULLSCREEN_WIDTH
           && maximized_width != («t:int»)frameSize.width)
    [«k:self» setFSValue: FULLSCREEN_NONE];
  «k:else» «k:if» (fs_state == FULLSCREEN_HEIGHT
           && maximized_height != («t:int»)frameSize.height)
    [«k:self» setFSValue: FULLSCREEN_NONE];

  «k:if» (fs_state == FULLSCREEN_NONE)
    maximized_width = maximized_height = -1;

  «k:if» («n:!» [«k:self» isFullscreen])
    {
      extra = FRAME_NS_TITLEBAR_HEIGHT (emacsframe)
        + «f:FRAME_TOOLBAR_HEIGHT» (emacsframe);
    }

  cols = FRAME_PIXEL_WIDTH_TO_TEXT_COLS (emacsframe, frameSize.width);
  «k:if» (cols < MINWIDTH)
    cols = MINWIDTH;

  rows = FRAME_PIXEL_HEIGHT_TO_TEXT_LINES (emacsframe,
                                           frameSize.height - extra);
  «k:if» (rows < MINHEIGHT)
    rows = MINHEIGHT;
«p:#ifdef» NS_IMPL_COCOA
  {
    «m:/* »«x:this sets window title to have size in it; the wm does this under GS */»
    «t:NSRect» «v:r» = [[«k:self» window] frame];
    «k:if» (r.size.height == frameSize.height && r.size.width == frameSize.width)
      {
        «k:if» (old_title != 0)
          {
            xfree (old_title);
            old_title = 0;
          }
      }
    «k:else» «k:if» (fs_state == FULLSCREEN_NONE && «n:!» maximizing_resize)
      {
        «t:char» *«v:size_title»;
        «t:NSWindow» *«v:window» = [«k:self» window];
        «k:if» (old_title == 0)
          {
            «t:char» *«v:t» = strdup ([[[«k:self» window] title] UTF8String]);
            «t:char» *«v:pos» = strstr (t, «s:"  —  "»);
            «k:if» (pos)
              *pos = «s:'\0'»;
            old_title = t;
          }
        size_title = xmalloc (strlen (old_title) + 40);
	esprintf (size_title, «s:"%s  —  (%d x %d)"», old_title, cols, rows);
        [window setTitle: [«t:NSString» stringWithUTF8String: size_title]];
        [window display];
        xfree (size_title);
      }
  }
«p:#endif» «m:/* »«x:NS_IMPL_COCOA */»

  NSTRACE_MSG («s:"cols: %d  rows: %d"», cols, rows);

  «m:/* »«x:Restrict the new size to the text gird.

     Don't restrict the width if the user only adjusted the height, and
     vice versa.  (Without this, the frame would shrink, and move
     slightly, if the window was resized by dragging one of its
     borders.) */»
  «k:if» («n:!»frame_resize_pixelwise)
    {
      «t:NSRect» «v:r» = [[«k:self» window] frame];

      «k:if» (r.size.width != frameSize.width)
        {
          frameSize.width =
            FRAME_TEXT_COLS_TO_PIXEL_WIDTH  (emacsframe, cols);
        }

      «k:if» (r.size.height != frameSize.height)
        {
          frameSize.height =
            FRAME_TEXT_LINES_TO_PIXEL_HEIGHT (emacsframe, rows) + «f:extra»;
        }
    }

  NSTRACE_RETURN_SIZE (frameSize);

  «k:return» frameSize;
}


- («t:void»)«f:windowDidResize»: («t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsView windowDidResize:]"»);
  «k:if» («n:!»FRAME_LIVE_P (emacsframe))
    {
      NSTRACE_MSG («s:"Ignored (frame dead)"»);
      «k:return»;
    }
  «k:if» (emacsframe->output_data.ns->in_animation)
    {
      NSTRACE_MSG («s:"Ignored (in animation)"»);
      «k:return»;
    }

  «k:if» («n:!» [«k:self» fsIsNative])
    {
      «t:NSWindow» *«v:theWindow» = [notification object];
      «m:/* »«x:We can get notification on the non-FS window when in
         fullscreen mode.  */»
      «k:if» ([«k:self» window] != theWindow) «k:return»;
    }

  NSTRACE_RECT («s:"frame"», [[notification object] frame]);

«p:#ifdef» NS_IMPL_GNUSTEP
  «t:NSWindow» *«v:theWindow» = [notification object];

   «m:/* »«x:In GNUstep, at least currently, it's possible to get a didResize
      without getting a willResize.. therefore we need to act as if we got
      the willResize now */»
  «t:NSSize» «v:sz» = [theWindow frame].size;
  sz = [«k:self» windowWillResize: theWindow toSize: sz];
«p:#endif» «m:/* »«x:NS_IMPL_GNUSTEP */»

  «k:if» (cols > 0 && rows > 0)
    {
      [«k:self» updateFrameSize: «c:YES»];
    }

  ns_send_appdefined (-1);
}

«p:#ifdef» NS_IMPL_COCOA
- («t:void»)«f:viewDidEndLiveResize»
{
  NSTRACE («s:"[EmacsView viewDidEndLiveResize]"»);

  [«k:super» viewDidEndLiveResize];
  «k:if» (old_title != 0)
    {
      [[«k:self» window] setTitle: [«t:NSString» stringWithUTF8String: old_title]];
      xfree (old_title);
      old_title = 0;
    }
  maximizing_resize = «c:NO»;
}
«p:#endif» «m:/* »«x:NS_IMPL_COCOA */»


- («t:void»)«f:windowDidBecomeKey»: («t:NSNotification» *)«v:notification»
«m:/* »«x:cf. x_detect_focus_change(), x_focus_changed(), x_new_focus_frame() */»
{
  [«k:self» windowDidBecomeKey];
}


- («t:void»)«f:windowDidBecomeKey»      «m:/* »«x:for direct calls */»
{
  «k:struct» «t:ns_display_info» *«t:dpyinfo» = FRAME_DISPLAY_INFO (emacsframe);
  «k:struct» «t:frame» *«t:old_focus» = dpyinfo->x_focus_frame;

  NSTRACE («s:"[EmacsView windowDidBecomeKey]"»);

  «k:if» (emacsframe != old_focus)
    dpyinfo->x_focus_frame = emacsframe;

  ns_frame_rehighlight (emacsframe);

  «k:if» (emacs_event)
    {
      emacs_event->kind = FOCUS_IN_EVENT;
      EV_TRAILER ((«t:id»)«c:nil»);
    }
}


- («t:void»)«f:windowDidResignKey»: («t:NSNotification» *)«v:notification»
«m:/* »«x:cf. x_detect_focus_change(), x_focus_changed(), x_new_focus_frame() */»
{
  «k:struct» «t:ns_display_info» *«t:dpyinfo» = FRAME_DISPLAY_INFO (emacsframe);
  «t:BOOL» «v:is_focus_frame» = dpyinfo->x_focus_frame == emacsframe;
  NSTRACE («s:"[EmacsView windowDidResignKey:]"»);

  «k:if» (is_focus_frame)
    dpyinfo->x_focus_frame = 0;

  emacsframe->mouse_moved = 0;
  ns_frame_rehighlight (emacsframe);

  «m:/* »«x:FIXME: for some reason needed on second and subsequent clicks away
            from sole-frame Emacs to get hollow box to show */»
  «k:if» («n:!»windowClosing && [[«k:self» window] isVisible] == «c:YES»)
    {
      x_update_cursor (emacsframe, 1);
      x_set_frame_alpha (emacsframe);
    }

  «k:if» (any_help_event_p)
    {
      «t:Lisp_Object» «v:frame»;
      XSETFRAME (frame, emacsframe);
      help_echo_string = Qnil;
      gen_help_event (Qnil, frame, Qnil, Qnil, 0);
    }

  «k:if» (emacs_event && is_focus_frame)
    {
      [«k:self» deleteWorkingText];
      emacs_event->kind = FOCUS_OUT_EVENT;
      EV_TRAILER ((«t:id»)«c:nil»);
    }
}


- («t:void»)«f:windowWillMiniaturize»: «v:sender»
{
  NSTRACE («s:"[EmacsView windowWillMiniaturize:]"»);
}


- («t:void»)«f:setFrame»:(«t:NSRect»)«v:frameRect»;
{
  NSTRACE («s:"[EmacsView setFrame:"» NSTRACE_FMT_RECT «s:"]"»,
           NSTRACE_ARG_RECT (frameRect));

  [«k:super» setFrame:(«t:NSRect»)frameRect];
}


- («t:BOOL»)«f:isFlipped»
{
  «k:return» «c:YES»;
}


- («t:BOOL»)«f:isOpaque»
{
  «k:return» «c:NO»;
}


- «f:initFrameFromEmacs»: («k:struct» «t:frame» *)«v:f»
{
  «t:NSRect» «v:r», «v:wr»;
  «t:Lisp_Object» «v:tem»;
  «t:NSWindow» *«v:win»;
  «t:NSColor» *«v:col»;
  «t:NSString» *«v:name»;

  NSTRACE («s:"[EmacsView initFrameFromEmacs:]"»);
  NSTRACE_MSG («s:"cols:%d lines:%d\n"», f->text_cols, f->text_lines);

  windowClosing = «c:NO»;
  processingCompose = «c:NO»;
  scrollbarsNeedingUpdate = 0;
  fs_state = FULLSCREEN_NONE;
  fs_before_fs = next_maximized = -1;
«p:#ifdef» HAVE_NATIVE_FS
  fs_is_native = ns_use_native_fullscreen;
«p:#else»
  fs_is_native = «c:NO»;
«p:#endif»
  maximized_width = maximized_height = -1;
  nonfs_window = «c:nil»;

  ns_userRect = NSMakeRect (0, 0, 0, 0);
  r = NSMakeRect (0, 0, FRAME_TEXT_COLS_TO_PIXEL_WIDTH (f, f->text_cols),
                 FRAME_TEXT_LINES_TO_PIXEL_HEIGHT (f, f->text_lines));
  [«k:self» initWithFrame: r];
  [«k:self» setAutoresizingMask: NSViewWidthSizable | NSViewHeightSizable];

  FRAME_NS_VIEW (f) = «k:self»;
  emacsframe = f;
«p:#ifdef» NS_IMPL_COCOA
  old_title = 0;
  maximizing_resize = «c:NO»;
«p:#endif»

  win = [[«t:EmacsWindow» alloc]
            initWithContentRect: r
                      styleMask: (NSResizableWindowMask |
«p:#if» MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
                                  NSTitledWindowMask |
«p:#endif»
                                  NSMiniaturizableWindowMask |
                                  NSClosableWindowMask)
                        backing: NSBackingStoreBuffered
                          defer: «c:YES»];

«p:#ifdef» HAVE_NATIVE_FS
    [win setCollectionBehavior:NSWindowCollectionBehaviorFullScreenPrimary];
«p:#endif»

  wr = [win frame];
  bwidth = f->border_width = wr.size.width - r.size.width;
  tibar_height = FRAME_NS_TITLEBAR_HEIGHT (f) = wr.size.height - r.size.height;

  [win setAcceptsMouseMovedEvents: «c:YES»];
  [win setDelegate: «k:self»];
«p:#if» «n:!»«p:defined» (NS_IMPL_COCOA) || \
  MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_9
  [win useOptimizedDrawing: «c:YES»];
«p:#endif»

  [[win contentView] addSubview: «k:self»];

  «k:if» (ns_drag_types)
    [«k:self» registerForDraggedTypes: ns_drag_types];

  tem = f->name;
  name = [«t:NSString» stringWithUTF8String:
                   NILP (tem) ? «s:"Emacs"» : SSDATA (tem)];
  [win setTitle: name];

  «m:/* »«x:toolbar support */»
  toolbar = [[«t:EmacsToolbar» alloc] initForView: «k:self» withIdentifier:
                         [«t:NSString» stringWithFormat: @«s:"Emacs Frame %d"»,
                                   ns_window_num]];
  [win setToolbar: toolbar];
  [toolbar setVisible: «c:NO»];

  «m:/* »«x:Don't set frame garbaged until tool bar is up to date?
     This avoids an extra clear and redraw (flicker) at frame creation.  */»
  «k:if» (FRAME_EXTERNAL_TOOL_BAR (f)) wait_for_tool_bar = «c:YES»;
  «k:else» wait_for_tool_bar = «c:NO»;


«p:#ifdef» NS_IMPL_COCOA
  {
    «t:NSButton» *«v:toggleButton»;
  toggleButton = [win standardWindowButton: NSWindowToolbarButton];
  [toggleButton setTarget: «k:self»];
  [«t:toggleButton» setAction: «k:@selector» (toggleToolbar: )];
  }
«p:#endif»
  FRAME_TOOLBAR_HEIGHT (f) = 0;

  tem = f->icon_name;
  «k:if» («n:!»NILP (tem))
    [win setMiniwindowTitle:
           [«t:NSString» stringWithUTF8String: SSDATA (tem)]];

  {
    «t:NSScreen» *«v:screen» = [win screen];

    «k:if» (screen != 0)
      {
        «t:NSPoint» «v:pt» = NSMakePoint
          (IN_BOUND (-«f:SCREENMAX», f->left_pos, SCREENMAX),
           IN_BOUND (-«f:SCREENMAX»,
                     [screen frame].size.height - NS_TOP_POS (f), SCREENMAX));

        [win setFrameTopLeftPoint: pt];

        NSTRACE_RECT («s:"new frame"», [win frame]);
      }
  }

  [win makeFirstResponder: «k:self»];

  col = ns_lookup_indexed_color (NS_FACE_BACKGROUND
                                  (FRAME_DEFAULT_FACE (emacsframe)), emacsframe);
  [win setBackgroundColor: col];
  «k:if» ([col alphaComponent] != («t:EmacsCGFloat») 1.0)
    [win setOpaque: «c:NO»];

«p:#if» «n:!»«p:defined» (NS_IMPL_COCOA) || \
  MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_9
  [«k:self» allocateGState];
«p:#endif»
  [«t:NSApp» registerServicesMenuSendTypes: ns_send_types
                           returnTypes: «c:nil»];

  ns_window_num++;
  «k:return» «k:self»;
}


- («t:void»)«f:windowDidMove»: «v:sender»
{
  «t:NSWindow» *«v:win» = [«k:self» window];
  «t:NSRect» «v:r» = [win frame];
  «t:NSArray» *«v:screens» = [«t:NSScreen» screens];
  «t:NSScreen» *«v:screen» = [screens objectAtIndex: 0];

  NSTRACE («s:"[EmacsView windowDidMove:]"»);

  «k:if» («n:!»emacsframe->output_data.ns)
    «k:return»;
  «k:if» (screen != «c:nil»)
    {
      emacsframe->left_pos = r.origin.x;
      emacsframe->top_pos =
        [screen frame].size.height - (r.origin.y + r.size.height);
    }
}


«m:/* »«x:Called AFTER method below, but before our windowWillResize call there leads
   to windowDidResize -> x_set_window_size.  Update emacs' notion of frame
   location so set_window_size moves the frame. */»
- («t:BOOL»)«f:windowShouldZoom»: («t:NSWindow» *)«v:sender» «f:toFrame»: («t:NSRect»)«v:newFrame»
{
  NSTRACE ((«s:"[EmacsView windowShouldZoom:toFrame:"» NSTRACE_FMT_RECT «s:"]"»
            NSTRACE_FMT_RETURN «s:"YES"»),
           NSTRACE_ARG_RECT (newFrame));

  emacsframe->output_data.ns->zooming = 1;
  «k:return» «c:YES»;
}


«m:/* »«x:Override to do something slightly nonstandard, but nice.  First click on
   zoom button will zoom vertically.  Second will zoom completely.  Third
   returns to original. */»
- («t:NSRect»)«f:windowWillUseStandardFrame»:(«t:NSWindow» *)«v:sender»
                        «f:defaultFrame»:(«t:NSRect»)«v:defaultFrame»
{
  «m:// »«x:TODO: Rename to "currentFrame" and assign "result" properly in
»  «m:// »«x:all paths.
»  «t:NSRect» «v:result» = [sender frame];

  NSTRACE ((«s:"[EmacsView windowWillUseStandardFrame:defaultFrame:"»
            NSTRACE_FMT_RECT «s:"]"»),
           NSTRACE_ARG_RECT (defaultFrame));
  NSTRACE_FSTYPE («s:"fs_state"», fs_state);
  NSTRACE_FSTYPE («s:"fs_before_fs"», fs_before_fs);
  NSTRACE_FSTYPE («s:"next_maximized"», next_maximized);
  NSTRACE_RECT   («s:"ns_userRect"», ns_userRect);
  NSTRACE_RECT   («s:"[sender frame]"», [sender frame]);

  «k:if» (fs_before_fs != -1) «m:/* »«x:Entering fullscreen */»
    {
      NSTRACE_MSG («s:"Entering fullscreen"»);
      result = defaultFrame;
    }
  «k:else»
    {
      «m:// »«x:Save the window size and position (frame) before the resize.
»      «k:if» (fs_state != FULLSCREEN_MAXIMIZED
          && fs_state != FULLSCREEN_WIDTH)
        {
          ns_userRect.size.width = result.size.width;
          ns_userRect.origin.x   = result.origin.x;
        }

      «k:if» (fs_state != FULLSCREEN_MAXIMIZED
          && fs_state != FULLSCREEN_HEIGHT)
        {
          ns_userRect.size.height = result.size.height;
          ns_userRect.origin.y    = result.origin.y;
        }

      NSTRACE_RECT («s:"ns_userRect (2)"», ns_userRect);

      «k:if» (next_maximized == FULLSCREEN_HEIGHT
          || (next_maximized == -1
              && abs ((«t:int»)(defaultFrame.size.height - result.size.height))
              > FRAME_LINE_HEIGHT (emacsframe)))
        {
          «m:/* »«x:first click */»
          NSTRACE_MSG («s:"FULLSCREEN_HEIGHT"»);
          maximized_height = result.size.height = defaultFrame.size.height;
          maximized_width = -1;
          result.origin.y = defaultFrame.origin.y;
          «k:if» (ns_userRect.size.height != 0)
            {
              result.origin.x = ns_userRect.origin.x;
              result.size.width = ns_userRect.size.width;
            }
          [«k:self» setFSValue: FULLSCREEN_HEIGHT];
«p:#ifdef» NS_IMPL_COCOA
          maximizing_resize = «c:YES»;
«p:#endif»
        }
      «k:else» «k:if» (next_maximized == FULLSCREEN_WIDTH)
        {
          NSTRACE_MSG («s:"FULLSCREEN_WIDTH"»);
          maximized_width = result.size.width = defaultFrame.size.width;
          maximized_height = -1;
          result.origin.x = defaultFrame.origin.x;
          «k:if» (ns_userRect.size.width != 0)
            {
              result.origin.y = ns_userRect.origin.y;
              result.size.height = ns_userRect.size.height;
            }
          [«k:self» setFSValue: FULLSCREEN_WIDTH];
        }
      «k:else» «k:if» (next_maximized == FULLSCREEN_MAXIMIZED
               || (next_maximized == -1
                   && abs ((«t:int»)(defaultFrame.size.width - result.size.width))
                   > FRAME_COLUMN_WIDTH (emacsframe)))
        {
          NSTRACE_MSG («s:"FULLSCREEN_MAXIMIZED"»);

          result = defaultFrame;  «m:/* »«x:second click */»
          maximized_width = result.size.width;
          maximized_height = result.size.height;
          [«k:self» setFSValue: FULLSCREEN_MAXIMIZED];
«p:#ifdef» NS_IMPL_COCOA
          maximizing_resize = «c:YES»;
«p:#endif»
        }
      «k:else»
        {
          «m:/* »«x:restore */»
          NSTRACE_MSG («s:"Restore"»);
          result = ns_userRect.size.height ? ns_userRect : result;
          NSTRACE_RECT («s:"restore (2)"», result);
          ns_userRect = NSMakeRect (0, 0, 0, 0);
«p:#ifdef» NS_IMPL_COCOA
          maximizing_resize = fs_state != FULLSCREEN_NONE;
«p:#endif»
          [«k:self» setFSValue: FULLSCREEN_NONE];
          maximized_width = maximized_height = -1;
        }
    }

  «k:if» (fs_before_fs == -1) next_maximized = -1;

  NSTRACE_RECT   («s:"Final ns_userRect"», ns_userRect);
  NSTRACE_MSG    («s:"Final maximized_width: %d"», maximized_width);
  NSTRACE_MSG    («s:"Final maximized_height: %d"», maximized_height);
  NSTRACE_FSTYPE («s:"Final next_maximized"», next_maximized);

  [«k:self» windowWillResize: sender toSize: result.size];

  NSTRACE_RETURN_RECT (result);

  «k:return» result;
}


- («t:void»)«f:windowDidDeminiaturize»: «v:sender»
{
  NSTRACE («s:"[EmacsView windowDidDeminiaturize:]"»);
  «k:if» («n:!»emacsframe->output_data.ns)
    «k:return»;

  SET_FRAME_ICONIFIED (emacsframe, 0);
  SET_FRAME_VISIBLE (emacsframe, 1);
  windows_or_buffers_changed = 63;

  «k:if» (emacs_event)
    {
      emacs_event->kind = DEICONIFY_EVENT;
      EV_TRAILER ((«t:id»)«c:nil»);
    }
}


- («t:void»)«f:windowDidExpose»: «v:sender»
{
  NSTRACE («s:"[EmacsView windowDidExpose:]"»);
  «k:if» («n:!»emacsframe->output_data.ns)
    «k:return»;

  SET_FRAME_VISIBLE (emacsframe, 1);
  SET_FRAME_GARBAGED (emacsframe);

  «k:if» (send_appdefined)
    ns_send_appdefined (-1);
}


- («t:void»)«f:windowDidMiniaturize»: «v:sender»
{
  NSTRACE («s:"[EmacsView windowDidMiniaturize:]"»);
  «k:if» («n:!»emacsframe->output_data.ns)
    «k:return»;

  SET_FRAME_ICONIFIED (emacsframe, 1);
  SET_FRAME_VISIBLE (emacsframe, 0);

  «k:if» (emacs_event)
    {
      emacs_event->kind = ICONIFY_EVENT;
      EV_TRAILER ((«t:id»)«c:nil»);
    }
}

«p:#ifdef» HAVE_NATIVE_FS
- («t:NSApplicationPresentationOptions»)«f:window»:(«t:NSWindow» *)«v:window»
      «f:willUseFullScreenPresentationOptions»:
  («t:NSApplicationPresentationOptions»)«v:proposedOptions»
{
  «k:return» proposedOptions|NSApplicationPresentationAutoHideToolbar;
}
«p:#endif»

- («t:void»)«f:windowWillEnterFullScreen»:(«t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsView windowWillEnterFullScreen:]"»);
  [«k:self» windowWillEnterFullScreen];
}
- («t:void»)«f:windowWillEnterFullScreen» «m:/* »«x:provided for direct calls */»
{
  NSTRACE («s:"[EmacsView windowWillEnterFullScreen]"»);
  fs_before_fs = fs_state;
}

- («t:void»)«f:windowDidEnterFullScreen»:(«t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsView windowDidEnterFullScreen:]"»);
  [«k:self» windowDidEnterFullScreen];
}

- («t:void»)«f:windowDidEnterFullScreen» «m:/* »«x:provided for direct calls */»
{
  NSTRACE («s:"[EmacsView windowDidEnterFullScreen]"»);
  [«k:self» setFSValue: FULLSCREEN_BOTH];
  «k:if» («n:!» [«k:self» fsIsNative])
    {
      [«k:self» windowDidBecomeKey];
      [nonfs_window orderOut:«k:self»];
    }
  «k:else»
    {
      «t:BOOL» «v:tbar_visible» = FRAME_EXTERNAL_TOOL_BAR (emacsframe) ? «c:YES» : «c:NO»;
«p:#ifdef» NS_IMPL_COCOA
«p:#if» MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
      «t:unsigned» «v:val» = («t:unsigned»)[«t:NSApp» presentationOptions];

      «m:// »«x:OSX 10.7 bug fix, the menu won't appear without this.
»      «m:// »«x:val is non-zero on other OSX versions.
»      «k:if» (val == 0)
        {
          «t:NSApplicationPresentationOptions» «v:options»
            = NSApplicationPresentationAutoHideDock
            | NSApplicationPresentationAutoHideMenuBar
            | NSApplicationPresentationFullScreen
            | NSApplicationPresentationAutoHideToolbar;

          [«t:NSApp» setPresentationOptions: options];
        }
«p:#endif»
«p:#endif»
      [toolbar setVisible:tbar_visible];
    }
}

- («t:void»)«f:windowWillExitFullScreen»:(«t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsView windowWillExitFullScreen:]"»);
  [«k:self» windowWillExitFullScreen];
}

- («t:void»)«f:windowWillExitFullScreen» «m:/* »«x:provided for direct calls */»
{
  NSTRACE («s:"[EmacsView windowWillExitFullScreen]"»);
  «k:if» («n:!»FRAME_LIVE_P (emacsframe))
    {
      NSTRACE_MSG («s:"Ignored (frame dead)"»);
      «k:return»;
    }
  «k:if» (next_maximized != -1)
    fs_before_fs = next_maximized;
}

- («t:void»)«f:windowDidExitFullScreen»:(«t:NSNotification» *)«v:notification»
{
  NSTRACE («s:"[EmacsView windowDidExitFullScreen:]"»);
  [«k:self» windowDidExitFullScreen];
}

- («t:void»)«f:windowDidExitFullScreen» «m:/* »«x:provided for direct calls */»
{
  NSTRACE («s:"[EamcsView windowDidExitFullScreen]"»);
  «k:if» («n:!»FRAME_LIVE_P (emacsframe))
    {
      NSTRACE_MSG («s:"Ignored (frame dead)"»);
      «k:return»;
    }
  [«k:self» setFSValue: fs_before_fs];
  fs_before_fs = -1;
«p:#ifdef» HAVE_NATIVE_FS
  [«k:self» updateCollectionBehavior];
«p:#endif»
  «k:if» (FRAME_EXTERNAL_TOOL_BAR (emacsframe))
    {
      [toolbar setVisible:«c:YES»];
      update_frame_tool_bar (emacsframe);
      [«k:self» updateFrameSize:«c:YES»];
      [[«k:self» window] display];
    }
  «k:else»
    [toolbar setVisible:«c:NO»];

  «k:if» (next_maximized != -1)
    [[«k:self» window] performZoom:«k:self»];
}

- («t:BOOL»)«f:fsIsNative»
{
  «k:return» fs_is_native;
}

- («t:BOOL»)«f:isFullscreen»
{
  NSTRACE («s:"[EmacsView isFullscreen]"»);

  «k:if» («n:!» fs_is_native) «k:return» nonfs_window != «c:nil»;
«p:#ifdef» HAVE_NATIVE_FS
  «k:return» ([[«k:self» window] styleMask] & NSFullScreenWindowMask) != 0;
«p:#else»
  «k:return» «c:NO»;
«p:#endif»
}

«p:#ifdef» HAVE_NATIVE_FS
- («t:void»)«f:updateCollectionBehavior»
{
  NSTRACE («s:"[EmacsView updateCollectionBehavior]"»);

  «k:if» («n:!» [«k:self» isFullscreen])
    {
      «t:NSWindow» *«v:win» = [«k:self» window];
      «t:NSWindowCollectionBehavior» «v:b» = [win collectionBehavior];
      «k:if» (ns_use_native_fullscreen)
        b |= NSWindowCollectionBehaviorFullScreenPrimary;
      «k:else»
        b &= ~NSWindowCollectionBehaviorFullScreenPrimary;

      [win setCollectionBehavior: b];
      fs_is_native = ns_use_native_fullscreen;
    }
}
«p:#endif»

- («t:void»)«f:toggleFullScreen»: («t:id»)«v:sender»
{
  «t:NSWindow» *«v:w», *«v:fw»;
  «t:BOOL» «v:onFirstScreen»;
  «k:struct» «t:frame» *«t:f»;
  «t:NSRect» «v:r», «v:wr»;
  «t:NSColor» *«v:col»;

  NSTRACE («s:"[EmacsView toggleFullScreen:]"»);

  «k:if» (fs_is_native)
    {
«p:#ifdef» HAVE_NATIVE_FS
      [[«k:self» window] toggleFullScreen:sender];
«p:#endif»
      «k:return»;
    }

  w = [«k:self» window];
  onFirstScreen = [[w screen] isEqual:[[«t:NSScreen» screens] objectAtIndex:0]];
  f = emacsframe;
  wr = [w frame];
  col = ns_lookup_indexed_color (NS_FACE_BACKGROUND
                                 (FRAME_DEFAULT_FACE (f)),
                                 f);

  «k:if» (fs_state != FULLSCREEN_BOTH)
    {
      «t:NSScreen» *«v:screen» = [w screen];

«p:#if» «p:defined» (NS_IMPL_COCOA) && \
  MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_9
      «m:/* »«x:Hide ghost menu bar on secondary monitor? */»
      «k:if» («n:!» onFirstScreen)
        onFirstScreen = [«t:NSScreen» screensHaveSeparateSpaces];
«p:#endif»
      «m:/* »«x:Hide dock and menubar if we are on the primary screen.  */»
      «k:if» (onFirstScreen)
        {
«p:#ifdef» NS_IMPL_COCOA
          «t:NSApplicationPresentationOptions» «v:options»
            = NSApplicationPresentationAutoHideDock
            | NSApplicationPresentationAutoHideMenuBar;

          [«t:NSApp» setPresentationOptions: options];
«p:#else»
          [«t:NSMenu» setMenuBarVisible:«c:NO»];
«p:#endif»
        }

      fw = [[«t:EmacsFSWindow» alloc]
                       initWithContentRect:[w contentRectForFrameRect:wr]
                                 styleMask:NSBorderlessWindowMask
                                   backing:NSBackingStoreBuffered
                                     defer:«c:YES»
                                    screen:screen];

      [fw setContentView:[w contentView]];
      [fw setTitle:[w title]];
      [fw setDelegate:«k:self»];
      [fw setAcceptsMouseMovedEvents: «c:YES»];
«p:#if» «n:!»«p:defined» (NS_IMPL_COCOA) || \
  MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_9
      [fw useOptimizedDrawing: «c:YES»];
«p:#endif»
      [fw setBackgroundColor: col];
      «k:if» ([col alphaComponent] != («t:EmacsCGFloat») 1.0)
        [fw setOpaque: «c:NO»];

      f->border_width = 0;
      FRAME_NS_TITLEBAR_HEIGHT (f) = 0;
      tobar_height = FRAME_TOOLBAR_HEIGHT (f);
      FRAME_TOOLBAR_HEIGHT (f) = 0;

      nonfs_window = w;

      [«k:self» windowWillEnterFullScreen];
      [fw makeKeyAndOrderFront:NSApp];
      [fw makeFirstResponder:«k:self»];
      [w orderOut:«k:self»];
      r = [fw frameRectForContentRect:[screen frame]];
      [fw setFrame: r display:«c:YES» animate:ns_use_fullscreen_animation];
      [«k:self» windowDidEnterFullScreen];
      [fw display];
    }
  «k:else»
    {
      fw = w;
      w = nonfs_window;
      nonfs_window = «c:nil»;

      «k:if» (onFirstScreen)
        {
«p:#ifdef» NS_IMPL_COCOA
          [«t:NSApp» setPresentationOptions: NSApplicationPresentationDefault];
«p:#else»
          [«t:NSMenu» setMenuBarVisible:«c:YES»];
«p:#endif»
        }

      [w setContentView:[fw contentView]];
      [w setBackgroundColor: col];
      «k:if» ([col alphaComponent] != («t:EmacsCGFloat») 1.0)
        [w setOpaque: «c:NO»];

      f->border_width = bwidth;
      FRAME_NS_TITLEBAR_HEIGHT (f) = tibar_height;
      «k:if» (FRAME_EXTERNAL_TOOL_BAR (f))
        FRAME_TOOLBAR_HEIGHT (f) = tobar_height;

      «m:// »«x:to do: consider using [NSNotificationCenter postNotificationName:] to send notifications.
»
      [«k:self» windowWillExitFullScreen];
      [fw setFrame: [w frame] display:«c:YES» animate:ns_use_fullscreen_animation];
      [fw close];
      [w makeKeyAndOrderFront:NSApp];
      [«k:self» windowDidExitFullScreen];
      [«k:self» updateFrameSize:«c:YES»];
    }
}

- («t:void»)«f:handleFS»
{
  NSTRACE («s:"[EmacsView handleFS]"»);

  «k:if» (fs_state != emacsframe->want_fullscreen)
    {
      «k:if» (fs_state == FULLSCREEN_BOTH)
        {
          NSTRACE_MSG («s:"fs_state == FULLSCREEN_BOTH"»);
          [«k:self» toggleFullScreen:«k:self»];
        }

      «k:switch» (emacsframe->want_fullscreen)
        {
        «k:case» FULLSCREEN_BOTH:
          NSTRACE_MSG («s:"FULLSCREEN_BOTH"»);
          [«k:self» toggleFullScreen:«k:self»];
          «k:break»;
        «k:case» FULLSCREEN_WIDTH:
          NSTRACE_MSG («s:"FULLSCREEN_WIDTH"»);
          next_maximized = FULLSCREEN_WIDTH;
          «k:if» (fs_state != FULLSCREEN_BOTH)
            [[«k:self» window] performZoom:«k:self»];
          «k:break»;
        «k:case» FULLSCREEN_HEIGHT:
          NSTRACE_MSG («s:"FULLSCREEN_HEIGHT"»);
          next_maximized = FULLSCREEN_HEIGHT;
          «k:if» (fs_state != FULLSCREEN_BOTH)
            [[«k:self» window] performZoom:«k:self»];
          «k:break»;
        «k:case» FULLSCREEN_MAXIMIZED:
          NSTRACE_MSG («s:"FULLSCREEN_MAXIMIZED"»);
          next_maximized = FULLSCREEN_MAXIMIZED;
          «k:if» (fs_state != FULLSCREEN_BOTH)
            [[«k:self» window] performZoom:«k:self»];
          «k:break»;
        «k:case» FULLSCREEN_NONE:
          NSTRACE_MSG («s:"FULLSCREEN_NONE"»);
          «k:if» (fs_state != FULLSCREEN_BOTH)
            {
              next_maximized = FULLSCREEN_NONE;
              [[«k:self» window] performZoom:«k:self»];
            }
          «k:break»;
        }

      emacsframe->want_fullscreen = FULLSCREEN_NONE;
    }

}

- («t:void») «f:setFSValue»: («t:int»)«v:value»
{
  NSTRACE («s:"[EmacsView setFSValue:"» NSTRACE_FMT_FSTYPE «s:"]"»,
           NSTRACE_ARG_FSTYPE(value));

  «t:Lisp_Object» «v:lval» = Qnil;
  «k:switch» (value)
    {
    «k:case» FULLSCREEN_BOTH:
      lval = Qfullboth;
      «k:break»;
    «k:case» FULLSCREEN_WIDTH:
      lval = Qfullwidth;
      «k:break»;
    «k:case» FULLSCREEN_HEIGHT:
      lval = Qfullheight;
      «k:break»;
    «k:case» FULLSCREEN_MAXIMIZED:
      lval = Qmaximized;
      «k:break»;
    }
  store_frame_param (emacsframe, Qfullscreen, lval);
  fs_state = value;
}

- («t:void»)«f:mouseEntered»: («t:NSEvent» *)«v:theEvent»
{
  NSTRACE («s:"[EmacsView mouseEntered:]"»);
  «k:if» (emacsframe)
    FRAME_DISPLAY_INFO (emacsframe)->last_mouse_movement_time
      = EV_TIMESTAMP (theEvent);
}


- («t:void»)«f:mouseExited»: («t:NSEvent» *)«v:theEvent»
{
  «t:Mouse_HLInfo» *«v:hlinfo» = emacsframe ? MOUSE_HL_INFO (emacsframe) : NULL;

  NSTRACE («s:"[EmacsView mouseExited:]"»);

  «k:if» («n:!»hlinfo)
    «k:return»;

  FRAME_DISPLAY_INFO (emacsframe)->last_mouse_movement_time
    = EV_TIMESTAMP (theEvent);

  «k:if» (emacsframe == hlinfo->mouse_face_mouse_frame)
    {
      clear_mouse_face (hlinfo);
      hlinfo->mouse_face_mouse_frame = 0;
    }
}


- «f:menuDown»: «v:sender»
{
  NSTRACE («s:"[EmacsView menuDown:]"»);
  «k:if» (context_menu_value == -1)
    context_menu_value = [sender tag];
  «k:else»
    {
      «t:NSInteger» «v:tag» = [sender tag];
      find_and_call_menu_selection (emacsframe, emacsframe->menu_bar_items_used,
                                    emacsframe->menu_bar_vector,
                                    («t:void» *)tag);
    }

  ns_send_appdefined (-1);
  «k:return» «k:self»;
}


- («t:EmacsToolbar» *)«f:toolbar»
{
  «k:return» toolbar;
}


«m:/* »«x:this gets called on toolbar button click */»
- «f:toolbarClicked»: («t:id»)«v:item»
{
  «t:NSEvent» *«v:theEvent»;
  «t:int» «v:idx» = [item tag] * TOOL_BAR_ITEM_NSLOTS;

  NSTRACE («s:"[EmacsView toolbarClicked:]"»);

  «k:if» («n:!»emacs_event)
    «k:return» «k:self»;

  «m:/* »«x:send first event (for some reason two needed) */»
  theEvent = [[«k:self» window] currentEvent];
  emacs_event->kind = TOOL_BAR_EVENT;
  XSETFRAME (emacs_event->arg, emacsframe);
  EV_TRAILER (theEvent);

  emacs_event->kind = TOOL_BAR_EVENT;
«m:/*   »«x:XSETINT (emacs_event->code, 0); */»
  emacs_event->arg = AREF (emacsframe->tool_bar_items,
			   idx + TOOL_BAR_ITEM_KEY);
  emacs_event->modifiers = EV_MODIFIERS (theEvent);
  EV_TRAILER (theEvent);
  «k:return» «k:self»;
}


- «f:toggleToolbar»: («t:id»)«v:sender»
{
  NSTRACE («s:"[EmacsView toggleToolbar:]"»);

  «k:if» («n:!»emacs_event)
    «k:return» «k:self»;

  emacs_event->kind = NS_NONKEY_EVENT;
  emacs_event->code = KEY_NS_TOGGLE_TOOLBAR;
  EV_TRAILER ((«t:id»)«c:nil»);
  «k:return» «k:self»;
}


- («t:void»)«f:drawRect»: («t:NSRect»)«v:rect»
{
  «t:int» «v:x» = NSMinX (rect), «v:y» = NSMinY (rect);
  «t:int» «v:width» = NSWidth (rect), «v:height» = NSHeight (rect);

  NSTRACE («s:"[EmacsView drawRect:"» NSTRACE_FMT_RECT «s:"]"»,
           NSTRACE_ARG_RECT(rect));

  «k:if» («n:!»emacsframe || «n:!»emacsframe->output_data.ns)
    «k:return»;

  ns_clear_frame_area (emacsframe, x, y, width, height);
  block_input ();
  expose_frame (emacsframe, x, y, width, height);
  unblock_input ();

  «m:/*»«x:
    drawRect: may be called (at least in OS X 10.5) for invisible
    views as well for some reason.  Thus, do not infer visibility
    here.

    emacsframe->async_visible = 1;
    emacsframe->async_iconified = 0;
  */»
}


«m:/* »«x:NSDraggingDestination protocol methods.  Actually this is not really a
   protocol, but a category of Object.  O well...  */»

-(«t:NSDragOperation») «f:draggingEntered»: («t:id» <«t:NSDraggingInfo»>) «v:sender»
{
  NSTRACE («s:"[EmacsView draggingEntered:]"»);
  «k:return» NSDragOperationGeneric;
}


-(«t:BOOL»)«f:prepareForDragOperation»: («t:id» <«t:NSDraggingInfo»>) «v:sender»
{
  «k:return» «c:YES»;
}


-(«t:BOOL»)«f:performDragOperation»: («t:id» <«t:NSDraggingInfo»>) «v:sender»
{
  «t:id» «v:pb»;
  «t:int» «v:x», «v:y»;
  «t:NSString» *«v:type»;
  «t:NSEvent» *«v:theEvent» = [[«k:self» window] currentEvent];
  «t:NSPoint» «v:position»;
  «t:NSDragOperation» «v:op» = [sender draggingSourceOperationMask];
  «t:int» «v:modifiers» = 0;

  NSTRACE («s:"[EmacsView performDragOperation:]"»);

  «k:if» («n:!»emacs_event)
    «k:return» «c:NO»;

  position = [«k:self» convertPoint: [sender draggingLocation] fromView: «c:nil»];
  x = lrint (position.x);  y = lrint (position.y);

  pb = [sender draggingPasteboard];
  type = [pb availableTypeFromArray: ns_drag_types];

  «k:if» («n:!» (op & (NSDragOperationMove|NSDragOperationDelete)) &&
      «m:// »«x:URL drags contain all operations (0xf), don't allow all to be set.
»      (op & 0xf) != 0xf)
    {
      «k:if» (op & NSDragOperationLink)
        modifiers |= NSControlKeyMask;
      «k:if» (op & NSDragOperationCopy)
        modifiers |= NSAlternateKeyMask;
      «k:if» (op & NSDragOperationGeneric)
        modifiers |= NSCommandKeyMask;
    }

  modifiers = EV_MODIFIERS2 (modifiers);
  «k:if» (type == 0)
    {
      «k:return» «c:NO»;
    }
  «k:else» «k:if» ([type isEqualToString: NSFilenamesPboardType])
    {
      «t:NSArray» *«v:files»;
      «t:NSEnumerator» *«v:fenum»;
      «t:NSString» *«v:file»;

      «k:if» («n:!»(files = [pb propertyListForType: type]))
        «k:return» «c:NO»;

      fenum = [files objectEnumerator];
      «k:while» ( (file = [fenum nextObject]) )
        {
          emacs_event->kind = DRAG_N_DROP_EVENT;
          XSETINT (emacs_event->x, x);
          XSETINT (emacs_event->y, y);
          ns_input_file = append2 (ns_input_file,
                                   build_string ([file UTF8String]));
          emacs_event->modifiers = modifiers;
          emacs_event->arg =  list2 (Qfile, build_string ([file UTF8String]));
          EV_TRAILER (theEvent);
        }
      «k:return» «c:YES»;
    }
  «k:else» «k:if» ([type isEqualToString: NSURLPboardType])
    {
      «t:NSURL» *«v:url» = [NSURL URLFromPasteboard: pb];
      «k:if» (url == «c:nil») «k:return» «c:NO»;

      emacs_event->kind = DRAG_N_DROP_EVENT;
      XSETINT (emacs_event->x, x);
      XSETINT (emacs_event->y, y);
      emacs_event->modifiers = modifiers;
      emacs_event->arg =  list2 (Qurl,
                                 build_string ([[url absoluteString]
                                                 UTF8String]));
      EV_TRAILER (theEvent);

      «k:if» ([url isFileURL] != «c:NO»)
        {
          «t:NSString» *«v:file» = [url path];
          ns_input_file = append2 (ns_input_file,
                                   build_string ([file UTF8String]));
        }
      «k:return» «c:YES»;
    }
  «k:else» «k:if» ([type isEqualToString: NSStringPboardType]
           || [type isEqualToString: NSTabularTextPboardType])
    {
      «t:NSString» *«v:data»;

      «k:if» («n:!» (data = [pb stringForType: type]))
        «k:return» «c:NO»;

      emacs_event->kind = DRAG_N_DROP_EVENT;
      XSETINT (emacs_event->x, x);
      XSETINT (emacs_event->y, y);
      emacs_event->modifiers = modifiers;
      emacs_event->arg =  list2 (Qnil, build_string ([data UTF8String]));
      EV_TRAILER (theEvent);
      «k:return» «c:YES»;
    }
  «k:else»
    {
      fprintf (stderr, «s:"Invalid data type in dragging pasteboard"»);
      «k:return» «c:NO»;
    }
}


- («t:id») «f:validRequestorForSendType»: («t:NSString» *)«v:typeSent»
                      «f:returnType»: («t:NSString» *)«v:typeReturned»
{
  NSTRACE («s:"[EmacsView validRequestorForSendType:returnType:]"»);
  «k:if» (typeSent != «c:nil» && [ns_send_types indexOfObject: typeSent] != NSNotFound
      && typeReturned == «c:nil»)
    {
      «k:if» («n:!» NILP (ns_get_local_selection (QPRIMARY, QUTF8_STRING)))
        «k:return» «k:self»;
    }

  «k:return» [«k:super» validRequestorForSendType: typeSent
                               returnType: typeReturned];
}


«m:/* »«x:The next two methods are part of NSServicesRequests informal protocol,
   supposedly called when a services menu item is chosen from this app.
   But this should not happen because we override the services menu with our
   own entries which call ns-perform-service.
   Nonetheless, it appeared to happen (under strange circumstances): bug#1435.
   So let's at least stub them out until further investigation can be done. */»

- («t:BOOL») «f:readSelectionFromPasteboard»: («t:NSPasteboard» *)«v:pb»
{
  «m:/* »«x:we could call ns_string_from_pasteboard(pboard) here but then it should
     be written into the buffer in place of the existing selection..
     ordinary service calls go through functions defined in ns-win.el */»
  «k:return» «c:NO»;
}

- («t:BOOL») «f:writeSelectionToPasteboard»: («t:NSPasteboard» *)«v:pb» «f:types»: («t:NSArray» *)«v:types»
{
  «t:NSArray» *«v:typesDeclared»;
  «t:Lisp_Object» «v:val»;

  NSTRACE («s:"[EmacsView writeSelectionToPasteboard:types:]"»);

  «m:/* »«x:We only support NSStringPboardType */»
  «k:if» ([types containsObject:NSStringPboardType] == «c:NO») {
    «k:return» «c:NO»;
  }

  val = ns_get_local_selection (QPRIMARY, QUTF8_STRING);
  «k:if» (CONSP (val) && SYMBOLP (XCAR (val)))
    {
      val = XCDR (val);
      «k:if» (CONSP (val) && NILP (XCDR (val)))
        val = XCAR (val);
    }
  «k:if» («n:!» STRINGP (val))
    «k:return» «c:NO»;

  typesDeclared = [«t:NSArray» arrayWithObject:NSStringPboardType];
  [pb declareTypes:typesDeclared owner:«c:nil»];
  ns_string_to_pasteboard (pb, val);
  «k:return» «c:YES»;
}


«m:/* »«x:setMini =YES means set from internal (gives a finder icon), NO means set nil
   (gives a miniaturized version of the window); currently we use the latter for
   frames whose active buffer doesn't correspond to any file
   (e.g., '*scratch*') */»
- «f:setMiniwindowImage»: («t:BOOL») «v:setMini»
{
  «t:id» «v:image» = [[«k:self» window] miniwindowImage];
  NSTRACE («s:"[EmacsView setMiniwindowImage:%d]"», setMini);

  «m:/* »«x:NOTE: under Cocoa miniwindowImage always returns nil, documentation
     about "AppleDockIconEnabled" notwithstanding, however the set message
     below has its effect nonetheless. */»
  «k:if» (image != emacsframe->output_data.ns->miniimage)
    {
      «k:if» (image && [image isKindOfClass: [«t:EmacsImage» class]])
        [image release];
      [[«k:self» window] setMiniwindowImage:
                       setMini ? emacsframe->output_data.ns->miniimage : «c:nil»];
    }

  «k:return» «k:self»;
}


- («t:void») «f:setRows»: («t:int») «v:r» «f:andColumns»: («t:int») «v:c»
{
  NSTRACE («s:"[EmacsView setRows:%d andColumns:%d]"», r, c);
  rows = r;
  cols = c;
}

- («t:int») «f:fullscreenState»
{
  «k:return» fs_state;
}

«k:@end»  «m:/* »«x:EmacsView */»



«m:/* »«x:==========================================================================

    EmacsWindow implementation

   ========================================================================== */»

«k:@implementation» «t:EmacsWindow»

«p:#ifdef» NS_IMPL_COCOA
- («t:id»)«f:accessibilityAttributeValue»:(«t:NSString» *)«v:attribute»
{
  «t:Lisp_Object» «v:str» = Qnil;
  «k:struct» «t:frame» *«t:f» = SELECTED_FRAME ();
  «k:struct» «t:buffer» *«t:curbuf» = XBUFFER (XWINDOW (f->selected_window)->contents);

  NSTRACE («s:"[EmacsWindow accessibilityAttributeValue:]"»);

  «k:if» ([attribute isEqualToString:NSAccessibilityRoleAttribute])
    «k:return» NSAccessibilityTextFieldRole;

  «k:if» ([attribute isEqualToString:NSAccessibilitySelectedTextAttribute]
      && curbuf && «n:!» NILP (BVAR (curbuf, mark_active)))
    {
      str = ns_get_local_selection (QPRIMARY, QUTF8_STRING);
    }
  «k:else» «k:if» (curbuf && [attribute isEqualToString:NSAccessibilityValueAttribute])
    {
      «k:if» («n:!» NILP (BVAR (curbuf, mark_active)))
          str = ns_get_local_selection (QPRIMARY, QUTF8_STRING);

      «k:if» (NILP (str))
        {
          «t:ptrdiff_t» «v:start_byte» = BUF_BEGV_BYTE (curbuf);
          «t:ptrdiff_t» «v:byte_range» = BUF_ZV_BYTE (curbuf) - «f:start_byte»;
          «t:ptrdiff_t» «v:range» = BUF_ZV (curbuf) - «f:BUF_BEGV» (curbuf);

          «k:if» («n:!» NILP (BVAR (curbuf, enable_multibyte_characters)))
            str = make_uninit_multibyte_string (range, byte_range);
          «k:else»
            str = make_uninit_string (range);
          «m:/* »«x:To check: This returns emacs-utf-8, which is a superset of utf-8.
             Is this a problem?  */»
          memcpy (SDATA (str), BYTE_POS_ADDR (start_byte), byte_range);
        }
    }


  «k:if» («n:!» NILP (str))
    {
      «k:if» (CONSP (str) && SYMBOLP (XCAR (str)))
        {
          str = XCDR (str);
          «k:if» (CONSP (str) && NILP (XCDR (str)))
            str = XCAR (str);
        }
      «k:if» (STRINGP (str))
        {
          «k:const» «t:char» *«v:utfStr» = SSDATA (str);
          «t:NSString» *«v:nsStr» = [«t:NSString» stringWithUTF8String: utfStr];
          «k:return» nsStr;
        }
    }

  «k:return» [«k:super» accessibilityAttributeValue:attribute];
}
«p:#endif» «m:/* »«x:NS_IMPL_COCOA */»

«m:/* »«x:Constrain size and placement of a frame.

   By returning the original "frameRect", the frame is not
   constrained. This can lead to unwanted situations where, for
   example, the menu bar covers the frame.

   The default implementation (accessed using "super") constrains the
   frame to the visible area of SCREEN, minus the menu bar (if
   present) and the Dock.  Note that default implementation also calls
   windowWillResize, with the frame it thinks should have.  (This can
   make the frame exit maximized mode.)

   Note that this should work in situations where multiple monitors
   are present.  Common configurations are side-by-side monitors and a
   monitor on top of another (e.g. when a laptop is placed under a
   large screen). */»
- («t:NSRect»)«f:constrainFrameRect»:(«t:NSRect»)«v:frameRect» «f:toScreen»:(«t:NSScreen» *)«v:screen»
{
  NSTRACE («s:"[EmacsWindow constrainFrameRect:"» NSTRACE_FMT_RECT «s:" toScreen:]"»,
             NSTRACE_ARG_RECT (frameRect));

«p:#ifdef» NS_IMPL_COCOA
«p:#if» MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_9
  «m:// »«x:If separate spaces is on, it is like each screen is independent.  There is
»  «m:// »«x:no spanning of frames across screens.
»  «k:if» ([«t:NSScreen» screensHaveSeparateSpaces])
    {
      NSTRACE_MSG («s:"Screens have separate spaces"»);
      frameRect = [«k:super» constrainFrameRect:frameRect toScreen:screen];
      NSTRACE_RETURN_RECT (frameRect);
      «k:return» frameRect;
    }
«p:#endif»
«p:#endif»

  «k:return» constrain_frame_rect(frameRect);
}


- («t:void»)«f:performZoom»:(«t:id»)«v:sender»
{
  NSTRACE («s:"[EmacsWindow performZoom:]"»);

  «k:return» [«k:super» performZoom:sender];
}

- («t:void»)«f:zoom»:(«t:id»)«v:sender»
{
  «k:struct» «t:frame» * «t:f» = SELECTED_FRAME ();

  NSTRACE («s:"[EmacsWindow zoom:]"»);

  ns_update_auto_hide_menu_bar();

  «m:// »«x:Below are three zoom implementations.  In the final commit, the
»  «m:// »«x:idea is that the last should be included.
»
«p:#if» 0
  «m:// »«x:Native zoom done using the standard zoom animation.  Size of the
»  «m:// »«x:resulting frame reduced to accommodate the Dock and, if present,
»  «m:// »«x:the menu-bar.
»  [«k:super» zoom:sender];

«p:#elsif» 0
  «m:// »«x:Native zoom done using the standard zoom animation, plus an
»  «m:// »«x:explicit resize to cover the full screen.
»  [«k:super» zoom:sender];

  «m:// »«x:After the native zoom, resize the resulting frame to fill the
»  «m:// »«x:entire screen, except the menu-bar.
»  «m://»«x:
»  «m:// »«x:This works for all practical purposes.  (The only minor oddity is
»  «m:// »«x:when transiting from full-height frame to a maximized, the
»  «m:// »«x:animation reduces the height of the frame slightly (to the 4
»  «m:// »«x:pixels needed to accommodate the Doc) before it snaps back into
»  «m:// »«x:full height.  The user would need a very trained eye to spot
»  «m:// »«x:this.)
»  «t:NSScreen» * «v:screen» = [«k:self» screen];
  «k:if» (screen != «c:nil»)
    {
      «t:int» «v:fs_state» = [(«t:EmacsView» *)[«k:self» delegate] fullscreenState];

      NSTRACE_FSTYPE («s:"fullscreenState"», fs_state);

      «t:NSRect» «v:sr» = [screen frame];
      «t:NSRect» «v:wr» = [«k:self» frame];
      NSTRACE_RECT («s:"Rect after zoom"», wr);

      «t:NSRect» «v:newWr» = wr;

      «k:if» (fs_state == FULLSCREEN_MAXIMIZED
          || fs_state == FULLSCREEN_HEIGHT)
        {
          newWr.origin.x = 0;
          newWr.size.height = sr.size.height - ns_menu_bar_height(screen);
        }

      «k:if» (fs_state == FULLSCREEN_MAXIMIZED
          || fs_state == FULLSCREEN_WIDTH)
        {
          newWr.origin.y = 0;
          newWr.size.width = sr.size.width;
        }

      «k:if» (newWr.size.width     != wr.size.width
          || newWr.size.height != wr.size.height
          || newWr.origin.x    != wr.origin.x
          || newWr.origin.y    != wr.origin.y)
        {
          NSTRACE_MSG («s:"New frame different"»);
          [«k:self» setFrame: newWr display: «c:NO»];
        }
    }
«p:#else»
  «m:// »«x:Non-native zoom which is done instantaneously.  The resulting frame
»  «m:// »«x:covers the entire screen, except the menu-bar, if present.
»  «t:NSScreen» * «v:screen» = [«k:self» screen];
  «k:if» (screen != «c:nil»)
    {
      «t:NSRect» «v:sr» = [screen frame];
      sr.size.height -= ns_menu_bar_height (screen);

      sr = [[«k:self» delegate] windowWillUseStandardFrame:«k:self»
                                          defaultFrame:sr];
      [«k:self» setFrame: sr display: «c:NO»];
    }
«p:#endif»
}

- («t:void»)«f:setFrame»:(«t:NSRect»)«v:windowFrame»
         «f:display»:(«t:BOOL»)«v:displayViews»
{
  NSTRACE («s:"[EmacsWindow setFrame:"» NSTRACE_FMT_RECT «s:" display:%d]"»,
           NSTRACE_ARG_RECT (windowFrame), displayViews);

  [«k:super» setFrame:windowFrame display:displayViews];
}

- («t:void»)«f:setFrame»:(«t:NSRect»)«v:windowFrame»
         «f:display»:(«t:BOOL»)«v:displayViews»
         «f:animate»:(«t:BOOL»)«v:performAnimation»
{
  NSTRACE («s:"[EmacsWindow setFrame:"» NSTRACE_FMT_RECT
           «s:" display:%d performAnimation:%d]"»,
           NSTRACE_ARG_RECT (windowFrame), displayViews, performAnimation);

  [«k:super» setFrame:windowFrame display:displayViews animate:performAnimation];
}

- («t:void»)«f:setFrameTopLeftPoint»:(«t:NSPoint»)«v:point»
{
  NSTRACE («s:"[EmacsWindow setFrameTopLeftPoint:"» NSTRACE_FMT_POINT «s:"]"»,
           NSTRACE_ARG_POINT (point));

  [«k:super» setFrameTopLeftPoint:point];
}
«k:@end» «m:/* »«x:EmacsWindow */»


«k:@implementation» «t:EmacsFSWindow»

- («t:BOOL»)«f:canBecomeKeyWindow»
{
  «k:return» «c:YES»;
}

- («t:BOOL»)«f:canBecomeMainWindow»
{
  «k:return» «c:YES»;
}

«k:@end»

«m:/* »«x:==========================================================================

    EmacsScroller implementation

   ========================================================================== */»


«k:@implementation» «t:EmacsScroller»

«m:/* »«x:for repeat button push */»
«p:#define» «v:SCROLL_BAR_FIRST_DELAY» 0.5
«p:#define» «v:SCROLL_BAR_CONTINUOUS_DELAY» (1.0 / 15)

+ («t:CGFloat») «f:scrollerWidth»
{
  «m:/* »«x:TODO: if we want to allow variable widths, this is the place to do it,
           however neither GNUstep nor Cocoa support it very well */»
  «t:CGFloat» «v:r»;
«p:#if» «n:!»«p:defined» (NS_IMPL_COCOA) || \
  MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_7
  r = [«t:NSScroller» scrollerWidth];
«p:#else»
  r = [«t:NSScroller» scrollerWidthForControlSize: NSRegularControlSize
                                scrollerStyle: NSScrollerStyleLegacy];
«p:#endif»
  «k:return» r;
}


- «f:initFrame»: («t:NSRect» )«v:r» «f:window»: («t:Lisp_Object»)«v:nwin»
{
  NSTRACE («s:"[EmacsScroller initFrame: window:]"»);

  r.size.width = [«t:EmacsScroller» scrollerWidth];
  [«k:super» initWithFrame: r«m:/*»«x:NSMakeRect (0, 0, 0, 0)*/»];
  [«k:self» setContinuous: «c:YES»];
  [«k:self» setEnabled: «c:YES»];

  «m:/* »«x:Ensure auto resizing of scrollbars occurs within the emacs frame's view
     locked against the top and bottom edges, and right edge on OS X, where
     scrollers are on right. */»
«p:#ifdef» NS_IMPL_GNUSTEP
  [«k:self» setAutoresizingMask: NSViewMaxXMargin | NSViewHeightSizable];
«p:#else»
  [«k:self» setAutoresizingMask: NSViewMinXMargin | NSViewHeightSizable];
«p:#endif»

  window = XWINDOW (nwin);
  condemned = «c:NO»;
  pixel_height = NSHeight (r);
  «k:if» (pixel_height == 0) pixel_height = 1;
  min_portion = 20 / pixel_height;

  frame = XFRAME (window->frame);
  «k:if» (FRAME_LIVE_P (frame))
    {
      «t:int» «v:i»;
      «t:EmacsView» *«v:view» = FRAME_NS_VIEW (frame);
      «t:NSView» *«v:sview» = [[view window] contentView];
      «t:NSArray» *«v:subs» = [sview subviews];

      «m:/* »«x:disable optimization stopping redraw of other scrollbars */»
      view->scrollbarsNeedingUpdate = 0;
      «k:for» (i =[subs count]-1; i >= 0; i--)
        «k:if» ([[subs objectAtIndex: i] isKindOfClass: [«t:EmacsScroller» class]])
          view->scrollbarsNeedingUpdate++;
      [sview addSubview: «k:self»];
    }

«m:/*  »«x:[self setFrame: r]; */»

  «k:return» «k:self»;
}


- («t:void»)«f:setFrame»: («t:NSRect»)«v:newRect»
{
  NSTRACE («s:"[EmacsScroller setFrame:]"»);

«m:/*  »«x:block_input (); */»
  pixel_height = NSHeight (newRect);
  «k:if» (pixel_height == 0) pixel_height = 1;
  min_portion = 20 / pixel_height;
  [«k:super» setFrame: newRect];
«m:/*  »«x:unblock_input (); */»
}


- («t:void»)«f:dealloc»
{
  NSTRACE («s:"[EmacsScroller dealloc]"»);
  «k:if» (window)
    wset_vertical_scroll_bar (window, Qnil);
  window = 0;
  [«k:super» dealloc];
}


- «f:condemn»
{
  NSTRACE («s:"[EmacsScroller condemn]"»);
  condemned =«c:YES»;
  «k:return» «k:self»;
}


- «f:reprieve»
{
  NSTRACE («s:"[EmacsScroller reprieve]"»);
  condemned =«c:NO»;
  «k:return» «k:self»;
}


-(«t:bool»)«f:judge»
{
  NSTRACE («s:"[EmacsScroller judge]"»);
  «t:bool» «v:ret» = condemned;
  «k:if» (condemned)
    {
      «t:EmacsView» *«v:view»;
      block_input ();
      «m:/* »«x:ensure other scrollbar updates after deletion */»
      view = («t:EmacsView» *)FRAME_NS_VIEW (frame);
      «k:if» (view != «c:nil»)
        view->scrollbarsNeedingUpdate++;
      «k:if» (window)
        wset_vertical_scroll_bar (window, Qnil);
      window = 0;
      [«k:self» removeFromSuperview];
      [«k:self» release];
      unblock_input ();
    }
  «k:return» ret;
}


- («t:void»)«f:resetCursorRects»
{
  «t:NSRect» «v:visible» = [«k:self» visibleRect];
  NSTRACE («s:"[EmacsScroller resetCursorRects]"»);

  «k:if» («n:!»NSIsEmptyRect (visible))
    [«k:self» addCursorRect: visible cursor: [«t:NSCursor» arrowCursor]];
  [[«t:NSCursor» arrowCursor] setOnMouseEntered: «c:YES»];
}


- («t:int») «f:checkSamePosition»: («t:int») «v:position» «f:portion»: («t:int») «v:portion»
                    «f:whole»: («t:int») «v:whole»
{
  «k:return» em_position ==position && em_portion ==portion && em_whole ==whole
    && portion != whole; «m:/* »«x:needed for resize empty buf */»
}


- «f:setPosition»: («t:int»)«v:position» «f:portion»: («t:int»)«v:portion» «f:whole»: («t:int»)«v:whole»
{
  NSTRACE («s:"[EmacsScroller setPosition:portion:whole:]"»);

  em_position = position;
  em_portion = portion;
  em_whole = whole;

  «k:if» (portion >= whole)
    {
«p:#ifdef» NS_IMPL_COCOA
      [«k:self» setKnobProportion: 1.0];
      [«k:self» setDoubleValue: 1.0];
«p:#else»
      [«k:self» setFloatValue: 0.0 knobProportion: 1.0];
«p:#endif»
    }
  «k:else»
    {
      «t:float» «v:pos»;
      «t:CGFloat» «v:por»;
      portion = max ((«t:float»)whole*min_portion/pixel_height, portion);
      pos = («t:float»)position / (whole - portion);
      por = («t:CGFloat»)portion/whole;
«p:#ifdef» NS_IMPL_COCOA
      [«k:self» setKnobProportion: por];
      [«k:self» setDoubleValue: pos];
«p:#else»
      [«k:self» setFloatValue: pos knobProportion: por];
«p:#endif»
    }

  «k:return» «k:self»;
}

«m:/* »«x:set up emacs_event */»
- («t:void») «f:sendScrollEventAtLoc»: («t:float»)«v:loc» «f:fromEvent»: («t:NSEvent» *)«v:e»
{
  «t:Lisp_Object» «v:win»;

  NSTRACE («s:"[EmacsScroller sendScrollEventAtLoc:fromEvent:]"»);

  «k:if» («n:!»emacs_event)
    «k:return»;

  emacs_event->part = last_hit_part;
  emacs_event->code = 0;
  emacs_event->modifiers = EV_MODIFIERS (e) | down_modifier;
  XSETWINDOW (win, window);
  emacs_event->frame_or_window = win;
  emacs_event->timestamp = EV_TIMESTAMP (e);
  emacs_event->kind = SCROLL_BAR_CLICK_EVENT;
  emacs_event->arg = Qnil;
  XSETINT (emacs_event->x, loc * pixel_height);
  XSETINT (emacs_event->y, pixel_height-20);

  «k:if» (q_event_ptr)
    {
      n_emacs_events_pending++;
      kbd_buffer_store_event_hold (emacs_event, q_event_ptr);
    }
  «k:else»
    hold_event (emacs_event);
  EVENT_INIT (*emacs_event);
  ns_send_appdefined (-1);
}


«m:/* »«x:called manually thru timer to implement repeated button action w/hold-down */»
- «f:repeatScroll»: («t:NSTimer» *)«v:scrollEntry»
{
  «t:NSEvent» *«v:e» = [[«k:self» window] currentEvent];
  «t:NSPoint» «v:p» =  [[«k:self» window] mouseLocationOutsideOfEventStream];
  «t:BOOL» «v:inKnob» = [«k:self» testPart: p] == NSScrollerKnob;

  NSTRACE («s:"[EmacsScroller repeatScroll:]"»);

  «m:/* »«x:clear timer if need be */»
  «k:if» (inKnob || [scroll_repeat_entry timeInterval] == SCROLL_BAR_FIRST_DELAY)
    {
        [scroll_repeat_entry invalidate];
        [scroll_repeat_entry release];
        scroll_repeat_entry = «c:nil»;

        «k:if» (inKnob)
          «k:return» «k:self»;

        scroll_repeat_entry
	  = [[«t:NSTimer» scheduledTimerWithTimeInterval:
			SCROLL_BAR_CONTINUOUS_DELAY
                                            target: «k:self»
                                          selector: «k:@selector» (repeatScroll:)
                                          userInfo: 0
                                           repeats: «c:YES»]
	      retain];
    }

  [«k:self» sendScrollEventAtLoc: 0 fromEvent: e];
  «k:return» «k:self»;
}


«m:/* »«x:Asynchronous mouse tracking for scroller.  This allows us to dispatch
   mouseDragged events without going into a modal loop. */»
- («t:void»)«f:mouseDown»: («t:NSEvent» *)«v:e»
{
  «t:NSRect» «v:sr», «v:kr»;
  «m:/* »«x:hitPart is only updated AFTER event is passed on */»
  «t:NSScrollerPart» «v:part» = [«k:self» testPart: [e locationInWindow]];
  «t:CGFloat» «v:inc» = 0.0, «v:loc», «v:kloc», «v:pos»;
  «t:int» «v:edge» = 0;

  NSTRACE («s:"[EmacsScroller mouseDown:]"»);

  «k:switch» (part)
    {
    «k:case» NSScrollerDecrementPage:
        last_hit_part = scroll_bar_above_handle; inc = -1.0; «k:break»;
    «k:case» NSScrollerIncrementPage:
        last_hit_part = scroll_bar_below_handle; inc = 1.0; «k:break»;
    «k:case» NSScrollerDecrementLine:
      last_hit_part = scroll_bar_up_arrow; inc = -0.1; «k:break»;
    «k:case» NSScrollerIncrementLine:
      last_hit_part = scroll_bar_down_arrow; inc = 0.1; «k:break»;
    «k:case» NSScrollerKnob:
      last_hit_part = scroll_bar_handle; «k:break»;
    «k:case» NSScrollerKnobSlot:  «m:/* »«x:GNUstep-only */»
      last_hit_part = scroll_bar_move_ratio; «k:break»;
    «k:default»:  «m:/* »«x:NSScrollerNoPart? */»
      fprintf (stderr, «s:"EmacsScoller-mouseDown: unexpected part %ld\n"»,
               («t:long») part);
      «k:return»;
    }

  «k:if» (inc != 0.0)
    {
      pos = 0;      «m:/* »«x:ignored */»

      «m:/* »«x:set a timer to repeat, as we can't let superclass do this modally */»
      scroll_repeat_entry
	= [[«t:NSTimer» scheduledTimerWithTimeInterval: SCROLL_BAR_FIRST_DELAY
                                            target: «k:self»
                                          selector: «k:@selector» (repeatScroll:)
                                          userInfo: 0
                                           repeats: «c:YES»]
	    retain];
    }
  «k:else»
    {
      «m:/* »«x:handle, or on GNUstep possibly slot */»
      «t:NSEvent» *«v:fake_event»;

      «m:/* »«x:compute float loc in slot and mouse offset on knob */»
      sr = [«k:self» convertRect: [«k:self» rectForPart: NSScrollerKnobSlot]
                      toView: «c:nil»];
      loc = NSHeight (sr) - ([e locationInWindow].y - NSMinY (sr));
      «k:if» (loc <= 0.0)
        {
          loc = 0.0;
          edge = -1;
        }
      «k:else» «k:if» (loc >= NSHeight (sr))
        {
          loc = NSHeight (sr);
          edge = 1;
        }

      «k:if» (edge)
        kloc = 0.5 * edge;
      «k:else»
        {
          kr = [«k:self» convertRect: [«k:self» rectForPart: NSScrollerKnob]
                          toView: «c:nil»];
          kloc = NSHeight (kr) - ([e locationInWindow].y - NSMinY (kr));
        }
      last_mouse_offset = kloc;

      «m:/* »«x:if knob, tell emacs a location offset by knob pos
         (to indicate top of handle) */»
      «k:if» (part == NSScrollerKnob)
          pos = (loc - last_mouse_offset) / NSHeight (sr);
      «k:else»
        «m:/* »«x:else this is a slot click on GNUstep: go straight there */»
        pos = loc / NSHeight (sr);

      «m:/* »«x:send a fake mouse-up to super to preempt modal -trackKnob: mode */»
      fake_event = [«t:NSEvent» mouseEventWithType: NSLeftMouseUp
                                      location: [e locationInWindow]
                                 modifierFlags: [e modifierFlags]
                                     timestamp: [e timestamp]
                                  windowNumber: [e windowNumber]
                                       context: [e context]
                                   eventNumber: [e eventNumber]
                                    clickCount: [e clickCount]
                                      pressure: [e pressure]];
      [«k:super» mouseUp: fake_event];
    }

  «k:if» (part != NSScrollerKnob)
    [«k:self» sendScrollEventAtLoc: pos fromEvent: e];
}


«m:/* »«x:Called as we manually track scroller drags, rather than superclass. */»
- («t:void»)«f:mouseDragged»: («t:NSEvent» *)«v:e»
{
    «t:NSRect» «v:sr»;
    «t:double» «v:loc», «v:pos»;

    NSTRACE («s:"[EmacsScroller mouseDragged:]"»);

      sr = [«k:self» convertRect: [«k:self» rectForPart: NSScrollerKnobSlot]
                      toView: «c:nil»];
      loc = NSHeight (sr) - ([e locationInWindow].y - NSMinY (sr));

      «k:if» (loc <= 0.0)
        {
          loc = 0.0;
        }
      «k:else» «k:if» (loc >= NSHeight (sr) + «f:last_mouse_offset»)
        {
          loc = NSHeight (sr) + «f:last_mouse_offset»;
        }

      pos = (loc - last_mouse_offset) / NSHeight (sr);
      [«k:self» sendScrollEventAtLoc: pos fromEvent: e];
}


- («t:void»)«f:mouseUp»: («t:NSEvent» *)«v:e»
{
  NSTRACE («s:"[EmacsScroller mouseUp:]"»);

  «k:if» (scroll_repeat_entry)
    {
      [scroll_repeat_entry invalidate];
      [scroll_repeat_entry release];
      scroll_repeat_entry = «c:nil»;
    }
  last_hit_part = scroll_bar_above_handle;
}


«m:/* »«x:treat scrollwheel events in the bar as though they were in the main window */»
- («t:void») «f:scrollWheel»: («t:NSEvent» *)«v:theEvent»
{
  NSTRACE («s:"[EmacsScroller scrollWheel:]"»);

  «t:EmacsView» *«v:view» = («t:EmacsView» *)FRAME_NS_VIEW (frame);
  [view mouseDown: theEvent];
}

«k:@end»  «m:/* »«x:EmacsScroller */»


«p:#ifdef» NS_IMPL_GNUSTEP
«m:/* »«x:Dummy class to get rid of startup warnings.  */»
«k:@implementation» «t:EmacsDocument»

«k:@end»
«p:#endif»


«m:/* »«x:==========================================================================

   Font-related functions; these used to be in nsfaces.m

   ========================================================================== */»


«t:Lisp_Object»
«t:x_new_font» («k:struct» «t:frame» *«t:f», «t:Lisp_Object» «v:font_object», «t:int» «v:fontset»)
{
  «k:struct» «t:font» *«t:font» = XFONT_OBJECT (font_object);
  «t:EmacsView» *«v:view» = FRAME_NS_VIEW (f);
  «t:int» «v:font_ascent», «v:font_descent»;

  «k:if» (fontset < 0)
    fontset = fontset_from_font (font_object);
  FRAME_FONTSET (f) = fontset;

  «k:if» (FRAME_FONT (f) == font)
    «m:/* »«x:This font is already set in frame F.  There's nothing more to
       do.  */»
    «k:return» font_object;

  FRAME_FONT (f) = font;

  FRAME_BASELINE_OFFSET (f) = font->baseline_offset;
  FRAME_COLUMN_WIDTH (f) = font->average_width;
  get_font_ascent_descent (font, &font_ascent, &font_descent);
  FRAME_LINE_HEIGHT (f) = font_ascent + font_descent;

  «m:/* »«x:Compute the scroll bar width in character columns.  */»
  «k:if» (FRAME_CONFIG_SCROLL_BAR_WIDTH (f) > 0)
    {
      «t:int» «v:wid» = FRAME_COLUMN_WIDTH (f);
      FRAME_CONFIG_SCROLL_BAR_COLS (f)
	= (FRAME_CONFIG_SCROLL_BAR_WIDTH (f) + «f:wid» - 1) / wid;
    }
  «k:else»
    {
      «t:int» «v:wid» = FRAME_COLUMN_WIDTH (f);
      FRAME_CONFIG_SCROLL_BAR_COLS (f) = (14 + wid - 1) / wid;
    }

  «m:/* »«x:Compute the scroll bar height in character lines.  */»
  «k:if» (FRAME_CONFIG_SCROLL_BAR_HEIGHT (f) > 0)
    {
      «t:int» «v:height» = FRAME_LINE_HEIGHT (f);
      FRAME_CONFIG_SCROLL_BAR_LINES (f)
	= (FRAME_CONFIG_SCROLL_BAR_HEIGHT (f) + «f:height» - 1) / height;
    }
  «k:else»
    {
      «t:int» «v:height» = FRAME_LINE_HEIGHT (f);
      FRAME_CONFIG_SCROLL_BAR_LINES (f) = (14 + height - 1) / height;
    }

  «m:/* »«x:Now make the frame display the given font.  */»
  «k:if» (FRAME_NS_WINDOW (f) != 0 && «n:!» [view isFullscreen])
    adjust_frame_size (f, FRAME_COLS (f) * FRAME_COLUMN_WIDTH (f),
		       FRAME_LINES (f) * FRAME_LINE_HEIGHT (f), 3,
		       false, Qfont);

  «k:return» font_object;
}


«m:/* »«x:XLFD: -foundry-family-weight-slant-swidth-adstyle-pxlsz-ptSz-resx-resy-spc-avgWidth-rgstry-encoding */»
«m:/* »«x:Note: ns_font_to_xlfd and ns_fontname_to_xlfd no longer needed, removed
         in 1.43. */»

«k:const» «t:char» *
«f:ns_xlfd_to_fontname» («k:const» «t:char» *«v:xlfd»)
«m:/* »«x:--------------------------------------------------------------------------
    Convert an X font name (XLFD) to an NS font name.
    Only family is used.
    The string returned is temporarily allocated.
   -------------------------------------------------------------------------- */»
{
  «t:char» *«v:name» = xmalloc (180);
  «t:int» «v:i», «v:len»;
  «k:const» «t:char» *«v:ret»;

  «k:if» («n:!»strncmp (xlfd, «s:"--"», 2))
    sscanf (xlfd, «s:"--%*[^-]-%[^-]179-"», name);
  «k:else»
    sscanf (xlfd, «s:"-%*[^-]-%[^-]179-"», name);

  «m:/* »«x:stopgap for malformed XLFD input */»
  «k:if» (strlen (name) == 0)
    strcpy (name, «s:"Monaco"»);

  «m:/* »«x:undo hack in ns_fontname_to_xlfd, converting '$' to '-', '_' to ' '
     also uppercase after '-' or ' ' */»
  name[0] = c_toupper (name[0]);
  «k:for» (len =strlen (name), i =0; i<len; i++)
    {
      «k:if» (name[i] == «s:'$'»)
        {
          name[i] = «s:'-'»;
          «k:if» (i+1<len)
            name[i+1] = c_toupper (name[i+1]);
        }
      «k:else» «k:if» (name[i] == «s:'_'»)
        {
          name[i] = «s:' '»;
          «k:if» (i+1<len)
            name[i+1] = c_toupper (name[i+1]);
        }
    }
«m:/*»«x:fprintf (stderr, "converted '%s' to '%s'\n",xlfd,name);  */»
  ret = [[«t:NSString» stringWithUTF8String: name] UTF8String];
  xfree (name);
  «k:return» ret;
}


«t:void»
«f:syms_of_nsterm» («t:void»)
{
  NSTRACE («s:"syms_of_nsterm"»);

  ns_antialias_threshold = 10.0;

  «m:/* »«x:from 23+ we need to tell emacs what modifiers there are.. */»
  DEFSYM (Qmodifier_value, «s:"modifier-value"»);
  DEFSYM (Qalt, «s:"alt"»);
  DEFSYM (Qhyper, «s:"hyper"»);
  DEFSYM (Qmeta, «s:"meta"»);
  DEFSYM (Qsuper, «s:"super"»);
  DEFSYM (Qcontrol, «s:"control"»);
  DEFSYM (QUTF8_STRING, «s:"UTF8_STRING"»);

  DEFSYM (Qfile, «s:"file"»);
  DEFSYM (Qurl, «s:"url"»);

  Fput («v:Qalt», Qmodifier_value, make_number (alt_modifier));
  Fput («v:Qhyper», Qmodifier_value, make_number (hyper_modifier));
  Fput («v:Qmeta», Qmodifier_value, make_number (meta_modifier));
  Fput («v:Qsuper», Qmodifier_value, make_number (super_modifier));
  Fput («v:Qcontrol», Qmodifier_value, make_number (ctrl_modifier));

  DEFVAR_LISP («s:"ns-input-file"», ns_input_file,
              «s:"The file specified in the last NS event."»);
  ns_input_file =Qnil;

  DEFVAR_LISP («s:"ns-working-text"», ns_working_text,
              «s:"String for visualizing working composition sequence."»);
  ns_working_text =Qnil;

  DEFVAR_LISP («s:"ns-input-font"», ns_input_font,
              «s:"The font specified in the last NS event."»);
  ns_input_font =Qnil;

  DEFVAR_LISP («s:"ns-input-fontsize"», ns_input_fontsize,
              «s:"The fontsize specified in the last NS event."»);
  ns_input_fontsize =Qnil;

  DEFVAR_LISP («s:"ns-input-line"», ns_input_line,
               «s:"The line specified in the last NS event."»);
  ns_input_line =Qnil;

  DEFVAR_LISP («s:"ns-input-spi-name"», ns_input_spi_name,
               «s:"The service name specified in the last NS event."»);
  ns_input_spi_name =Qnil;

  DEFVAR_LISP («s:"ns-input-spi-arg"», ns_input_spi_arg,
               «s:"The service argument specified in the last NS event."»);
  ns_input_spi_arg =Qnil;

  DEFVAR_LISP («s:"ns-alternate-modifier"», ns_alternate_modifier,
               «s:"This variable describes the behavior of the alternate or option key.\n\
Set to control, meta, alt, super, or hyper means it is taken to be that key.\n\
Set to none means that the alternate / option key is not interpreted by Emacs\n\
at all, allowing it to be used at a lower level for accented character entry."»);
  ns_alternate_modifier = Qmeta;

  DEFVAR_LISP («s:"ns-right-alternate-modifier"», ns_right_alternate_modifier,
               «s:"This variable describes the behavior of the right alternate or option key.\n\
Set to control, meta, alt, super, or hyper means it is taken to be that key.\n\
Set to left means be the same key as `ns-alternate-modifier'.\n\
Set to none means that the alternate / option key is not interpreted by Emacs\n\
at all, allowing it to be used at a lower level for accented character entry."»);
  ns_right_alternate_modifier = Qleft;

  DEFVAR_LISP («s:"ns-command-modifier"», ns_command_modifier,
               «s:"This variable describes the behavior of the command key.\n\
Set to control, meta, alt, super, or hyper means it is taken to be that key."»);
  ns_command_modifier = Qsuper;

  DEFVAR_LISP («s:"ns-right-command-modifier"», ns_right_command_modifier,
               «s:"This variable describes the behavior of the right command key.\n\
Set to control, meta, alt, super, or hyper means it is taken to be that key.\n\
Set to left means be the same key as `ns-command-modifier'.\n\
Set to none means that the command / option key is not interpreted by Emacs\n\
at all, allowing it to be used at a lower level for accented character entry."»);
  ns_right_command_modifier = Qleft;

  DEFVAR_LISP («s:"ns-control-modifier"», ns_control_modifier,
               «s:"This variable describes the behavior of the control key.\n\
Set to control, meta, alt, super, or hyper means it is taken to be that key."»);
  ns_control_modifier = Qcontrol;

  DEFVAR_LISP («s:"ns-right-control-modifier"», ns_right_control_modifier,
               «s:"This variable describes the behavior of the right control key.\n\
Set to control, meta, alt, super, or hyper means it is taken to be that key.\n\
Set to left means be the same key as `ns-control-modifier'.\n\
Set to none means that the control / option key is not interpreted by Emacs\n\
at all, allowing it to be used at a lower level for accented character entry."»);
  ns_right_control_modifier = Qleft;

  DEFVAR_LISP («s:"ns-function-modifier"», ns_function_modifier,
               «s:"This variable describes the behavior of the function key (on laptops).\n\
Set to control, meta, alt, super, or hyper means it is taken to be that key.\n\
Set to none means that the function key is not interpreted by Emacs at all,\n\
allowing it to be used at a lower level for accented character entry."»);
  ns_function_modifier = Qnone;

  DEFVAR_LISP («s:"ns-antialias-text"», ns_antialias_text,
               «s:"Non-nil (the default) means to render text antialiased."»);
  ns_antialias_text = Qt;

  DEFVAR_LISP («s:"ns-confirm-quit"», ns_confirm_quit,
               «s:"Whether to confirm application quit using dialog."»);
  ns_confirm_quit = Qnil;

  DEFVAR_LISP («s:"ns-auto-hide-menu-bar"», ns_auto_hide_menu_bar,
               doc: «m:/* »«x:Non-nil means that the menu bar is hidden, but appears when the mouse is near.
Only works on OSX 10.6 or later.  */»);
  ns_auto_hide_menu_bar = Qnil;

  DEFVAR_BOOL («s:"ns-use-native-fullscreen"», ns_use_native_fullscreen,
     doc: «m:/*»«x:Non-nil means to use native fullscreen on OSX >= 10.7.
Nil means use fullscreen the old (< 10.7) way.  The old way works better with
multiple monitors, but lacks tool bar.  This variable is ignored on OSX < 10.7.
Default is t for OSX >= 10.7, nil otherwise.  */»);
«p:#ifdef» HAVE_NATIVE_FS
  ns_use_native_fullscreen = «c:YES»;
«p:#else»
  ns_use_native_fullscreen = «c:NO»;
«p:#endif»
  ns_last_use_native_fullscreen = ns_use_native_fullscreen;

  DEFVAR_BOOL («s:"ns-use-fullscreen-animation"», ns_use_fullscreen_animation,
     doc: «m:/*»«x:Non-nil means use animation on non-native fullscreen.
For native fullscreen, this does nothing.
Default is nil.  */»);
  ns_use_fullscreen_animation = «c:NO»;

  DEFVAR_BOOL («s:"ns-use-srgb-colorspace"», ns_use_srgb_colorspace,
     doc: «m:/*»«x:Non-nil means to use sRGB colorspace on OSX >= 10.7.
Note that this does not apply to images.
This variable is ignored on OSX < 10.7 and GNUstep.  */»);
  ns_use_srgb_colorspace = «c:YES»;

  «m:/* »«x:TODO: move to common code */»
  DEFVAR_LISP («s:"x-toolkit-scroll-bars"», Vx_toolkit_scroll_bars,
	       doc: «m:/* »«x:Which toolkit scroll bars Emacs uses, if any.
A value of nil means Emacs doesn't use toolkit scroll bars.
With the X Window system, the value is a symbol describing the
X toolkit.  Possible values are: gtk, motif, xaw, or xaw3d.
With MS Windows or Nextstep, the value is t.  */»);
  Vx_toolkit_scroll_bars = Qt;

  DEFVAR_BOOL («s:"x-use-underline-position-properties"»,
	       x_use_underline_position_properties,
     doc: «m:/*»«x:Non-nil means make use of UNDERLINE_POSITION font properties.
A value of nil means ignore them.  If you encounter fonts with bogus
UNDERLINE_POSITION font properties, for example 7x13 on XFree prior
to 4.1, set this to nil. */»);
  x_use_underline_position_properties = 0;

  DEFVAR_BOOL («s:"x-underline-at-descent-line"»,
	       x_underline_at_descent_line,
     doc: «m:/* »«x:Non-nil means to draw the underline at the same place as the descent line.
A value of nil means to draw the underline according to the value of the
variable `x-use-underline-position-properties', which is usually at the
baseline level.  The default value is nil.  */»);
  x_underline_at_descent_line = 0;

  «m:/* »«x:Tell Emacs about this window system.  */»
  Fprovide («v:Qns», Qnil);

  DEFSYM (Qcocoa, «s:"cocoa"»);
  DEFSYM (Qgnustep, «s:"gnustep"»);

«p:#ifdef» NS_IMPL_COCOA
  Fprovide («v:Qcocoa», Qnil);
  syms_of_macfont ();
«p:#else»
  Fprovide («v:Qgnustep», Qnil);
  syms_of_nsfont ();
«p:#endif»

}
