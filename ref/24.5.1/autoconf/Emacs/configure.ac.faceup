«m:dnl  »«x:Autoconf script for GNU Emacs
»«m:dnl »«x:To rebuild the 'configure' script from this, execute the command
dnl	autoconf
»«m:dnl »«x:in the directory containing this script.
»«m:dnl »«x:If you changed any AC_DEFINES, also run autoheader.
dnl
»«m:dnl »«x:Copyright (C) 1994-1996, 1999-2015 Free Software Foundation, Inc.
dnl
»«m:dnl  »«x:This file is part of GNU Emacs.
dnl
»«m:dnl  »«x:GNU Emacs is free software: you can redistribute it and/or modify
»«m:dnl  »«x:it under the terms of the GNU General Public License as published by
»«m:dnl  »«x:the Free Software Foundation, either version 3 of the License, or
»«m:dnl  »«x:(at your option) any later version.
dnl
»«m:dnl  »«x:GNU Emacs is distributed in the hope that it will be useful,
»«m:dnl  »«x:but WITHOUT ANY WARRANTY; without even the implied warranty of
»«m:dnl  »«x:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
»«m:dnl  »«x:GNU General Public License for more details.
dnl
»«m:dnl  »«x:You should have received a copy of the GNU General Public License
»«m:dnl  »«x:along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
»
«k:AC_PREREQ»(2.65)
«m:dnl »«x:Note this is parsed by (at least) make-dist and lisp/cedet/ede/emacs.el.
»«k:AC_INIT»(GNU Emacs, 25.0.50, bug-gnu-emacs@gnu.org)

«m:dnl »«x:Set emacs_config_options to the options of 'configure', quoted for the shell,
»«m:dnl »«x:and then quoted again for a C string.  Separate options with spaces.
»«m:dnl »«x:Add some environment variables, if they were passed via the environment
»«m:dnl »«x:rather than on the command-line.
»emacs_config_options=
optsep=
«m:dnl »«x:This is the documented way to record the args passed to configure,
»«m:dnl »«x:rather than $ac_configure_args.
»for opt in ${1+"$@"} CFLAGS CPPFLAGS LDFLAGS; do
  case $opt in
    -n | --no-create | --no-recursion)
      continue ;;
    CFLAGS | CPPFLAGS | LDFLAGS)
      eval 'test "${'$opt'+set}" = set' || continue
      case " $*" in
	*" $opt="*) continue ;;
      esac
      eval opt=$opt=\$$opt ;;
  esac

  emacs_shell_specials=$IFS\''"«x:#$&()*;<>?@<:@\\`{|~'
»  case $opt in
    *[["$emacs_shell_specials"]]*)
      case $opt in
	*\'*)
	  emacs_quote_apostrophes="s/'/'\\\\''/g"
	  opt=`«k:AS_ECHO»(["$opt"]) | sed "$emacs_quote_apostrophes"` ;;
      esac
      opt="'$opt'"
      case $opt in
	*[['"\\']]*)
	  emacs_quote_for_c='s/[["\\]]/\\&/g; $!s/$/\\n\\/'
	  opt=`«k:AS_ECHO»(["$opt"]) | sed "$emacs_quote_for_c"` ;;
      esac ;;
  esac
  «k:AS_VAR_APPEND»([emacs_config_options], ["$optsep$opt"])
  optsep=' '
done

«k:AC_CONFIG_HEADERS»(src/config.h:src/config.in)
«k:AC_CONFIG_SRCDIR»(src/lisp.h)
«k:AC_CONFIG_AUX_DIR»(build-aux)
«m:dnl »«x:automake 1.13 and later understand this, making -I m4 unnecessary.
»«m:dnl »«x:With older versions this is a no-op.
»«k:AC_CONFIG_MACRO_DIR»(m4)

xcsdkdir=
«k:AC_CHECK_PROGS»(XCRUN, [xcrun])
if test -n "$XCRUN"; then
  if test -z "$MAKE"; then
    «x:dnl Call the variable MAKE_PROG, not MAKE, to avoid confusion with
»    «x:dnl the usual MAKE variable that 'make' itself uses.
»    «k:AC_CHECK_PROG»([MAKE_PROG], [make], [yes])
    if test -z "$MAKE_PROG"; then
      MAKE="$XCRUN MAKE"
      export MAKE
      xcsdkdir=`$XCRUN --show-sdk-path 2>/dev/null`
    fi
  fi
fi

«m:dnl »«x:GNU Make is required, so don't test for its individual features.
»am_cv_make_support_nested_variables=yes
«k:AC_DEFUN»([«k:AC_PROG_MAKE_SET»],
  [SET_MAKE=
   «k:AC_SUBST»([«f:SET_MAKE»])])

«m:dnl »«x:Check for GNU Make and possibly set MAKE before running AM_INIT_AUTOMAKE.
»[emacs_check_gnu_make ()
{
  emacs_makeout=`($1 --version) 2>/dev/null` &&
  case $emacs_makeout in
    'GNU Make '3.8[1-9]* | 'GNU Make '3.9[0-9]* | \
    'GNU Make '3.[1-9][0-9][0-9]* | 'GNU Make '[4-9]* | 'GNU Make '[1-9][0-9]* )
       ac_path_MAKE_found=:;;
  esac
}]
«k:AC_CACHE_CHECK»([for GNU Make], [ac_cv_path_MAKE],
  [ac_path_MAKE_found=false
   if test -n "$MAKE"; then
     emacs_check_gnu_make "$MAKE"
     ac_cv_path_MAKE=$MAKE
   else
     emacs_tried_make=false
     emacs_tried_gmake=false
     emacs_tried_gnumake=false
     «k:AC_PATH_PROGS_FEATURE_CHECK»([MAKE], [make gmake gnumake],
       [[emacs_check_gnu_make "$ac_path_MAKE"
	 if $ac_path_MAKE_found; then
	   «m:# »«x:Use the fully-qualified program name only if the basename
»	   «m:# »«x:would not resolve to it.
»	   if eval \$emacs_tried_$ac_prog; then
	     ac_cv_path_MAKE=$ac_path_MAKE
	   else
	     ac_cv_path_MAKE=$ac_prog
	   fi
	 fi
	 eval emacs_tried_$ac_prog=:]])
   fi])
$ac_path_MAKE_found || {
«k:AC_MSG_ERROR»([[Building Emacs requires GNU Make, at least version 3.81.
If you have it installed under another name, configure with 'MAKE=...'.
For example, run '$0 MAKE=gnu-make'.]])
}
MAKE=$ac_cv_path_MAKE
export MAKE

«m:dnl »«x:Fairly arbitrary, older versions might work too.
»«k:AM_INIT_AUTOMAKE»(1.11)

«m:dnl »«x:Canonicalize the configuration name.
»«k:AC_CANONICAL_HOST»

case $host in
 *-mingw*)

  if test -z "$host_alias"; then

      «m:# »«x:No --host argument was given to 'configure'; therefore $host
»      «m:# »«x:was set to a default value based on the build platform.  But
»      «m:# »«x:this default value may be wrong if we are building from a
»      «m:# »«x:64-bit MSYS[2] pre-configured to build 32-bit MinGW programs.
»      «m:# »«x:Therefore, we'll try to get the right host platform from the
»      «m:# »«x:compiler's target.
»
      «k:AC_MSG_CHECKING»([the compiler's target])
      if test -z "$CC"; then
	  cc=gcc
      else
	  cc=$CC
      fi
      cc_target=`$cc -v 2>&1 | sed -n 's/Target: //p'`
      case "$cc_target" in
          *-*) host=$cc_target
	      ;;
          "") «k:AC_MSG_ERROR»([Impossible to obtain $cc compiler target.
Please explicitly provide --host.])
              ;;
	  *) «k:AC_MSG_WARN»([Compiler reported non-standard target.
Defaulting to $host.])
              ;;
      esac
      «k:AC_MSG_RESULT»([$host])
  fi

  . $srcdir/nt/mingw-cfg.site

  case $srcdir in
    /* | ?:*)
      «m:# »«x:srcdir is an absolute path.  In this case, force the format
»      «m:# »«x:"/c/foo/bar", to simplify later conversions to native Windows
»      «m:# »«x:format ("c:/foo/bar").
»      srcdir=`cd "${srcdir}" && pwd -W`
      «m:# »«x:'eval' pacifies strict POSIX non-MinGW shells (Bug#18612).
»      eval 'srcdir="/${srcdir:0:1}${srcdir:2}"'
      ;;
  esac;;
esac

canonical=$host
configuration=${host_alias-${build_alias-$host}}

«m:dnl »«x:Support for --program-prefix, --program-suffix and
»«m:dnl »«x:--program-transform-name options
»«k:AC_ARG_PROGRAM»

«m:dnl »«x:It is important that variables on the RHS not be expanded here,
»«m:dnl »«x:hence the single quotes.  This is per the GNU coding standards, see
»«m:dnl »«x:(autoconf) Installation Directory Variables
»«m:dnl »«x:See also epaths.h below.
»lispdir='${datadir}/emacs/${version}/lisp'
standardlisppath='${lispdir}'
locallisppath='${datadir}/emacs/${version}/site-lisp:'\
'${datadir}/emacs/site-lisp'
lisppath='${locallisppath}:${standardlisppath}'
etcdir='${datadir}/emacs/${version}/etc'
archlibdir='${libexecdir}/emacs/${version}/${configuration}'
etcdocdir='${datadir}/emacs/${version}/etc'
gamedir='${localstatedir}/games/emacs'

«m:dnl »«x:Special option to disable the most of other options.
»«k:AC_ARG_WITH»(all,
[«k:AS_HELP_STRING»([--without-all],
		[omit almost all features and build
		small executable with minimal dependencies])],
  [with_features=$withval],
  [with_features=yes])

«m:dnl »«x:OPTION_DEFAULT_OFF(NAME, HELP-STRING)
»«m:dnl »«x:Create a new --with option that defaults to being disabled.
»«m:dnl »«x:NAME is the base name of the option.  The shell variable with_NAME
»«m:dnl   »«x:will be set to either the user's value (if the option is
»«m:dnl   »«x:specified; 'yes' for a plain --with-NAME) or to 'no' (if the
»«m:dnl   »«x:option is not specified).  Note that the shell variable name is
»«m:dnl   »«x:constructed as autoconf does, by replacing non-alphanumeric
»«m:dnl   »«x:characters with "_".
»«m:dnl »«x:HELP-STRING is the help text for the option.
»«k:AC_DEFUN»([OPTION_DEFAULT_OFF], [«x:dnl
»  «k:AC_ARG_WITH»([$1],[«k:AS_HELP_STRING»([--with-$1],[$2])],[],[«x:dnl
»    m4_bpatsubst([with_$1], [[^0-9a-z]], [_])=no])«x:dnl
»])«x:dnl
»
«m:dnl »«x:OPTION_DEFAULT_ON(NAME, HELP-STRING)
»«m:dnl »«x:Create a new --with option that defaults to $with_features.
»«m:dnl »«x:NAME is the base name of the option.  The shell variable with_NAME
»«m:dnl   »«x:will be set either to 'no' (for a plain --without-NAME) or to
»«m:dnl   »«x:'yes' (if the option is not specified).  Note that the shell
»«m:dnl   »«x:variable name is constructed as autoconf does, by replacing
»«m:dnl   »«x:non-alphanumeric characters with "_".
»«m:dnl »«x:HELP-STRING is the help text for the option.
»«k:AC_DEFUN»([OPTION_DEFAULT_ON], [«x:dnl
»  «k:AC_ARG_WITH»([$1],[«k:AS_HELP_STRING»([--without-$1],[$2])],[],[«x:dnl
»   m4_bpatsubst([with_$1], [[^0-9a-z]], [_])=$with_features])«x:dnl
»])«x:dnl
»
OPTION_DEFAULT_ON([pop],[don't support POP mail retrieval with movemail])
if test "$with_pop" = yes; then
   «k:AC_DEFINE»(«f:MAIL_USE_POP»)
fi
«k:AH_TEMPLATE»(«f:MAIL_USE_POP», [Define to support POP mail retrieval.])«x:dnl
»
OPTION_DEFAULT_OFF([kerberos],[support Kerberos-authenticated POP])
if test "$with_kerberos" != no; then
   «k:AC_DEFINE»(«f:KERBEROS»)
fi
«k:AH_TEMPLATE»(«f:KERBEROS»,
	    [Define to support Kerberos-authenticated POP mail retrieval.])«x:dnl
»
OPTION_DEFAULT_OFF([kerberos5],[support Kerberos version 5 authenticated POP])
if test "${with_kerberos5}" != no; then
  if test "${with_kerberos}" = no; then
    with_kerberos=yes
    «k:AC_DEFINE»(«f:KERBEROS»)
  fi
  «k:AC_DEFINE»(«f:KERBEROS5», 1, [Define to use Kerberos 5 instead of Kerberos 4.])
fi

OPTION_DEFAULT_OFF([hesiod],[support Hesiod to get the POP server host])
«m:dnl »«x:FIXME hesiod support may not be present, so it seems like an error
»«m:dnl »«x:to define, or at least use, this unconditionally.
»if test "$with_hesiod" != no; then
  «k:AC_DEFINE»(«f:HESIOD», 1, [Define to support using a Hesiod database to find the POP server.])
fi

OPTION_DEFAULT_OFF([mail-unlink],[unlink, rather than empty, mail spool after reading])
if test "$with_mail_unlink" != no; then
   «k:AC_DEFINE»(«f:MAIL_UNLINK_SPOOL», 1, [Define to unlink, rather than empty, mail spool after reading.])
fi

«k:AC_ARG_WITH»([mailhost],[«k:AS_HELP_STRING»([--with-mailhost=HOSTNAME],
    [string giving default POP mail host])],
    «k:AC_DEFINE_UNQUOTED»(«f:MAILHOST», ["$withval"], [String giving fallback POP mail host.]))

«k:AC_ARG_WITH»([sound],[«k:AS_HELP_STRING»([--with-sound=VALUE],
  [compile with sound support (VALUE one of: yes, alsa, oss, bsd-ossaudio, no;
default yes).  Only for GNU/Linux, FreeBSD, NetBSD, MinGW, Cygwin.])],
  [ case "${withval}" in
      yes|no|alsa|oss|bsd-ossaudio) val=$withval ;;
      *) «k:AC_MSG_ERROR»(['--with-sound=$withval' is invalid;
this option's value should be 'yes', 'no', 'alsa', 'oss', or 'bsd-ossaudio'.])
      ;;
    esac
    with_sound=$val
  ],
  [with_sound=$with_features])

«m:dnl »«x:FIXME currently it is not the last.
»«m:dnl »«x:This should be the last --with option, because --with-x is
»«m:dnl »«x:added later on when we find the file name of X, and it's best to
»«m:dnl »«x:keep them together visually.
»«k:AC_ARG_WITH»([x-toolkit],[«k:AS_HELP_STRING»([--with-x-toolkit=KIT],
 [use an X toolkit (KIT one of: yes or gtk, gtk2, gtk3, lucid or athena, motif, no)])],
[	  case "${withval}" in
	    y | ye | yes )	val=gtk ;;
	    n | no )		val=no  ;;
	    l | lu | luc | luci | lucid )	val=lucid ;;
	    a | at | ath | athe | athen | athena )	val=athena ;;
	    m | mo | mot | moti | motif )	val=motif ;;
	    g | gt | gtk  )	val=gtk ;;
	    gtk2  )	val=gtk2 ;;
	    gtk3  )	val=gtk3 ;;
	    * )
«k:AC_MSG_ERROR»(['--with-x-toolkit=$withval' is invalid;
this option's value should be 'yes', 'no', 'lucid', 'athena', 'motif', 'gtk',
'gtk2' or 'gtk3'.  'yes' and 'gtk' are synonyms.
'athena' and 'lucid' are synonyms.])
	    ;;
	  esac
	  with_x_toolkit=$val
])

OPTION_DEFAULT_OFF([wide-int], [prefer wide Emacs integers (typically 62-bit); allows buffer and string size up to 2GB on 32-bit hosts, at the cost of 10% to 30% slowdown of Lisp interpreter and larger memory footprint])
if test "$with_wide_int" = yes; then
  «k:AC_DEFINE»([«f:WIDE_EMACS_INT»], 1, [Use long long for EMACS_INT if available.])
fi

«m:dnl »«x:_ON results in a '--without' option in the --help output, so
»«m:dnl »«x:the help text should refer to "don't compile", etc.
»with_xpm_set=${with_xpm+set}
OPTION_DEFAULT_ON([xpm],[don't compile with XPM image support])
OPTION_DEFAULT_ON([jpeg],[don't compile with JPEG image support])
OPTION_DEFAULT_ON([tiff],[don't compile with TIFF image support])
OPTION_DEFAULT_ON([gif],[don't compile with GIF image support])
OPTION_DEFAULT_ON([png],[don't compile with PNG image support])
OPTION_DEFAULT_ON([rsvg],[don't compile with SVG image support])
OPTION_DEFAULT_OFF([cairo],[compile with Cairo drawing])
OPTION_DEFAULT_ON([xml2],[don't compile with XML parsing support])
OPTION_DEFAULT_ON([imagemagick],[don't compile with ImageMagick image support])

OPTION_DEFAULT_ON([xft],[don't use XFT for anti aliased fonts])
OPTION_DEFAULT_ON([libotf],[don't use libotf for OpenType font support])
OPTION_DEFAULT_ON([m17n-flt],[don't use m17n-flt for text shaping])

OPTION_DEFAULT_ON([toolkit-scroll-bars],[don't use Motif or Xaw3d scroll bars])
OPTION_DEFAULT_ON([xaw3d],[don't use Xaw3d])
OPTION_DEFAULT_ON([xim],[don't use X11 XIM])
«k:AC_ARG_WITH»([ns],[«k:AS_HELP_STRING»([--with-ns],
[use Nextstep (OS X Cocoa or GNUstep) windowing system.
On by default on Mac OS X.])],[],[with_ns=maybe])
OPTION_DEFAULT_OFF([w32], [use native MS Windows GUI in a Cygwin build])

OPTION_DEFAULT_ON([gpm],[don't use -lgpm for mouse support on a GNU/Linux console])
OPTION_DEFAULT_ON([dbus],[don't compile with D-Bus support])
OPTION_DEFAULT_ON([gconf],[don't compile with GConf support])
OPTION_DEFAULT_ON([gsettings],[don't compile with GSettings support])
OPTION_DEFAULT_ON([selinux],[don't compile with SELinux support])
OPTION_DEFAULT_ON([gnutls],[don't use -lgnutls for SSL/TLS support])
OPTION_DEFAULT_ON([zlib],[don't compile with zlib decompression support])
OPTION_DEFAULT_OFF([modules],[compile with dynamic modules support])

«k:AC_ARG_WITH»([file-notification],[«k:AS_HELP_STRING»([--with-file-notification=LIB],
 [use a file notification library (LIB one of: yes, gfile, inotify, w32, no)])],
 [ case "${withval}" in
    y | ye | yes )	val=yes ;;
    n | no )		val=no  ;;
    g | gf | gfi | gfil | gfile )	val=gfile ;;
    i | in | ino | inot | inoti | inotif | inotify )	val=inotify ;;
    w | w3 | w32 )	val=w32 ;;
    * ) «k:AC_MSG_ERROR»(['--with-file-notification=$withval' is invalid;
this option's value should be 'yes', 'no', 'gfile', 'inotify' or 'w32'.
'yes' is a synonym for 'w32' on MS-Windows, for 'no' on Nextstep,
otherwise for the first of 'inotify' or 'gfile' that is usable.])
    ;;
   esac
   with_file_notification=$val
 ],
 [with_file_notification=$with_features])

«x:## For the times when you want to build Emacs but don't have
## a suitable makeinfo, and can live without the manuals.
»«m:dnl »«x:http://lists.gnu.org/archive/html/emacs-devel/2008-04/msg01844.html
»OPTION_DEFAULT_ON([makeinfo],[don't require makeinfo for building manuals])

«x:## This might be a 'configure' arg.
»«k:AC_SUBST»([«f:ACLOCAL_PATH»])

«x:## Makefile.in needs the cache file name.
»«k:AC_SUBST»(«f:cache_file»)

«x:## This is an option because I do not know if all info/man support
## compressed files, nor how to test if they do so.
»OPTION_DEFAULT_ON([compress-install],
  [don't compress some files (.el, .info, etc.) when installing.  Equivalent to:
make GZIP_PROG= install])

«k:AC_ARG_WITH»(gameuser,«x:dnl
»[«k:AS_HELP_STRING»([--with-gameuser=USER_OR_GROUP],
		[user for shared game score files.
		An argument prefixed by ':' specifies a group instead.])])
gameuser=
gamegroup=
«m:# »«x:We don't test if we can actually chown/chgrp here, because configure
»«m:# »«x:may run without root privileges.  lib-src/Makefile.in will handle
»«m:# »«x:any errors due to missing user/group gracefully.
»case ${with_gameuser} in
  no) ;;
  "" | yes) gamegroup=games ;;
  :*) gamegroup=${with_gameuser«x:#:} ;;
»  *) gameuser=${with_gameuser} ;;
esac

«k:AC_ARG_WITH»([gnustep-conf],«x:dnl
»[«k:AS_HELP_STRING»([--with-gnustep-conf=FILENAME],
   [name of GNUstep configuration file to use on systems where the command
    'gnustep-config' does not work; default $GNUSTEP_CONFIG_FILE, or
    /etc/GNUstep/GNUstep.conf])])
test "X${with_gnustep_conf}" != X && test "${with_gnustep_conf}" != yes && \
  GNUSTEP_CONFIG_FILE="${with_gnustep_conf}"
test "X$GNUSTEP_CONFIG_FILE" = "X" && \
     GNUSTEP_CONFIG_FILE=/etc/GNUstep/GNUstep.conf

«k:AC_ARG_ENABLE»(ns-self-contained,
[«k:AS_HELP_STRING»([--disable-ns-self-contained],
                [disable self contained build under NeXTstep])],
   EN_NS_SELF_CONTAINED=$enableval,
   EN_NS_SELF_CONTAINED=yes)

locallisppathset=no
«k:AC_ARG_ENABLE»(locallisppath,
[«k:AS_HELP_STRING»([--enable-locallisppath=PATH],
                [directories Emacs should search for lisp files specific
		 to this site])],
if test "${enableval}" = "no"; then
  locallisppath=
elif test "${enableval}" != "yes"; then
  locallisppath=${enableval} locallisppathset=yes
fi)

«k:AC_ARG_ENABLE»(checking,
[«k:AS_HELP_STRING»([--enable-checking@<:@=LIST@:>@],
		[enable expensive run-time checks.  With LIST,
		 enable only specific categories of checks.
		 Categories are: all,yes,no.
		 Flags are: stringbytes, stringoverrun, stringfreelist,
		 xmallocoverrun, conslist, glyphs])],
[ac_checking_flags="${enableval}"],[])
IFS="${IFS= 	}"; ac_save_IFS="$IFS"; IFS="$IFS,"
for check in $ac_checking_flags
do
	case $check in
	«m:# »«x:these set all the flags to specific states
»	yes)		ac_enable_checking=1 ;;
	no)		ac_enable_checking= ;
			ac_gc_check_stringbytes= ;
	                ac_gc_check_string_overrun= ;
	                ac_gc_check_string_free_list= ;
	                ac_xmalloc_overrun= ;
	                ac_gc_check_cons_list= ;
			ac_glyphs_debug= ;;
	all)		ac_enable_checking=1 ;
			ac_gc_check_stringbytes=1 ;
	                ac_gc_check_string_overrun=1 ;
	                ac_gc_check_string_free_list=1 ;
	                ac_xmalloc_overrun=1 ;
	                ac_gc_check_cons_list=1 ;
			ac_glyphs_debug=1 ;;
	«m:# »«x:these enable particular checks
»	stringbytes)	ac_gc_check_stringbytes=1 ;;
	stringoverrun)	ac_gc_check_string_overrun=1 ;;
	stringfreelist) ac_gc_check_string_free_list=1 ;;
	xmallocoverrun)	ac_xmalloc_overrun=1 ;;
	conslist)	ac_gc_check_cons_list=1 ;;
	glyphs)		ac_glyphs_debug=1 ;;
	*)	«k:AC_MSG_ERROR»(unknown check category $check) ;;
	esac
done
IFS="$ac_save_IFS"

if test x$ac_enable_checking != x ; then
  «k:AC_DEFINE»(«f:ENABLE_CHECKING», 1,
[Define to 1 if expensive run-time data type and consistency checks are enabled.])
fi
if test x$ac_gc_check_stringbytes != x ; then
  «k:AC_DEFINE»(«f:GC_CHECK_STRING_BYTES», 1,
[Define this temporarily to hunt a bug.  If defined, the size of
   strings is redundantly recorded in sdata structures so that it can
   be compared to the sizes recorded in Lisp strings.])
fi
if test x$ac_gc_check_string_overrun != x ; then
  «k:AC_DEFINE»(«f:GC_CHECK_STRING_OVERRUN», 1,
[Define this to check for short string overrun.])
fi
if test x$ac_gc_check_string_free_list != x ; then
  «k:AC_DEFINE»(«f:GC_CHECK_STRING_FREE_LIST», 1,
[Define this to check the string free list.])
fi
if test x$ac_xmalloc_overrun != x ; then
  «k:AC_DEFINE»(«f:XMALLOC_OVERRUN_CHECK», 1,
[Define this to check for malloc buffer overrun.])
fi
if test x$ac_gc_check_cons_list != x ; then
  «k:AC_DEFINE»(«f:GC_CHECK_CONS_LIST», 1,
[Define this to check for errors in cons list.])
fi
if test x$ac_glyphs_debug != x ; then
  «k:AC_DEFINE»(«f:GLYPH_DEBUG», 1,
[Define this to enable glyphs debugging code.])
fi

«k:AC_ARG_ENABLE»(check-lisp-object-type,
[«k:AS_HELP_STRING»([--enable-check-lisp-object-type],
                [enable compile time checks for the Lisp_Object data type.
		This is useful for development for catching certain types of bugs.])],
if test "${enableval}" != "no"; then
   «k:AC_DEFINE»(«f:CHECK_LISP_OBJECT_TYPE», 1,
   [Define this to enable compile time checks for the Lisp_Object data type.])
fi)


«m:dnl »«x:The name of this option is unfortunate.  It predates, and has no
»«m:dnl »«x:relation to, the "sampling-based elisp profiler" added in 24.3.
»«m:dnl »«x:Actually, it stops it working.
»«m:dnl »«x:http://lists.gnu.org/archive/html/emacs-devel/2012-11/msg00393.html
»«k:AC_ARG_ENABLE»(profiling,
[«k:AS_HELP_STRING»([--enable-profiling],
		[build emacs with low-level, gprof profiling support.
                Mainly useful for debugging Emacs itself.  May not work on
                all platforms.  Stops profiler.el working.])],
[ac_enable_profiling="${enableval}"],[])
if test x$ac_enable_profiling != x ; then
   PROFILING_CFLAGS="-DPROFILING=1 -pg"
else
   PROFILING_CFLAGS=
fi
«k:AC_SUBST»(«f:PROFILING_CFLAGS»)

«k:AC_ARG_ENABLE»(autodepend,
[«k:AS_HELP_STRING»([--enable-autodepend],
		[automatically generate dependencies to .h-files.
		 Requires gcc, enabled if found.])],
[ac_enable_autodepend="${enableval}"],[ac_enable_autodepend=yes])

«k:AC_ARG_ENABLE»(gtk-deprecation-warnings,
[«k:AS_HELP_STRING»([--enable-gtk-deprecation-warnings],
		[Show Gtk+/Gdk deprecation warnings for Gtk+ >= 3.0])],
[ac_enable_gtk_deprecation_warnings="${enableval}"],[])

«m:dnl »«x:This used to use changequote, but, apart from 'changequote is evil'
»«m:dnl »«x:per the autoconf manual, we can speed up autoconf somewhat by quoting
»«m:dnl »«x:the great gob of text.  Thus it's not processed for possible expansion.
»«m:dnl »«x:Just make sure the brackets remain balanced.
dnl
»«m:dnl »«x:Since Emacs can't find matching pairs of quotes, boundaries are
»«m:dnl »«x:indicated by comments.
»«m:dnl »«x:quotation begins
»[

«x:### If you add support for a new configuration, add code to this
### switch statement to recognize your configuration name and select
### the appropriate opsys.
»
«x:### As far as handling version numbers on operating systems is
### concerned, make sure things will fail in a fixable way.  If
### /etc/MACHINES doesn't say anything about version numbers, be
### prepared to handle anything reasonably.  If version numbers
### matter, be sure /etc/MACHINES says something about it.
»
opsys='' unported=no
case "${canonical}" in

  «x:## GNU/Linux and similar ports
»  *-*-linux* )
    opsys=gnu-linux
  ;;

  «x:## FreeBSD ports
»  *-*-freebsd* )
    opsys=freebsd
  ;;

  «x:## DragonFly ports
»  *-*-dragonfly* )
    opsys=dragonfly
  ;;

  «x:## FreeBSD kernel + glibc based userland
»  *-*-kfreebsd*gnu* )
    opsys=gnu-kfreebsd
  ;;

  «x:## NetBSD ports
»  *-*-netbsd* )
    opsys=netbsd
  ;;

  «x:## OpenBSD ports
»  *-*-openbsd* | *-*-mirbsd* )
    opsys=openbsd
  ;;

  «x:## Apple Darwin / Mac OS X
»  *-apple-darwin* )
    case "${canonical}" in
      *-apple-darwin[0-9].*) unported=yes ;;
      i[3456]86-* | x86_64-* )  ;;
      * )            unported=yes ;;
    esac
    opsys=darwin
    «x:## Use fink packages if available.
»    «x:## FIXME find a better way to do this: http://debbugs.gnu.org/11507
##    if test -d /sw/include && test -d /sw/lib; then
##      GCC_TEST_OPTIONS="-I/sw/include -L/sw/lib"
##      NON_GCC_TEST_OPTIONS=${GCC_TEST_OPTIONS}
##    fi
»  ;;

  «x:## Chromium Native Client
»  *-nacl )
    opsys=nacl
  ;;

  «x:## Cygwin ports
»  *-*-cygwin )
    opsys=cygwin
  ;;

  «x:## HP 9000 series 700 and 800, running HP/UX
»  hppa*-hp-hpux10.2* )
    opsys=hpux10-20
  ;;
  hppa*-hp-hpux1[1-9]* )
    opsys=hpux11
    CFLAGS="-D_INCLUDE__STDC_A1_SOURCE $CFLAGS"
  ;;

  «x:## IBM machines
»  rs6000-ibm-aix4.[23]* )
    opsys=aix4-2
  ;;
  powerpc-ibm-aix4.[23]*  )
    opsys=aix4-2
  ;;
  rs6000-ibm-aix[56]* )
    opsys=aix4-2
  ;;
  powerpc-ibm-aix[5-9]* | powerpc-ibm-aix[1-9][0-9]* )
    opsys=aix4-2
  ;;

  «x:## Silicon Graphics machines
»  «x:## Iris 4D
»  mips-sgi-irix6.5 )
    opsys=irix6-5
    «m:# »«x:Without defining _LANGUAGE_C, things get masked out in the headers
»    «m:# »«x:so that, for instance, grepping for 'free' in stdlib.h fails and
»    «m:# »«x:AC_HEADER_STD_C fails.   (MIPSPro 7.2.1.2m compilers, Irix 6.5.3m).
»    NON_GCC_TEST_OPTIONS="-D_LANGUAGE_C"
  ;;

  «x:## Suns
»  *-sun-solaris* \
    | i[3456]86-*-solaris2* | i[3456]86-*-sunos5* \
    | x86_64-*-solaris2*    | x86_64-*-sunos5*)
    case "${canonical}" in
      i[3456]86-*-* )   ;;
      amd64-*-*|x86_64-*-*) ;;
      sparc* )		;;
      * )		unported=yes ;;
    esac
    case "${canonical}" in
      *-sunos5.[1-9][0-9]* | *-solaris2.[1-9][0-9]* )
		opsys=sol2-10
		emacs_check_sunpro_c=yes
		;;
      *-sunos5.[1-5]* | *-solaris2.[1-5]* ) unported=yes ;;
      «x:## Note that Emacs 23.1's NEWS said the following would be dropped.
»      *-sunos5.6* | *-solaris2.6* )
		opsys=sol2-6
		RANLIB="ar -ts"
		;;
      «x:## 5.7 EOL Aug 2008, 5.8 EOL Mar 2012.
»      *-sunos5.[7-9]* | *-solaris2.[7-9]* )
		opsys=sol2-6
		emacs_check_sunpro_c=yes
		;;
    esac
    «x:## Watch out for a compiler that we know will not work.
»    case "${canonical}" in
     *-solaris* | *-sunos5* )
		if [ "x$CC" = x/usr/ucb/cc ]; then
		  «x:## /usr/ucb/cc doesn't work;
»		  «x:## we should find some other compiler that does work.
»		  unset CC
		fi
		;;
      *) ;;
    esac
  ;;

  «x:## Intel 386 machines where we don't care about the manufacturer.
»  i[3456]86-*-* )
    case "${canonical}" in
      *-darwin* )               opsys=darwin ;;
      *-mingw* )
		opsys=mingw32
		«m:# »«x:MinGW overrides and adds some system headers in nt/inc.
»		GCC_TEST_OPTIONS="-I $srcdir/nt/inc"
		;;
      *-sysv4.2uw* )		opsys=unixware ;;
      *-sysv5uw* )		opsys=unixware ;;
      *-sysv5OpenUNIX* )	opsys=unixware ;;
      «x:## Otherwise, we'll fall through to the generic opsys code at the bottom.
»    esac
  ;;

  «m:# »«x:MinGW64
»  x86_64-*-* )
    case "${canonical}" in
      *-mingw* )
		opsys=mingw32
		«m:# »«x:MinGW overrides and adds some system headers in nt/inc.
»		GCC_TEST_OPTIONS="-I $srcdir/nt/inc"
		;;
      «x:## Otherwise, we'll fall through to the generic opsys code at the bottom.
»    esac
  ;;

  * )
    unported=yes
  ;;
esac

«x:### If the code above didn't choose an operating system, just choose
### an operating system based on the configuration name.  You really
### only want to use this when you have no idea what the right
### operating system is; if you know what operating systems a machine
### runs, it's cleaner to make it explicit in the case statement
### above.
»if test x"${opsys}" = x; then
  case "${canonical}" in
    *-gnu* )				opsys=gnu ;;
    * )
      unported=yes
    ;;
  esac
fi

]
«m:dnl »«x:quotation ends
»
if test $unported = yes; then
  «k:AC_MSG_ERROR»([Emacs does not support '${canonical}' systems.
If you think it should, please send a report to ${PACKAGE_BUGREPORT}.
Check 'etc/MACHINES' for recognized configuration names.])
fi

«x:#### Choose a compiler.
»
«m:dnl »«x:Don't bother to test for C89.
»«k:AC_DEFUN»([_AC_PROG_CC_C89], [$2])

«m:dnl »«x:Sets GCC=yes if using gcc.
»«k:AC_PROG_CC»([gcc cc cl clang "$XCRUN gcc" "$XCRUN clang"])
if test -n "$XCRUN"; then
  «k:AC_CHECK_PROGS»(AR, [ar "$XCRUN ar"])
  test -n "$AR" && export AR
fi

«m:dnl »«x:Emacs needs C99 or later.
»gl_PROG_CC_C99

«k:AM_PROG_CC_C_O»

if test x$GCC = xyes; then
  test "x$GCC_TEST_OPTIONS" != x && CC="$CC $GCC_TEST_OPTIONS"
else
  test "x$NON_GCC_TEST_OPTIONS" != x && CC="$CC $NON_GCC_TEST_OPTIONS"
fi

«m:dnl »«x:This is used in lib/Makefile.am to use nt/gnulib.mk, the
»«m:dnl »«x:alternative to lib/gnulib.mk, so as to avoid generating header files
»«m:dnl »«x:that clash with MinGW.
»«k:AM_CONDITIONAL»([BUILDING_FOR_WINDOWSNT], [test "x$opsys" = "xmingw32"])

«m:# »«x:Avoid gnulib's tests for -lcrypto, so that there's no static dependency on it.
»«k:AC_DEFUN»([gl_CRYPTO_CHECK])
«m:# »«x:Avoid gnulib's tests for HAVE_WORKING_O_NOATIME and HAVE_WORKING_O_NOFOLLOW,
»«m:# »«x:as we don't use them.
»«k:AC_DEFUN»([gl_FCNTL_O_FLAGS])
«m:# »«x:Avoid gnulib's test for pthread_sigmask.
»funcs=
for func in $ac_func_list; do
  test $func = pthread_sigmask || «k:AS_VAR_APPEND»([funcs], [" $func"])
done
ac_func_list=$funcs
«m:# »«x:Use the system putenv even if it lacks GNU features, as we don't need them,
»«m:# »«x:and the gnulib replacement runs afoul of a FreeBSD 10.1 bug; see Bug#19874.
»«k:AC_CHECK_FUNCS_ONCE»([putenv])
«k:AC_DEFUN»([gl_FUNC_PUTENV],
  [test "$ac_cv_func_putenv" = yes || REPLACE_PUTENV=1])

«m:# »«x:Initialize gnulib right after choosing the compiler.
»«m:dnl »«x:Amongst other things, this sets AR and ARFLAGS.
»gl_EARLY

if test "$ac_test_CFLAGS" != set; then
  «m:# »«x:It's helpful to have C macros available to GDB, so prefer -g3 to -g
»  «m:# »«x:if -g3 works and the user does not specify CFLAGS.
»  «m:# »«x:This test must follow gl_EARLY; otherwise AC_LINK_IFELSE complains.
»  case $CFLAGS in
    '-g')
      emacs_g3_CFLAGS='-g3';;
    '-g -O2')
      emacs_g3_CFLAGS='-g3 -O2';;
    *)
      emacs_g3_CFLAGS='';;
  esac
  if test -n "$emacs_g3_CFLAGS"; then
    emacs_save_CFLAGS=$CFLAGS
    CFLAGS=$emacs_g3_CFLAGS
    «k:AC_CACHE_CHECK»([whether $CC accepts $emacs_g3_CFLAGS],
      [emacs_cv_prog_cc_g3],
      [«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»()],
	 [emacs_cv_prog_cc_g3=yes],
	 [emacs_cv_prog_cc_g3=no])])
    if test $emacs_cv_prog_cc_g3 != yes; then
      CFLAGS=$emacs_save_CFLAGS
    fi
    if test $opsys = mingw32; then
      CFLAGS="$CFLAGS -gdwarf-2"
    fi
  fi

  case $CFLAGS in
    *-O*) ;;
    *)
      «m:# »«x:No optimization flag was inferred for this non-GCC compiler.
»      «m:# »«x:Try -O.  This is needed for xlc on AIX; see Bug#14258.
»      emacs_save_CFLAGS=$CFLAGS
      test -z "$CFLAGS" || CFLAGS="$CFLAGS "
      CFLAGS=${CFLAGS}-O
      «k:AC_CACHE_CHECK»([whether $CC accepts -O],
        [emacs_cv_prog_cc_o],
	[«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»()],
	   [emacs_cv_prog_cc_o=yes],
	   [emacs_cv_prog_cc_o=no])])
      if test $emacs_cv_prog_cc_o != yes; then
	CFLAGS=$emacs_save_CFLAGS
      fi ;;
  esac
fi

«k:AC_ARG_ENABLE»([gcc-warnings],
  [«k:AS_HELP_STRING»([--enable-gcc-warnings],
                  [turn on lots of GCC warnings/errors. This is intended for
		   developers, and may generate false alarms when used
		   with older or non-GNU development tools.])],
  [case $enableval in
     yes|no) ;;
     *)      «k:AC_MSG_ERROR»([bad value $enableval for gcc-warnings option]) ;;
   esac
   gl_gcc_warnings=$enableval],
  [gl_gcc_warnings=no]
)

«m:# »«x:clang is unduly picky about some things.
»«k:AC_CACHE_CHECK»([whether the compiler is clang], [emacs_cv_clang],
  [«k:AC_COMPILE_IFELSE»(
     [«k:AC_LANG_PROGRAM»([[
	  «x:#ifndef __clang__
»	    error "not clang";
	  «x:#endif
»        ]])],
     [emacs_cv_clang=yes],
     [emacs_cv_clang=no])])

«m:# »«x:When compiling with GCC, prefer -isystem to -I when including system
»«m:# »«x:include files, to avoid generating useless diagnostics for the files.
»if test "$gl_gcc_warnings" != yes; then
  isystem='-I'
  if test "$emacs_cv_clang" = yes
  then
     «m:# »«x:Turn off some warnings if supported.
»     gl_WARN_ADD([-Wno-switch])
     gl_WARN_ADD([-Wno-tautological-constant-out-of-range-compare])
     gl_WARN_ADD([-Wno-pointer-sign])
     gl_WARN_ADD([-Wno-string-plus-int])
     gl_WARN_ADD([-Wno-unknown-attributes])
  fi
else
  isystem='-isystem '

  «m:# »«x:This, $nw, is the list of warnings we disable.
»  nw=

  case $with_x_toolkit in
    lucid | athena | motif)
       «m:# »«x:Old toolkits mishandle 'const'.
»       nw="$nw -Wwrite-strings"
       ;;
    *)
       gl_WARN_ADD([-Werror], [WERROR_CFLAGS])
       ;;
  esac
  «k:AC_SUBST»([«f:WERROR_CFLAGS»])

  nw="$nw -Wsystem-headers"         «m:# »«x:Don't let system headers trigger warnings
»  nw="$nw -Woverlength-strings"     «m:# »«x:Not a problem these days
»  nw="$nw -Wformat-nonliteral"      «m:# »«x:we do this a lot
»  nw="$nw -Wvla"                    «m:# »«x:Emacs uses <vla.h>.
»  nw="$nw -Wswitch-default"         «m:# »«x:Too many warnings for now
»  nw="$nw -Winline"                 «m:# »«x:OK to ignore 'inline'
»  nw="$nw -Wjump-misses-init"       «m:# »«x:We sometimes safely jump over init.
»  nw="$nw -Wstrict-overflow"        «m:# »«x:OK to optimize assuming that
»                                    «m:# »«x:signed overflow has undefined behavior
»  nw="$nw -Wsync-nand"              «m:# »«x:irrelevant here, and provokes ObjC warning
»  nw="$nw -Wunsafe-loop-optimizations" «m:# »«x:OK to suppress unsafe optimizations
»  nw="$nw -Wbad-function-cast"      «m:# »«x:These casts are no worse than others.
»
  «m:# »«x:Emacs doesn't care about shadowing; see
»  «m:# »«x:<http://lists.gnu.org/archive/html/emacs-diffs/2011-11/msg00265.html>.
»  nw="$nw -Wshadow"

  «m:# »«x:Emacs's use of alloca inhibits protecting the stack.
»  nw="$nw -Wstack-protector"

  «m:# »«x:Emacs's use of partly-const functions such as Fgnutls_available_p
»  «m:# »«x:make this option problematic.
»  nw="$nw -Wsuggest-attribute=const"

  «m:# »«x:Emacs's use of partly-pure functions such as CHECK_TYPE make this
»  «m:# »«x:option problematic.
»  nw="$nw -Wsuggest-attribute=pure"

  «m:# »«x:This part is merely for shortening the command line,
»  «m:# »«x:since -Wall implies -Wswitch.
»  nw="$nw -Wswitch"

  «m:# »«x:This part is merely for shortening the command line,
»  «m:# »«x:since -Wno-FOO needs to be added below regardless.
»  nw="$nw -Wmissing-field-initializers"
  nw="$nw -Wtype-limits"
  nw="$nw -Wunused-parameter"

  if test $emacs_cv_clang = yes; then
    nw="$nw -Wcast-align"
  fi

  gl_MANYWARN_ALL_GCC([ws])
  gl_MANYWARN_COMPLEMENT([ws], [$ws], [$nw])
  for w in $ws; do
    gl_WARN_ADD([$w])
  done
  gl_WARN_ADD([-Wredundant-decls])     «m:# »«x:Prefer this, as we don't use Bison.
»  gl_WARN_ADD([-Wno-missing-field-initializers]) «m:# »«x:We need this one
»  gl_WARN_ADD([-Wno-sign-compare])     «m:# »«x:Too many warnings for now
»  gl_WARN_ADD([-Wno-type-limits])      «m:# »«x:Too many warnings for now
»  gl_WARN_ADD([-Wno-unused-parameter]) «m:# »«x:Too many warnings for now
»  gl_WARN_ADD([-Wno-format-nonliteral])

  «m:# »«x:More things that clang is unduly picky about.
»  if test $emacs_cv_clang = yes; then
    gl_WARN_ADD([-Wno-format-extra-args])
    gl_WARN_ADD([-Wno-tautological-constant-out-of-range-compare])
    gl_WARN_ADD([-Wno-unused-command-line-argument])
    gl_WARN_ADD([-Wno-unused-value])
  fi

  «k:AC_DEFINE»([«f:lint»], [1], [Define to 1 if the compiler is checking for lint.])
  «k:AC_DEFINE»([«f:GNULIB_PORTCHECK»], [1], [enable some gnulib portability checks])
  «k:AH_VERBATIM»([GNULIB_PORTCHECK_FORTIFY_SOURCE],
  [/* Enable compile-time and run-time bounds-checking, and some warnings,
      without upsetting glibc 2.15+. */
   «x:#if (defined GNULIB_PORTCHECK && !defined _FORTIFY_SOURCE \
»        && defined __OPTIMIZE__ && __OPTIMIZE__)
   «m:# »«x:define _FORTIFY_SOURCE 2
»   «x:#endif
»  ])

  «m:# »«x:We use a slightly smaller set of warning options for lib/.
»  «m:# »«x:Remove the following and save the result in GNULIB_WARN_CFLAGS.
»  nw=
  nw="$nw -Wunused-macros"

  gl_MANYWARN_COMPLEMENT([GNULIB_WARN_CFLAGS], [$WARN_CFLAGS], [$nw])
  «k:AC_SUBST»([«f:GNULIB_WARN_CFLAGS»])
fi

edit_cflags="
  s,///*,/,g
  s/^/ /
  s/ -I/ $isystem/g
  s/^ //
"

«k:AC_ARG_ENABLE»(link-time-optimization,
[«k:AS_HELP_STRING»([--enable-link-time-optimization],
                [build emacs with link-time optimization.
		 This requires GCC 4.5.0 or later, or clang.
		 (Note that clang support is experimental - see INSTALL.)
		 It also makes Emacs harder to debug, and when we tried it
		 with GCC 4.9.0 x86-64 it made Emacs slower, so it's not
		 recommended for typical use.])],
if test "${enableval}" != "no"; then
   ac_lto_supported=no
   if test $emacs_cv_clang = yes; then
      «k:AC_MSG_CHECKING»([whether link-time optimization is supported by clang])
      GOLD_PLUGIN=`$CC -print-file-name=LLVMgold.so 2>/dev/null`
      if test -x "$GOLD_PLUGIN"; then
	 LTO="-flto"
      fi
   elif test x$GCC = xyes; then
      «k:AC_MSG_CHECKING»([whether link-time optimization is supported by gcc])
      CPUS=`getconf _NPROCESSORS_ONLN 2>/dev/null`
      if test x$CPUS != x; then
	 LTO="-flto=$CPUS"
      else
	 LTO="-flto"
      fi
   else
      «k:AC_MSG_ERROR»([Link-time optimization is not supported with your compiler.])
   fi
   if test -z "$LTO"; then
      ac_lto_supported=no
   else
      old_CFLAGS=$CFLAGS
      CFLAGS="$CFLAGS $LTO"
      «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[]], [[]])],
         [ac_lto_supported=yes], [ac_lto_supported=no])
         CFLAGS="$old_CFLAGS"
   fi
   «k:AC_MSG_RESULT»([$ac_lto_supported])
   if test "$ac_lto_supported" = "yes"; then
      CFLAGS="$CFLAGS $LTO"
      if test x$emacs_cv_clang = xyes; then
	 «k:AC_MSG_WARN»([Please read INSTALL before using link-time optimization with clang])
	 «m:# »«x:WARNING: 'ar --plugin ...' doesn't work without
»	 «m:# »«x:command, so plugin name is appended to ARFLAGS.
»	 ARFLAGS="cru --plugin $GOLD_PLUGIN"
	 RANLIB="$RANLIB --plugin $GOLD_PLUGIN"
      else
        «x:dnl The following is needed for GCC 4.9.0.  The GCC 4.9.0 release notes
»        «x:dnl suggest that instead of -ffat-lto-objects we should use gcc-ar and
»        «x:dnl gcc-ranlib in place of ar and ranlib, but gcc-ar makes /usr/bin/ar
»        «x:dnl dump core on Fedora 20, so play it safe for now.
»        gl_COMPILER_OPTION_IF([-ffat-lto-objects],
          [CFLAGS="$CFLAGS -ffat-lto-objects"])
      fi
   fi
fi)

«m:dnl »«x:Prefer silent make output.  For verbose output, use
»«m:dnl »«x:'configure --disable-silent-rules' or 'make V=1' .
»«k:AM_SILENT_RULES»([yes])
«m:dnl »«x:Port to Automake 1.11.
»«m:dnl »«x:This section can be removed once we assume Automake 1.14 or later.
»: ${«k:AM_V=$AM_DEFAULT_VERBOSITY»}
: ${«k:AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY»}
«k:AC_SUBST»([«k:AM_V»])
«k:AM_SUBST_NOTMAKE»([«k:AM_V»])
«k:AC_SUBST»([«k:AM_DEFAULT_V»])
«k:AM_SUBST_NOTMAKE»([«k:AM_DEFAULT_V»])
«k:AC_SUBST»([«k:AM_DEFAULT_VERBOSITY»])

«m:dnl »«x:Some other nice autoconf tests.
»«m:dnl »«x:These are commented out, since gl_EARLY and/or Autoconf already does them.
»«m:dnl »«x:AC_PROG_INSTALL
»«m:dnl »«x:AC_PROG_MKDIR_P
»«m:dnl »«x:if test "x$RANLIB" = x; then
»«m:dnl   »«x:AC_PROG_RANLIB
»«m:dnl »«x:fi
»

«m:dnl »«x:Sadly, AC_PROG_LN_S is too restrictive.  It also tests whether links
»«m:dnl »«x:can be made to directories.  This is not relevant for our usage, and
»«m:dnl »«x:excludes some cases that work fine for us.  Eg MS Windows or files
»«m:dnl »«x:hosted on AFS, both examples where simple links work, but links to
»«m:dnl »«x:directories fail.  We use a cut-down version instead.
»«m:dnl »«x:AC_PROG_LN_S
»
«k:AC_MSG_CHECKING»([whether ln -s works for files in the same directory])
rm -f conf$$ conf$$.file

LN_S_FILEONLY='cp -p'

«m:dnl »«x:On MinGW, ensure we will call the MSYS /bin/ln.exe, not some
»«m:dnl »«x:random program in the current directory.
»if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    if test "$opsys" = "mingw32"; then
      LN_S_FILEONLY='/bin/ln -s'
    else
      LN_S_FILEONLY='ln -s'
    fi
  elif ln conf$$.file conf$$ 2>/dev/null; then
    if test "$opsys" = "mingw32"; then
      LN_S_FILEONLY=/bin/ln
    else
      LN_S_FILEONLY=ln
    fi
  fi
fi

rm -f conf$$ conf$$.file

if test "$LN_S_FILEONLY" = "ln -s"; then
   «k:AC_MSG_RESULT»([yes])
else
   «k:AC_MSG_RESULT»([no, using $LN_S_FILEONLY])
fi

«k:AC_SUBST»(«f:LN_S_FILEONLY»)


«m:dnl »«x:AC_PROG_LN_S sets LN_S to 'cp -pR' for MinGW, on the premise that 'ln'
»«m:dnl »«x:doesn't support links to directories, as in "ln file dir".  But that
»«m:dnl »«x:use is non-portable, and OTOH MinGW wants to use hard links for Emacs
»«m:dnl »«x:executables at "make install" time.
»«m:dnl »«x:See http://lists.gnu.org/archive/html/emacs-devel/2013-04/msg00475.html
»«m:dnl »«x:for more details.
»if test "$opsys" = "mingw32"; then
  LN_S="/bin/ln"
fi

«m:dnl »«x:On some Debian versions, "install-info" prints irritating messages
»«m:dnl »«x:"This is not dpkg install-info anymore, but GNU install-info"
»«m:dnl »«x:if called via an absolute file name.
»«m:dnl »«x:Use the entirely-identical-but-quieter ginstall-info instead if present.
»«m:dnl »«x:Sadly some people may have an old ginstall-info installed on
»«m:dnl »«x:non-Debian systems, so we can't use this.
»«m:dnl »«x:AC_PATH_PROGS(INSTALL_INFO, [ginstall-info install-info], :,
»«m:dnl   »«x:$PATH$PATH_SEPARATOR/usr/sbin$PATH_SEPARATOR/sbin)
»
«k:AC_PATH_PROG»(INSTALL_INFO, install-info, :,
  $PATH$PATH_SEPARATOR/usr/sbin$PATH_SEPARATOR/sbin)
«m:dnl »«x:Don't use GZIP, which is used by gzip for additional parameters.
»«k:AC_PATH_PROG»(GZIP_PROG, gzip)

test $with_compress_install != yes && test -n "$GZIP_PROG" && \
   GZIP_PROG=" «m:# »«x:$GZIP_PROG # (disabled by configure --without-compress-install)"
»
if test $opsys = gnu-linux; then
  «k:AC_PATH_PROG»(PAXCTL, paxctl,,
    [$PATH$PATH_SEPARATOR/sbin$PATH_SEPARATOR/usr/sbin])
  if test "X$PAXCTL" != X; then
    «k:AC_MSG_CHECKING»([whether binaries have a PT_PAX_FLAGS header])
    «k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([], [])],
      [if $PAXCTL -v conftest$EXEEXT >/dev/null 2>&1; then «k:AC_MSG_RESULT»(yes)
      else «k:AC_MSG_RESULT»(no); PAXCTL=""; fi])
  fi

  if test "${SETFATTR+set}" != set; then
    «k:AC_CACHE_CHECK»([for setfattr],
      [emacs_cv_prog_setfattr],
      [touch conftest.tmp
       if (setfattr -n user.pax.flags conftest.tmp) >/dev/null 2>&1; then
	 emacs_cv_prog_setfattr=yes
       else
	 emacs_cv_prog_setfattr=no
       fi])
    if test "$emacs_cv_prog_setfattr" = yes; then
      SETFATTR=setfattr
    else
      SETFATTR=
    fi
    rm -f conftest.tmp
    «k:AC_SUBST»([«f:SETFATTR»])
  fi
fi

«x:## Need makeinfo >= 4.7 (?) to build the manuals.
»if test "$MAKEINFO" != "no"; then
  if test "$MAKEINFO" = "${am_missing_run}makeinfo"; then
    MAKEINFO=makeinfo
  fi
  case `($MAKEINFO --version) 2>/dev/null` in
    *' (GNU texinfo) '4.[[7-9]]* | \
    *' (GNU texinfo) '4.[[1-9][0-9]]* | \
    *' (GNU texinfo) '[[5-9]]* | \
    *' (GNU texinfo) '[[1-9][0-9]]* ) ;;
    *) MAKEINFO=no;;
  esac
fi

«x:## Makeinfo is unusual.  For a released Emacs, the manuals are
## pre-built, and not deleted by the normal clean rules.  makeinfo is
## therefore in the category of "special tools" not normally required, which
## configure does not have to check for (eg autoconf itself).
## In a repository checkout on the other hand, the manuals are not included.
## So makeinfo is a requirement to build from the repository, and configure
## should test for it as it does for any other build requirement.
## We use the presence of $srcdir/info/emacs to distinguish a release,
## with pre-built manuals, from a repository checkout.
»HAVE_MAKEINFO=yes

if test "$MAKEINFO" = "no"; then
  MAKEINFO=makeinfo
  if test "x${with_makeinfo}" = "xno"; then
    HAVE_MAKEINFO=no
  elif test ! -e "$srcdir/info/emacs" && test ! -e "$srcdir/info/emacs.info"; then
    «k:AC_MSG_ERROR»( [You do not seem to have makeinfo >= 4.7, and your
source tree does not seem to have pre-built manuals in the 'info' directory.
Either install a suitable version of makeinfo, or re-run configure
with the '--without-makeinfo' option to build without the manuals.] )
  fi
fi
«k:AC_SUBST»(«f:HAVE_MAKEINFO»)

if test $opsys = mingw32; then
   DOCMISC_W32=efaq-w32
else
   DOCMISC_W32=
fi
«k:AC_SUBST»(«f:DOCMISC_W32»)

«m:dnl »«x:Add our options to ac_link now, after it is set up.
»
if test x$GCC = xyes; then
  test "x$GCC_LINK_TEST_OPTIONS" != x && \
    ac_link="$ac_link $GCC_LINK_TEST_OPTIONS"
else
  test "x$NON_GCC_LINK_TEST_OPTIONS" != x && \
    ac_link="$ac_link $NON_GCC_LINK_TEST_OPTIONS"
fi

«m:dnl »«x:We need -znocombreloc if we're using a relatively recent GNU ld.
»«m:dnl »«x:If we can link with the flag, it shouldn't do any harm anyhow.
»«m:dnl »«x:(Don't use '-z nocombreloc' as -z takes no arg on Irix.)
»«m:dnl »«x:Treat GCC specially since it just gives a non-fatal 'unrecognized option'
»«m:dnl »«x:if not built to support GNU ld.
»
«m:dnl »«x:For a long time, -znocombreloc was added to LDFLAGS rather than
»«m:dnl »«x:LD_SWITCH_SYSTEM_TEMACS.  That is:
»«m:dnl »«x:* inappropriate, as LDFLAGS is a user option but this is essential.
»«m:dnl   »«x:Eg "make LDFLAGS=... all" could run into problems,
»«m:dnl   »«x:http://bugs.debian.org/684788
»«m:dnl »«x:* unnecessary, since temacs is the only thing that actually needs it.
»«m:dnl   »«x:Indeed this is where it was originally, prior to:
»«m:dnl   »«x:http://lists.gnu.org/archive/html/emacs-pretest-bug/2004-03/msg00170.html
»late_LDFLAGS="$LDFLAGS"
if test x$GCC = xyes; then
  LDFLAGS_NOCOMBRELOC="-Wl,-znocombreloc"
else
  LDFLAGS_NOCOMBRELOC="-znocombreloc"
fi

LDFLAGS="$LDFLAGS $LDFLAGS_NOCOMBRELOC"

«k:AC_MSG_CHECKING»([for -znocombreloc])
«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([], [])],
  [«k:AC_MSG_RESULT»(yes)],
  LDFLAGS_NOCOMBRELOC=
  [«k:AC_MSG_RESULT»(no)])

LDFLAGS="$late_LDFLAGS"

«k:AC_CACHE_CHECK»([whether addresses are sanitized],
  [emacs_cv_sanitize_address],
  [«k:AC_COMPILE_IFELSE»(
     [«k:AC_LANG_PROGRAM»(
	[[«x:#ifndef __has_feature
»	  «x:#define __has_feature(f) 0
»	  «x:#endif
»	  «x:#if defined __SANITIZE_ADDRESS__ || __has_feature (address_sanitizer)
»	  «x:#else
»	   error "Addresses are not sanitized.";
	  «x:#endif
»	]])],
     [emacs_cv_sanitize_address=yes],
     [emacs_cv_sanitize_address=no])])

«m:dnl »«x:The function dump-emacs will not be defined and temacs will do
»«m:dnl »«x:(load "loadup") automatically unless told otherwise.
»test "x$CANNOT_DUMP" = "x" && CANNOT_DUMP=no
case "$opsys" in
  nacl) CANNOT_DUMP=yes ;;
esac

if test "$CANNOT_DUMP" = "yes"; then
  «k:AC_DEFINE»(«f:CANNOT_DUMP», 1, [Define if Emacs cannot be dumped on your system.])
elif test "$emacs_cv_sanitize_address" = yes; then
  «k:AC_MSG_WARN»([[Addresses are sanitized; suggest CANNOT_DUMP=yes]])
fi

«k:AC_SUBST»(«f:CANNOT_DUMP»)


UNEXEC_OBJ=unexelf.o
case "$opsys" in
  «m:# »«x:MSDOS uses unexcoff.o
»  aix4-2)
   UNEXEC_OBJ=unexaix.o
   ;;
  cygwin)
   UNEXEC_OBJ=unexcw.o
   ;;
  darwin)
   UNEXEC_OBJ=unexmacosx.o
   ;;
  hpux10-20 | hpux11)
   UNEXEC_OBJ=unexhp9k800.o
   ;;
  mingw32)
   UNEXEC_OBJ=unexw32.o
   ;;
  sol2-10)
   «m:# »«x:Use the Solaris dldump() function, called from unexsol.c, to dump
»   «m:# »«x:emacs, instead of the generic ELF dump code found in unexelf.c.
»   «m:# »«x:The resulting binary has a complete symbol table, and is better
»   «m:# »«x:for debugging and other observability tools (debuggers, pstack, etc).
»   «x:#
»   «m:# »«x:If you encounter a problem using dldump(), please consider sending
»   «m:# »«x:a message to the OpenSolaris tools-linking mailing list:
»   «m:#      »«x:http://mail.opensolaris.org/mailman/listinfo/tools-linking
»   «x:#
»   «m:# »«x:It is likely that dldump() works with older Solaris too, but this has
»   «m:# »«x:not been tested, so for now this change is for Solaris 10 or newer.
»   UNEXEC_OBJ=unexsol.o
   ;;
esac

LD_SWITCH_SYSTEM=
case "$opsys" in
  freebsd|dragonfly)
   «x:## Let 'ld' find image libs and similar things in /usr/local/lib.
»   «x:## The system compiler, GCC, has apparently been modified to not
»   «x:## look there, contrary to what a stock GCC would do.
### It's not our place to do this.  See bug#10313#17.
###   LD_SWITCH_SYSTEM=-L/usr/local/lib
»      :
   ;;

  gnu-linux)
   «x:## cpp test was "ifdef __mips__", but presumably this is equivalent...
»   case $host_cpu in mips*) LD_SWITCH_SYSTEM="-G 0";; esac
   ;;

  netbsd)
«x:### It's not our place to do this.  See bug#10313#17.
###   LD_SWITCH_SYSTEM="-Wl,-rpath,/usr/pkg/lib -L/usr/pkg/lib -Wl,-rpath,/usr/local/lib -L/usr/local/lib"
»      :
   ;;

  openbsd)
   «x:## Han Boetes <han@boetes.org> says this is necessary,
»   «x:## otherwise Emacs dumps core on elf systems.
»   LD_SWITCH_SYSTEM="-Z"
   ;;
esac
«k:AC_SUBST»(«f:LD_SWITCH_SYSTEM»)

ac_link="$ac_link $LD_SWITCH_SYSTEM"

«x:## This setting of LD_SWITCH_SYSTEM references LD_SWITCH_X_SITE_RPATH,
## which has not been defined yet.  When this was handled with cpp,
## it was expanded to null when configure sourced the s/*.h file.
## Thus LD_SWITCH_SYSTEM had different values in configure and the Makefiles.
## FIXME it would be cleaner to put this in LD_SWITCH_SYSTEM_TEMACS
## (or somesuch), but because it is supposed to go at the _front_
## of LD_SWITCH_SYSTEM, we cannot do that in exactly the same way.
## Compare with the gnu-linux case below, which added to the end
## of LD_SWITCH_SYSTEM, and so can instead go at the front of
## LD_SWITCH_SYSTEM_TEMACS.
»case "$opsys" in
  netbsd|openbsd)
   LD_SWITCH_SYSTEM="\$(LD_SWITCH_X_SITE_RPATH) $LD_SWITCH_SYSTEM" ;;
esac


C_SWITCH_MACHINE=
case $canonical in
 alpha*)
  «k:AC_CHECK_DECL»([__ELF__])
  if test "$ac_cv_have_decl___ELF__" = "yes"; then
    «x:## With ELF, make sure that all common symbols get allocated to in the
»    «x:## data section.  Otherwise, the dump of temacs may miss variables in
»    «x:## the shared library that have been initialized.  For example, with
»    «x:## GNU libc, __malloc_initialized would normally be resolved to the
»    «x:## shared library's .bss section, which is fatal.
»    if test "x$GCC" = "xyes"; then
      C_SWITCH_MACHINE="-fno-common"
    else
      «k:AC_MSG_ERROR»([Non-GCC compilers are not supported.])
    fi
  else
      «x:dnl This was the unexalpha.c case.  Removed in 24.1, 2010-07-24,
»      «x:dnl albeit under the mistaken assumption that said file
»      «x:dnl was no longer used.
»      «k:AC_MSG_ERROR»([Non-ELF systems are not supported since Emacs 24.1.])
  fi
  ;;
esac
«k:AC_SUBST»(«f:C_SWITCH_MACHINE»)

«k:AC_SUBST»(«f:UNEXEC_OBJ»)

C_SWITCH_SYSTEM=
«x:## Some programs in src produce warnings saying certain subprograms
## are too complex and need a MAXMEM value greater than 2000 for
## additional optimization.  --nils@exp-math.uni-essen.de
»test "$opsys" = "aix4.2" && test "x$GCC" != "xyes" && \
  C_SWITCH_SYSTEM="-ma -qmaxmem=4000"
if test "$opsys" = "mingw32"; then
  case "$canonical" in
    x86_64-*-mingw*) C_SWITCH_SYSTEM="-mtune=generic" ;;
    *) C_SWITCH_SYSTEM="-mtune=pentium4" ;;
  esac
fi
«x:## gnu-linux might need -D_BSD_SOURCE on old libc5 systems.
## It is redundant in glibc2, since we define _GNU_SOURCE.
»«k:AC_SUBST»(«f:C_SWITCH_SYSTEM»)


LIBS_SYSTEM=
case "$opsys" in
  «x:## IBM's X11R5 uses -lIM and -liconv in AIX 3.2.2.
»  aix4-2) LIBS_SYSTEM="-lrts -lIM -liconv" ;;

  freebsd|dragonfly) LIBS_SYSTEM="-lutil" ;;

  hpux*) LIBS_SYSTEM="-l:libdld.sl" ;;

  sol2*) LIBS_SYSTEM="-lsocket -lnsl" ;;

  «x:## Motif needs -lgen.
»  unixware) LIBS_SYSTEM="-lsocket -lnsl -lelf -lgen" ;;
esac

«k:AC_SUBST»(«f:LIBS_SYSTEM»)

«x:### Make sure subsequent tests use flags consistent with the build flags.
»
if test x"${OVERRIDE_CPPFLAGS}" != x; then
  CPPFLAGS="${OVERRIDE_CPPFLAGS}"
else
  CPPFLAGS="$C_SWITCH_SYSTEM $C_SWITCH_MACHINE $CPPFLAGS"
fi

«m:# »«x:Suppress obsolescent Autoconf test for size_t; Emacs assumes C99 or better.
»«k:AC_DEFUN»([«k:AC_TYPE_SIZE_T»])
«m:# »«x:Likewise for obsolescent test for uid_t, gid_t; Emacs assumes them.
»«k:AC_DEFUN»([«k:AC_TYPE_UID_T»])

«m:# »«x:sqrt and other floating-point functions such as fmod and frexp
»«m:# »«x:are found in -lm on many systems.
»OLD_LIBS=$LIBS
«k:AC_SEARCH_LIBS»([sqrt], [m])
if test "X$LIBS" = "X$OLD_LIBS"; then
  LIB_MATH=
else
  LIB_MATH=$ac_cv_search_sqrt
fi
LIBS=$OLD_LIBS

«m:dnl »«x:Current possibilities handled by sed (aix4-2 -> aix,
»«m:dnl »«x:gnu-linux -> gnu/linux, etc.):
»«m:dnl »«x:gnu, gnu/linux, gnu/kfreebsd, aix, cygwin, darwin, hpux, irix.
»«m:dnl »«x:And special cases: berkeley-unix, usg-unix-v, ms-dos, windows-nt.
»SYSTEM_TYPE=`echo $opsys | sed -e 's/[[0-9]].*//' -e 's|-|/|'`

case $opsys in
  cygwin )
    LIB_MATH=
    ;;
  darwin )
    «x:## Adding -lm confuses the dynamic linker, so omit it.
»    LIB_MATH=
    ;;
  freebsd | dragonfly )
    SYSTEM_TYPE=berkeley-unix
    ;;
  gnu-linux | gnu-kfreebsd )
    ;;
  hpux10-20 | hpux11 )
    ;;
  mingw32 )
    LIB_MATH=
    SYSTEM_TYPE=windows-nt
    ;;
  «x:dnl NB this may be adjusted below.
»  netbsd | openbsd )
    SYSTEM_TYPE=berkeley-unix
    ;;

  sol2* | unixware )
    SYSTEM_TYPE=usg-unix-v
    ;;

esac

«k:AC_SUBST»(«f:LIB_MATH»)
«k:AC_DEFINE_UNQUOTED»(«f:SYSTEM_TYPE», "$SYSTEM_TYPE",
  [The type of system you are compiling for; sets 'system-type'.])


pre_PKG_CONFIG_CFLAGS=$CFLAGS
pre_PKG_CONFIG_LIBS=$LIBS

PKG_PROG_PKG_CONFIG(0.9.0)

«m:dnl »«x:EMACS_CHECK_MODULES(GSTUFF, gtk+-2.0 >= 1.3 glib = 1.3.4)
»«m:dnl »«x:acts like PKG_CHECK_MODULES(GSTUFF, gtk+-2.0 >= 1.3 glib = 1.3.4,
»«m:dnl »«x:HAVE_GSTUFF=yes, HAVE_GSTUFF=no) -- see pkg-config man page --
»«m:dnl »«x:except that it postprocesses CFLAGS as needed for --enable-gcc-warnings.
»«m:dnl »«x:EMACS_CHECK_MODULES accepts optional 3rd and 4th arguments that
»«m:dnl »«x:can take the place of the default HAVE_GSTUFF=yes and HAVE_GSTUFF=no
»«m:dnl »«x:actions.
»«k:AC_DEFUN»([EMACS_CHECK_MODULES],
  [PKG_CHECK_MODULES([$1], [$2],
     [$1_CFLAGS=`«k:AS_ECHO»(["$$1_CFLAGS"]) | sed -e "$edit_cflags"`
      m4_default([$3], [HAVE_$1=yes])],
     [m4_default([$4], [HAVE_$1=no])])])

HAVE_SOUND=no
if test "${with_sound}" != "no"; then
  «m:# »«x:Sound support for GNU/Linux, the free BSDs, MinGW, and Cygwin.
»  «k:AC_CHECK_HEADERS»([machine/soundcard.h sys/soundcard.h soundcard.h mmsystem.h],
    have_sound_header=yes, [], [
    «x:#ifdef __MINGW32__
»    «x:#define WIN32_LEAN_AND_MEAN
»    «x:#include <windows.h>
»    «x:#endif
»    ])
  test "${with_sound}" = "oss" && test "${have_sound_header}" != "yes" && \
    «k:AC_MSG_ERROR»([OSS sound support requested but not found.])

  if test "${with_sound}" = "bsd-ossaudio" || test "${with_sound}" = "yes"; then
    «m:# »«x:Emulation library used on NetBSD.
»    «k:AC_CHECK_LIB»(ossaudio, _oss_ioctl, LIBSOUND=-lossaudio, LIBSOUND=)
    test "${with_sound}" = "bsd-ossaudio" && test -z "$LIBSOUND" && \
      «k:AC_MSG_ERROR»([bsd-ossaudio sound support requested but not found.])
    «x:dnl FIXME?  If we did find ossaudio, should we set with_sound=bsd-ossaudio?
»    «x:dnl Traditionally, we go on to check for alsa too.  Does that make sense?
»  fi
  «k:AC_SUBST»(«f:LIBSOUND»)

  if test "${with_sound}" = "alsa" || test "${with_sound}" = "yes"; then
    ALSA_REQUIRED=1.0.0
    ALSA_MODULES="alsa >= $ALSA_REQUIRED"
    EMACS_CHECK_MODULES([ALSA], [$ALSA_MODULES])
    if test $HAVE_ALSA = yes; then
      SAVE_CFLAGS="$CFLAGS"
      SAVE_LIBS="$LIBS"
      CFLAGS="$ALSA_CFLAGS $CFLAGS"
      LIBS="$ALSA_LIBS $LIBS"
      «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <asoundlib.h>]], [[snd_lib_error_set_handler (0);]])],
»                      emacs_alsa_normal=yes,
	            emacs_alsa_normal=no)
      if test "$emacs_alsa_normal" != yes; then
        «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <alsa/asoundlib.h>]],
»                       [[snd_lib_error_set_handler (0);]])],
                       emacs_alsa_subdir=yes,
	             emacs_alsa_subdir=no)
        if test "$emacs_alsa_subdir" != yes; then
          «k:AC_MSG_ERROR»([pkg-config found alsa, but it does not compile.  See config.log for error messages.])
        fi
        ALSA_CFLAGS="$ALSA_CFLAGS -DALSA_SUBDIR_INCLUDE"
      fi

      CFLAGS="$SAVE_CFLAGS"
      LIBS="$SAVE_LIBS"
      LIBSOUND="$LIBSOUND $ALSA_LIBS"
      CFLAGS_SOUND="$CFLAGS_SOUND $ALSA_CFLAGS"
      «k:AC_DEFINE»(«f:HAVE_ALSA», 1, [Define to 1 if ALSA is available.])
    elif test "${with_sound}" = "alsa"; then
      «k:AC_MSG_ERROR»([ALSA sound support requested but not found.])
    fi
  fi                            «x:dnl with_sound = alsa|yes
»
  «x:dnl Define HAVE_SOUND if we have sound support.  We know it works and
»  «x:dnl compiles only on the specified platforms.  For others, it
»  «x:dnl probably doesn't make sense to try.
»  «x:dnl FIXME So surely we should bypass this whole section if not using
»  «x:dnl one of these platforms?
»  if test x$have_sound_header = xyes || test $HAVE_ALSA = yes; then
     case "$opsys" in
       «x:dnl defined __FreeBSD__ || defined __NetBSD__ || defined __linux__
»       «x:dnl Adjust the --with-sound help text if you change this.
»       gnu-linux|freebsd|netbsd|mingw32|cygwin)
         «k:AC_DEFINE»(«f:HAVE_SOUND», 1, [Define to 1 if you have sound support.])
         HAVE_SOUND=yes
         ;;
     esac
  fi

  «k:AC_SUBST»(«f:CFLAGS_SOUND»)
fi

«m:dnl »«x:checks for header files
»«k:AC_CHECK_HEADERS_ONCE»(
  sys/systeminfo.h
  sys/sysinfo.h
  coff.h pty.h
  sys/resource.h
  sys/utsname.h pwd.h utmp.h util.h)

«k:AC_MSG_CHECKING»(if personality LINUX32 can be set)
«k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <sys/personality.h>]], [[personality (PER_LINUX32)]])],
»               emacs_cv_personality_linux32=yes,
	       emacs_cv_personality_linux32=no)
«k:AC_MSG_RESULT»($emacs_cv_personality_linux32)

if test $emacs_cv_personality_linux32 = yes; then
  «k:AC_DEFINE»(«f:HAVE_PERSONALITY_LINUX32», 1,
            [Define to 1 if personality LINUX32 can be set.])
fi

«m:# »«x:Note that Solaris has sys/sysinfo.h which defines struct
»«m:# »«x:sysinfo as well.  To make sure that we're using GNU/Linux
»«m:# »«x:sysinfo, we explicitly set one of its fields.
»if test "$ac_cv_header_sys_sysinfo_h" = yes; then
  «k:AC_MSG_CHECKING»([if Linux sysinfo may be used])
  «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <sys/sysinfo.h>]],
»                                     [[struct sysinfo si;
                                       si.totalram = 0;
                                       sysinfo (&si)]])],
    emacs_cv_linux_sysinfo=yes, emacs_cv_linux_sysinfo=no)
  «k:AC_MSG_RESULT»($emacs_cv_linux_sysinfo)
  if test $emacs_cv_linux_sysinfo = yes; then
    «k:AC_DEFINE»([«f:HAVE_LINUX_SYSINFO»], 1, [Define to 1 if you have Linux sysinfo function.])
    «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <sys/sysinfo.h>]],
»                                       [[struct sysinfo si; return si.mem_unit]])],
      «k:AC_DEFINE»(«f:LINUX_SYSINFO_UNIT», 1,
                [Define to 1 if Linux sysinfo sizes are in multiples of mem_unit bytes.]))
  fi
fi

«m:dnl »«x:On Solaris 8 there's a compilation warning for term.h because
»«m:dnl »«x:it doesn't define 'bool'.
»«k:AC_CHECK_HEADERS»(term.h, , , -)
«k:AC_HEADER_TIME»
«k:AC_CHECK_DECLS»([sys_siglist], [], [], [[«x:#include <signal.h>
»			              ]])
if test $ac_cv_have_decl_sys_siglist != yes; then
  «m:# »«x:For Tru64, at least:
»  «k:AC_CHECK_DECLS»([__sys_siglist], [], [], [[«x:#include <signal.h>
»			                  ]])
fi
«k:AC_HEADER_SYS_WAIT»

«k:AC_CHECK_HEADERS_ONCE»(sys/socket.h)
«k:AC_CHECK_HEADERS»(net/if.h, , , [«k:AC_INCLUDES_DEFAULT»
«x:#if HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif])
»«k:AC_CHECK_HEADERS»(ifaddrs.h, , , [«k:AC_INCLUDES_DEFAULT»
«x:#if HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif])
»«k:AC_CHECK_HEADERS»(net/if_dl.h, , , [«k:AC_INCLUDES_DEFAULT»
«x:#if HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif])
»
«m:dnl »«x:checks for structure members
»«k:AC_CHECK_MEMBERS»([struct ifreq.ifr_flags, struct ifreq.ifr_hwaddr,
		  struct ifreq.ifr_netmask, struct ifreq.ifr_broadaddr,
		  struct ifreq.ifr_addr,
		  struct ifreq.ifr_addr.sa_len], , ,
		 [«k:AC_INCLUDES_DEFAULT»
«x:#if HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#if HAVE_NET_IF_H
#include <net/if.h>
#endif])
»
«m:dnl »«x:Check for endianness.
»«m:dnl »«x:AC_C_BIGENDIAN is done by gnulib.
»
«m:dnl »«x:check for Make feature
»
AUTO_DEPEND=no
«m:dnl »«x:check if we have GCC and autodepend is on.
»if test "$GCC" = yes && test "$ac_enable_autodepend" = yes; then
   «k:AC_MSG_CHECKING»([whether gcc understands -MMD -MF])
   SAVE_CFLAGS="$CFLAGS"
   CFLAGS="$CFLAGS -MMD -MF deps.d -MP"
   «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[]], [[]])], , ac_enable_autodepend=no)
   CFLAGS="$SAVE_CFLAGS"
   test -f deps.d || ac_enable_autodepend=no
   rm -rf deps.d
   «k:AC_MSG_RESULT»([$ac_enable_autodepend])
   if test $ac_enable_autodepend = yes; then
      AUTO_DEPEND=yes
   fi
fi
«k:AC_SUBST»(«f:AUTO_DEPEND»)

«m:dnl »«x:checks for operating system services
»«k:AC_SYS_LONG_FILE_NAMES»

«x:#### Choose a window system.
»
«x:## We leave window_system equal to none if
## we end up building without one.  Any new window system should
## set window_system to an appropriate value and add objects to
## window-system-specific substs.
»
window_system=none
«k:AC_PATH_X»
if test "$no_x" != yes; then
  window_system=x11
fi

LD_SWITCH_X_SITE_RPATH=
if test "${x_libraries}" != NONE; then
  if test -n "${x_libraries}"; then
    LD_SWITCH_X_SITE=-L`«k:AS_ECHO»(["$x_libraries"]) | sed -e 's/:/ -L/g'`
    LD_SWITCH_X_SITE_RPATH=-Wl,-rpath,`
      «k:AS_ECHO»(["$x_libraries"]) | sed -e 's/:/ -Wl,-rpath,/g'
    `
  fi
  x_default_search_path=""
  x_search_path=${x_libraries}
  if test -z "${x_search_path}"; then
    x_search_path=/usr/lib
  fi
  for x_library in `«k:AS_ECHO»(["$x_search_path:"]) | \
		    sed -e "s/:/ /g" -e p -e "s:/lib[[^ /]]* :/share :g"`; do
    x_search_path="\
${x_library}/X11/%L/%T/%N%C%S:\
${x_library}/X11/%l/%T/%N%C%S:\
${x_library}/X11/%T/%N%C%S:\
${x_library}/X11/%L/%T/%N%S:\
${x_library}/X11/%l/%T/%N%S:\
${x_library}/X11/%T/%N%S"
    if test x"${x_default_search_path}" = x; then
      x_default_search_path=${x_search_path}
    else
      x_default_search_path="${x_search_path}:${x_default_search_path}"
    fi
  done
fi
«k:AC_SUBST»(«f:LD_SWITCH_X_SITE_RPATH»)

if test "${x_includes}" != NONE && test -n "${x_includes}"; then
  C_SWITCH_X_SITE=$isystem`«k:AS_ECHO»(["$x_includes"]) | sed -e "s/:/ $isystem/g"`
fi

if test x"${x_includes}" = x; then
  bitmapdir=/usr/include/X11/bitmaps
else
  «m:# »«x:accumulate include directories that have X11 bitmap subdirectories
»  bmd_acc=
  for bmd in `«k:AS_ECHO»(["$x_includes"]) | sed -e 's/:/ /g'`; do
    if test -d "${bmd}/X11/bitmaps"; then
      bmd_acc="${bmd_acc}:${bmd}/X11/bitmaps"
    fi
    if test -d "${bmd}/bitmaps"; then
      bmd_acc="${bmd_acc}:${bmd}/bitmaps"
    fi
  done
  bitmapdir=${bmd_acc«x:#:}
»fi

test "${with_ns}" = maybe && test "${opsys}" != darwin && with_ns=no
HAVE_NS=no
NS_GNUSTEP_CONFIG=no
NS_IMPL_COCOA=no
NS_IMPL_GNUSTEP=no
tmp_CPPFLAGS="$CPPFLAGS"
tmp_CFLAGS="$CFLAGS"
CPPFLAGS="$CPPFLAGS -x objective-c"
CFLAGS="$CFLAGS -x objective-c"
GNU_OBJC_CFLAGS=
LIBS_GNUSTEP=
if test "${with_ns}" != no; then
  if test "${opsys}" = darwin; then
     NS_IMPL_COCOA=yes
     ns_appdir=`pwd`/nextstep/Emacs.app
     ns_appbindir=${ns_appdir}/Contents/MacOS
     ns_appresdir=${ns_appdir}/Contents/Resources
     ns_appsrc=Cocoa/Emacs.base
     ns_fontfile=macfont.o
  elif flags=$( (gnustep-config --objc-flags) 2>/dev/null); then
     NS_IMPL_GNUSTEP=yes
     NS_GNUSTEP_CONFIG=yes
     GNU_OBJC_CFLAGS=$flags
     LIBS_GNUSTEP=$(gnustep-config --gui-libs) || exit
  elif test -f $GNUSTEP_CONFIG_FILE; then
     NS_IMPL_GNUSTEP=yes
     «x:dnl FIXME sourcing this several times in subshells seems inefficient.
»     GNUSTEP_SYSTEM_HEADERS=$(
       . $GNUSTEP_CONFIG_FILE
       «k:AS_ECHO»(["$GNUSTEP_SYSTEM_HEADERS"])
     )
     GNUSTEP_SYSTEM_LIBRARIES=$(
       . $GNUSTEP_CONFIG_FILE
       «k:AS_ECHO»(["$GNUSTEP_SYSTEM_LIBRARIES"])
     )
     «x:dnl I seemed to need these as well with GNUstep-startup 0.25.
»     GNUSTEP_LOCAL_HEADERS=$(
       . $GNUSTEP_CONFIG_FILE
       «k:AS_ECHO»(["$GNUSTEP_LOCAL_HEADERS"])
     )
     GNUSTEP_LOCAL_LIBRARIES=$(
       . $GNUSTEP_CONFIG_FILE
       «k:AS_ECHO»(["$GNUSTEP_LOCAL_LIBRARIES"])
     )
     test "x${GNUSTEP_LOCAL_HEADERS}" != "x" && \
       GNUSTEP_LOCAL_HEADERS="-I${GNUSTEP_LOCAL_HEADERS}"
     test "x${GNUSTEP_LOCAL_LIBRARIES}" != "x" && \
       GNUSTEP_LOCAL_LIBRARIES="-L${GNUSTEP_LOCAL_LIBRARIES}"
     CPPFLAGS="$CPPFLAGS -I${GNUSTEP_SYSTEM_HEADERS} ${GNUSTEP_LOCAL_HEADERS}"
     CFLAGS="$CFLAGS -I${GNUSTEP_SYSTEM_HEADERS} ${GNUSTEP_LOCAL_HEADERS}"
     LDFLAGS="$LDFLAGS -L${GNUSTEP_SYSTEM_LIBRARIES} ${GNUSTEP_LOCAL_LIBRARIES}"
     LIBS_GNUSTEP="-lgnustep-gui -lgnustep-base -lobjc -lpthread"
     «x:dnl GNUstep defines BASE_NATIVE_OBJC_EXCEPTIONS to 0 or 1.
»     «x:dnl If they had chosen to either define it or not, we could have
»     «x:dnl just used AC_CHECK_DECL here.
»     «k:AC_CACHE_CHECK»(if GNUstep defines BASE_NATIVE_OBJC_EXCEPTIONS,
       emacs_cv_objc_exceptions,
«k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <GNUstepBase/GSConfig.h>]],
»[[«x:#if defined BASE_NATIVE_OBJC_EXCEPTIONS && BASE_NATIVE_OBJC_EXCEPTIONS > 0
»1;
«x:#else
»fail;
«x:#endif]])], emacs_cv_objc_exceptions=yes, emacs_cv_objc_exceptions=no ) )
»     if test $emacs_cv_objc_exceptions = yes; then
       «x:dnl _NATIVE_OBJC_EXCEPTIONS is used by the GNUstep headers.
»       «k:AC_DEFINE»(«f:_NATIVE_OBJC_EXCEPTIONS», 1,
         [Define if GNUstep uses ObjC exceptions.])
       GNU_OBJC_CFLAGS="-fobjc-exceptions"
     fi
  fi
  if test $NS_IMPL_GNUSTEP = yes; then
     ns_appdir=`pwd`/nextstep/Emacs.app
     ns_appbindir=${ns_appdir}
     ns_appresdir=${ns_appdir}/Resources
     ns_appsrc=GNUstep/Emacs.base
     ns_fontfile=nsfont.o
  fi

  «x:dnl This is only used while we test the NS headers, it gets reset below.
»  CPPFLAGS="$CPPFLAGS $GNU_OBJC_CFLAGS"
  CFLAGS="$CFLAGS $GNU_OBJC_CFLAGS"

  «k:AC_CHECK_HEADER»([AppKit/AppKit.h], [HAVE_NS=yes],
		  [«k:AC_MSG_ERROR»([The include files (AppKit/AppKit.h etc) that
are required for a Nextstep build are missing or cannot be compiled.
Either fix this, or re-configure with the option '--without-ns'.])])

  macfont_file=""
  if test "${NS_IMPL_COCOA}" = "yes"; then
    «k:AC_MSG_CHECKING»([for OSX 10.6 or newer])
    «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([«x:#include <AppKit/AppKit.h>],
»                                     [
«x:#ifdef MAC_OS_X_VERSION_MAX_ALLOWED
#if MAC_OS_X_VERSION_MAX_ALLOWED >= 1060
» ; /* OK */
«x:#else
» error "OSX 10.6 or newer required";
«x:#endif
#endif
»		    ])],
		    ns_osx_have_106=yes,
		    ns_osx_have_106=no)
    «k:AC_MSG_RESULT»([$ns_osx_have_106])

    if test $ns_osx_have_106 = no; then
       «k:AC_MSG_ERROR»([OSX 10.6 or newer is required]);
    fi
  fi
fi

«k:AC_SUBST»(«f:LIBS_GNUSTEP»)

INSTALL_ARCH_INDEP_EXTRA=install-etc
ns_self_contained=no
NS_OBJ=
NS_OBJC_OBJ=
if test "${HAVE_NS}" = yes; then
  if test "$with_toolkit_scroll_bars" = "no"; then
    «k:AC_MSG_ERROR»([Non-toolkit scroll bars are not implemented for Nextstep.])
  fi

  window_system=nextstep
  «m:# »«x:set up packaging dirs
»  if test "${EN_NS_SELF_CONTAINED}" = yes; then
     ns_self_contained=yes
     prefix=${ns_appresdir}
     exec_prefix=${ns_appbindir}
     «x:dnl This one isn't really used, only archlibdir is.
»     libexecdir="\${ns_appbindir}/libexec"
     archlibdir="\${ns_appbindir}/libexec"
     etcdocdir="\${ns_appresdir}/etc"
     etcdir="\${ns_appresdir}/etc"
     «x:dnl FIXME maybe set datarootdir instead.
»     «x:dnl That would also get applications, icons, man.
»     infodir="\${ns_appresdir}/info"
     mandir="\${ns_appresdir}/man"
     lispdir="\${ns_appresdir}/lisp"
     test "$locallisppathset" = no && locallisppath=""
     INSTALL_ARCH_INDEP_EXTRA=
  fi

  NS_OBJC_OBJ="nsterm.o nsfns.o nsmenu.o nsselect.o nsimage.o $ns_fontfile"
fi
CFLAGS="$tmp_CFLAGS"
CPPFLAGS="$tmp_CPPFLAGS"
«k:AC_SUBST»(«f:INSTALL_ARCH_INDEP_EXTRA»)
«k:AC_SUBST»(«f:ns_self_contained»)
«k:AC_SUBST»(«f:NS_OBJ»)
«k:AC_SUBST»(«f:NS_OBJC_OBJ»)

HAVE_W32=no
W32_OBJ=
W32_LIBS=
EMACSRES=
CLIENTRES=
CLIENTW=
W32_RES_LINK=
EMACS_MANIFEST=
UPDATE_MANIFEST=
if test "${with_w32}" != no; then
  case "${opsys}" in
    cygwin)
      «k:AC_CHECK_HEADER»([windows.h], [HAVE_W32=yes],
             [«k:AC_MSG_ERROR»(['--with-w32' was specified, but windows.h
                   cannot be found.])])
    ;;
    mingw32)
    «x:## Using --with-w32 with MinGW is a no-op, but we allow it.
»    ;;
    *)
      «k:AC_MSG_ERROR»([Using w32 with an autotools build is only supported for Cygwin and MinGW32.])
    ;;
  esac
fi

if test "${opsys}" = "mingw32"; then
  «k:AC_MSG_CHECKING»([whether Windows API headers are recent enough])
  «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[
     «x:#include <windows.h>
»     «x:#include <usp10.h>]],
»   [[PIMAGE_NT_HEADERS pHeader;
     PIMAGE_SECTION_HEADER pSection = IMAGE_FIRST_SECTION(pHeader)]])],
   [emacs_cv_w32api=yes
    HAVE_W32=yes],
   emacs_cv_w32api=no)
  «k:AC_MSG_RESULT»($emacs_cv_w32api)
  if test "${emacs_cv_w32api}" = "no"; then
    «k:AC_MSG_ERROR»([the Windows API headers are too old to support this build.])
  fi
fi

FIRSTFILE_OBJ=
NTDIR=
LIBS_ECLIENT=
LIB_WSOCK32=
NTLIB=
CM_OBJ="cm.o"
XARGS_LIMIT=
if test "${HAVE_W32}" = "yes"; then
  «k:AC_DEFINE»(«f:HAVE_NTGUI», 1, [Define to use native MS Windows GUI.])
  if test "$with_toolkit_scroll_bars" = "no"; then
    «k:AC_MSG_ERROR»([Non-toolkit scroll bars are not implemented for w32 build.])
  fi
  «k:AC_CHECK_TOOL»(WINDRES, [windres],
                [«k:AC_MSG_ERROR»([No resource compiler found.])])
  W32_OBJ="w32fns.o w32menu.o w32reg.o w32font.o w32term.o"
  W32_OBJ="$W32_OBJ w32xfns.o w32select.o w32uniscribe.o"
  EMACSRES="emacs.res"
  case "$canonical" in
    x86_64-*-*) EMACS_MANIFEST="emacs-x64.manifest" ;;
    *) EMACS_MANIFEST="emacs-x86.manifest" ;;
  esac
  «x:dnl Construct something of the form "24,4,0,0" with 4 components.
»  comma_version=`echo "${PACKAGE_VERSION}.0.0" | sed -e 's/\./,/g' -e 's/^\([[^,]]*,[[^,]]*,[[^,]]*,[[^,]]*\).*/\1/'`

  comma_space_version=`echo "$comma_version" | sed 's/,/, /g'`
  «k:AC_SUBST»(«f:comma_version»)
  «k:AC_SUBST»(«f:comma_space_version»)
  «k:AC_CONFIG_FILES»([nt/emacs.rc nt/emacsclient.rc])
  if test "${opsys}" = "cygwin"; then
    W32_LIBS="$W32_LIBS -lkernel32 -luser32 -lgdi32 -lole32 -lcomdlg32"
    W32_LIBS="$W32_LIBS -lusp10 -lcomctl32 -lwinspool"
    «m:# »«x:Tell the linker that emacs.res is an object (which we compile from
»    «m:# »«x:the rc file), not a linker script.
»    W32_RES_LINK="-Wl,emacs.res"
  else
    UPDATE_MANIFEST=update-game-score.exe.manifest
    W32_OBJ="$W32_OBJ w32.o w32console.o w32heap.o w32inevt.o w32proc.o"
    W32_LIBS="$W32_LIBS -lwinmm -lgdi32 -lcomdlg32"
    W32_LIBS="$W32_LIBS -lmpr -lwinspool -lole32 -lcomctl32 -lusp10"
    W32_RES_LINK="\$(EMACSRES)"
    CLIENTRES="emacsclient.res"
    CLIENTW="emacsclientw\$(EXEEXT)"
    FIRSTFILE_OBJ=firstfile.o
    NTDIR=nt
    CM_OBJ=
    LIBS_ECLIENT="-lcomctl32"
    LIB_WSOCK32="-lwsock32"
    NTLIB="ntlib.$ac_objext"
    XARGS_LIMIT="-s 10000"
  fi
fi
«k:AC_SUBST»(«f:W32_OBJ»)
«k:AC_SUBST»(«f:W32_LIBS»)
«k:AC_SUBST»(«f:EMACSRES»)
«k:AC_SUBST»(«f:EMACS_MANIFEST»)
«k:AC_SUBST»(«f:UPDATE_MANIFEST»)
«k:AC_SUBST»(«f:CLIENTRES»)
«k:AC_SUBST»(«f:CLIENTW»)
«k:AC_SUBST»(«f:W32_RES_LINK»)
«k:AC_SUBST»(«f:FIRSTFILE_OBJ»)
«k:AC_SUBST»(«f:NTDIR»)
«k:AC_SUBST»(«f:CM_OBJ»)
«k:AC_SUBST»(«f:LIBS_ECLIENT»)
«k:AC_SUBST»(«f:LIB_WSOCK32»)
«k:AC_SUBST»(«f:NTLIB»)
«k:AC_SUBST»(«f:XARGS_LIMIT»)

if test "${HAVE_W32}" = "yes"; then
  window_system=w32
  with_xft=no
fi

«x:## $window_system is now set to the window system we will
## ultimately use.
»
if test "$window_system" = none && test "$gl_gcc_warnings" = yes; then
   «m:# »«x:Too many warnings for now.
»   nw=
   nw="$nw -Wsuggest-attribute=noreturn"
   gl_MANYWARN_COMPLEMENT([WARN_CFLAGS], [$WARN_CFLAGS], [$nw])

   gl_WARN_ADD([-Wno-unused-variable])
   gl_WARN_ADD([-Wno-unused-but-set-variable])
   gl_WARN_ADD([-Wno-unused-but-set-parameter])
fi

term_header=
HAVE_X_WINDOWS=no
HAVE_X11=no
USE_X_TOOLKIT=none

case "${window_system}" in
  x11 )
    HAVE_X_WINDOWS=yes
    HAVE_X11=yes
    term_header=xterm.h
    case "${with_x_toolkit}" in
      athena | lucid ) USE_X_TOOLKIT=LUCID ;;
      motif ) USE_X_TOOLKIT=MOTIF ;;
      gtk ) with_gtk=yes
            term_header=gtkutil.h
«m:dnl »«x:Don't set this for GTK.  A lot of tests below assumes Xt when
»«m:dnl »«x:USE_X_TOOLKIT is set.
»            USE_X_TOOLKIT=none ;;
      gtk2 ) with_gtk2=yes
             term_header=gtkutil.h
             USE_X_TOOLKIT=none ;;
      gtk3 ) with_gtk3=yes
             term_header=gtkutil.h
             USE_X_TOOLKIT=none ;;
      no ) USE_X_TOOLKIT=none ;;
«m:dnl »«x:If user did not say whether to use a toolkit, make this decision later:
»«m:dnl »«x:use the toolkit if we have gtk, or X11R5 or newer.
»      * ) USE_X_TOOLKIT=maybe ;;
    esac
  ;;
  nextstep )
    term_header=nsterm.h
  ;;
  w32 )
    term_header=w32term.h
  ;;
esac

if test "$window_system" = none && test "X$with_x" != "Xno"; then
   «k:AC_CHECK_PROG»(HAVE_XSERVER, X, true, false)
   if test "$HAVE_XSERVER" = true ||
      test -n "$DISPLAY" ||
      {
        for emacs_libX11 in /usr/lib/libX11.*; do break; done
        test "$emacs_libX11" != '/usr/lib/libX11.*'
      }
   then
        «k:AC_MSG_ERROR»([You seem to be running X, but no X development libraries
were found.  You should install the relevant development files for X
and for the toolkit you want, such as Gtk+ or Motif.  Also make
sure you have development files for image handling, i.e.
tiff, gif, jpeg, png and xpm.
If you are sure you want Emacs compiled without X window support, pass
  --without-x
to configure.])
   fi
fi

«m:# »«x:Does the opsystem file prohibit the use of the GNU malloc?
»«m:# »«x:Assume not, until told otherwise.
»GNU_MALLOC=yes

«k:AC_CACHE_CHECK»(
  [whether malloc is Doug Lea style],
  [emacs_cv_var_doug_lea_malloc],
  [emacs_cv_var_doug_lea_malloc=no
   «x:dnl Hooks do not work with address sanitization.
»   if test "$emacs_cv_sanitize_address" != yes; then
     «k:AC_LINK_IFELSE»(
       [«k:AC_LANG_PROGRAM»(
	  [[«x:#include <malloc.h>
»	    static void hook (void) {}]],
	  [[malloc_set_state (malloc_get_state ());
	    __after_morecore_hook = hook;
	    __malloc_initialize_hook = hook;]])],
       [emacs_cv_var_doug_lea_malloc=yes])])
   fi
doug_lea_malloc=$emacs_cv_var_doug_lea_malloc

system_malloc=$emacs_cv_sanitize_address

hybrid_malloc=

case "$opsys" in
  «x:## darwin ld insists on the use of malloc routines in the System framework.
»  darwin | mingw32 | nacl | sol2-10) system_malloc=yes ;;
  cygwin) hybrid_malloc=yes;;
esac

GMALLOC_OBJ=
if test "${system_malloc}" = "yes"; then
  «k:AC_DEFINE»([«f:SYSTEM_MALLOC»], 1,
    [Define to 1 to use the system memory allocator, even if it is not
     Doug Lea style.])
  GNU_MALLOC=no
  GNU_MALLOC_reason="
    (The GNU allocators don't work with this system configuration.)"
  VMLIMIT_OBJ=
elif test "$hybrid_malloc" = yes; then
  «k:AC_DEFINE»(«f:HYBRID_MALLOC», 1,
    [Define to use gmalloc before dumping and the system malloc after.])
  GNU_MALLOC=
  GNU_MALLOC_reason="only before dumping"
  GMALLOC_OBJ=gmalloc.o
  VMLIMIT_OBJ=
else
  test "$doug_lea_malloc" != "yes" && GMALLOC_OBJ=gmalloc.o
  VMLIMIT_OBJ=vm-limit.o

  «k:AC_CHECK_HEADERS»([sys/vlimit.h])
  «k:AC_CACHE_CHECK»([for data_start], [emacs_cv_data_start],
    [«k:AC_LINK_IFELSE»(
       [«k:AC_LANG_PROGRAM»(
	 [[extern char data_start[]; char ch;]],
	 [[return data_start < &ch;]])],
       [emacs_cv_data_start=yes],
       [emacs_cv_data_start=no])])
  if test $emacs_cv_data_start = yes; then
    «k:AC_DEFINE»([«f:HAVE_DATA_START»], 1,
      [Define to 1 if data_start is the address of the start
       of the main data segment.])
  fi
fi
«k:AC_SUBST»(«f:GMALLOC_OBJ»)
«k:AC_SUBST»(«f:VMLIMIT_OBJ»)

if test "$doug_lea_malloc" = "yes" ; then
  if test "$GNU_MALLOC" = yes ; then
    GNU_MALLOC_reason="
      (Using Doug Lea's new malloc from the GNU C Library.)"
  fi
  «k:AC_DEFINE»(«f:DOUG_LEA_MALLOC», 1,
    [Define to 1 if the system memory allocator is Doug Lea style,
     with malloc hooks and malloc_set_state.])

  «x:## Use mmap directly for allocating larger buffers.
»  «x:## FIXME this comes from src/s/{gnu,gnu-linux}.h:
»  «x:## #ifdef DOUG_LEA_MALLOC; #undef REL_ALLOC; #endif
»  «x:## Does the AC_FUNC_MMAP test below make this check unnecessary?
»  case "$opsys" in
    mingw32|gnu*) REL_ALLOC=no ;;
  esac
fi

if test x"${REL_ALLOC}" = x; then
  REL_ALLOC=${GNU_MALLOC}
fi

use_mmap_for_buffers=no
case "$opsys" in
  cygwin|mingw32|freebsd|irix6-5) use_mmap_for_buffers=yes ;;
esac

«k:AC_FUNC_MMAP»
if test $use_mmap_for_buffers = yes; then
  «k:AC_DEFINE»(«f:USE_MMAP_FOR_BUFFERS», 1, [Define to use mmap to allocate buffer text.])
  REL_ALLOC=no
fi

LIBS="$LIBS_SYSTEM $LIBS"

«m:dnl »«x:FIXME replace main with a function we actually want from this library.
»«k:AC_CHECK_LIB»(Xbsd, main, LD_SWITCH_X_SITE="$LD_SWITCH_X_SITE -lXbsd")

«m:dnl »«x:Check for C11 threads.
»«k:AC_CHECK_HEADERS_ONCE»(threads.h)

«m:dnl »«x:Check for the POSIX thread library.
»LIB_PTHREAD=
«k:AC_CHECK_HEADERS_ONCE»(pthread.h)
if test "$ac_cv_header_pthread_h" && test "$opsys" != "mingw32"; then
  «k:AC_CACHE_CHECK»([for pthread library],
    [emacs_cv_pthread_lib],
    [emacs_cv_pthread_lib=no
     OLD_CPPFLAGS=$CPPFLAGS
     OLD_LIBS=$LIBS
     for emacs_pthread_lib in 'none needed' -lpthread; do
       case $emacs_pthread_lib in
	 -*) LIBS="$OLD_LIBS $emacs_pthread_lib";;
       esac
       «k:AC_LINK_IFELSE»(
	 [«k:AC_LANG_PROGRAM»(
	    [[«x:#include <pthread.h>
»	      «x:#include <signal.h>
»	      sigset_t old_mask, new_mask;
	      void noop (void) {}]],
	    [[pthread_t th = pthread_self ();
	      int status = 0;
	      status += pthread_create (&th, 0, 0, 0);
	      status += pthread_sigmask (SIG_BLOCK, &new_mask, &old_mask);
	      status += pthread_kill (th, 0);
	      «x:#if ! (defined SYSTEM_MALLOC || defined HYBRID_MALLOC \
»		     || defined DOUG_LEA_MALLOC)
	      /* Test for pthread_atfork only if gmalloc uses it,
		 as older-style hosts like MirBSD 10 lack it.  */
	      status += pthread_atfork (noop, noop, noop);
	      «x:#endif
»	      return status;]])],
	 [emacs_cv_pthread_lib=$emacs_pthread_lib])
       LIBS=$OLD_LIBS
       if test "$emacs_cv_pthread_lib" != no; then
	 break
       fi
     done
     CPPFLAGS=$OLD_CPPFLAGS])
  if test "$emacs_cv_pthread_lib" != no; then
    «k:AC_DEFINE»([«f:HAVE_PTHREAD»], 1, [Define to 1 if you have POSIX threads.])
    case $emacs_cv_pthread_lib in
      -*) LIB_PTHREAD=$emacs_cv_pthread_lib;;
    esac
    ac_cv_func_pthread_sigmask=yes
    «m:# »«x:Some systems optimize for single-threaded programs by default, and
»    «m:# »«x:need special flags to disable these optimizations. For example, the
»    «m:# »«x:definition of 'errno' in <errno.h>.
»    case $opsys in
      hpux* | sol*)
	«k:AC_DEFINE»([«f:_REENTRANT»], 1,
	  [Define to 1 if your system requires this in multithreaded code.]);;
      aix4-2)
	«k:AC_DEFINE»([«f:_THREAD_SAFE»], 1,
	  [Define to 1 if your system requires this in multithreaded code.]);;
    esac
  fi
fi
«k:AC_SUBST»([«f:LIB_PTHREAD»])

«m:dnl »«x:Check for need for bigtoc support on IBM AIX
»
case ${host_os} in
aix*)
  «k:AC_CACHE_CHECK»([for -bbigtoc option], [gdb_cv_bigtoc], [
    case $GCC in
    yes) gdb_cv_bigtoc=-Wl,-bbigtoc ;;
    *) gdb_cv_bigtoc=-bbigtoc ;;
    esac

    LDFLAGS=$LDFLAGS\ $gdb_cv_bigtoc
    «k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[]], [[int i;]])], [], [gdb_cv_bigtoc=])
  ])
  ;;
esac

«m:# »«x:Change CFLAGS, CPPFLAGS, and LIBS temporarily so that C_SWITCH_X_SITE
»«m:# »«x:is for the tests that follow.  We set them back later on.
»
REAL_CFLAGS="$CFLAGS"
REAL_CPPFLAGS="$CPPFLAGS"
REAL_LIBS="$LIBS"

if test "${HAVE_X11}" = "yes"; then
  DEFS="$C_SWITCH_X_SITE $DEFS"
  LDFLAGS="$LDFLAGS $LD_SWITCH_X_SITE"
  LIBS="-lX11 $LIBS"
  CFLAGS="$C_SWITCH_X_SITE $CFLAGS"
  CPPFLAGS="$C_SWITCH_X_SITE $CPPFLAGS"

  «m:# »«x:On Solaris, arrange for LD_RUN_PATH to point to the X libraries for tests.
»  «m:# »«x:This is handled by LD_SWITCH_X_SITE_RPATH during the real build,
»  «m:# »«x:but it's more convenient here to set LD_RUN_PATH since this
»  «m:# »«x:also works on hosts that don't understand LD_SWITCH_X_SITE_RPATH.
»  if test "${x_libraries}" != NONE && test -n "${x_libraries}"; then
    LD_RUN_PATH=$x_libraries${LD_RUN_PATH+:}$LD_RUN_PATH
    export LD_RUN_PATH
  fi

  if test "${opsys}" = "gnu-linux"; then
    «k:AC_MSG_CHECKING»(whether X on GNU/Linux needs -b to link)
    «k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[]],
     [[XOpenDisplay ("foo");]])],
     [xgnu_linux_first_failure=no],
     [xgnu_linux_first_failure=yes])
    if test "${xgnu_linux_first_failure}" = "yes"; then
      OLD_CPPFLAGS="$CPPFLAGS"
      OLD_LIBS="$LIBS"
      CPPFLAGS="$CPPFLAGS -b i486-linuxaout"
      LIBS="$LIBS -b i486-linuxaout"
      «k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[]],
       [[XOpenDisplay ("foo");]])],
       [xgnu_linux_second_failure=no],
       [xgnu_linux_second_failure=yes])
      if test "${xgnu_linux_second_failure}" = "yes"; then
	«m:# »«x:If we get the same failure with -b, there is no use adding -b.
»	«m:# »«x:So leave it out.  This plays safe.
»        «k:AC_MSG_RESULT»(no)
      else
	LD_SWITCH_X_SITE="$LD_SWITCH_X_SITE -b i486-linuxaout"
	C_SWITCH_X_SITE="$C_SWITCH_X_SITE -b i486-linuxaout"
        «k:AC_MSG_RESULT»(yes)
      fi
      CPPFLAGS=$OLD_CPPFLAGS
      LIBS=$OLD_LIBS
    else
      «k:AC_MSG_RESULT»(no)
    fi
  fi

  «m:# »«x:Reportedly, some broken Solaris systems have XKBlib.h but are missing
»  «m:# »«x:header files included from there.
»  «k:AC_MSG_CHECKING»(for Xkb)
  «k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <X11/Xlib.h>
#include <X11/XKBlib.h>]],
»	[[XkbDescPtr kb = XkbGetKeyboard (0, XkbAllComponentsMask, XkbUseCoreKbd);]])],
	emacs_xkb=yes, emacs_xkb=no)
  «k:AC_MSG_RESULT»($emacs_xkb)
  if test $emacs_xkb = yes; then
    «k:AC_DEFINE»(«f:HAVE_XKB», 1, [Define to 1 if you have the Xkb extension.])
  fi

  «k:AC_CHECK_FUNCS»(XrmSetDatabase XScreenResourceString \
XScreenNumberOfScreen)
fi

if test "${window_system}" = "x11"; then
  «k:AC_MSG_CHECKING»(X11 version 6)
  «k:AC_CACHE_VAL»(emacs_cv_x11_version_6,
  [«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <X11/Xlib.h>]],
»[[«x:#if XlibSpecificationRelease < 6
»fail;
«x:#endif
»]])], emacs_cv_x11_version_6=yes, emacs_cv_x11_version_6=no)])
  if test $emacs_cv_x11_version_6 = yes; then
    «k:AC_MSG_RESULT»(6 or newer)
    «k:AC_DEFINE»(«f:HAVE_X11R6», 1,
	      [Define to 1 if you have the X11R6 or newer version of Xlib.])
    «k:AC_DEFINE»(«f:HAVE_X_I18N», 1, [Define if you have usable i18n support.])
    «x:## inoue@ainet.or.jp says Solaris has a bug related to X11R6-style
»    «x:## XIM support.
»    case "$opsys" in
      sol2-*) : ;;
      *) «k:AC_DEFINE»(«f:HAVE_X11R6_XIM», 1,
           [Define if you have usable X11R6-style XIM support.])
         ;;
    esac
  else
    «k:AC_MSG_RESULT»(before 6)
  fi
fi


«x:### Use -lrsvg-2 if available, unless '--with-rsvg=no' is specified.
»HAVE_RSVG=no
if test "${HAVE_X11}" = "yes" || test "${HAVE_NS}" = "yes" || test "${opsys}" = "mingw32"; then
  if test "${with_rsvg}" != "no"; then
    RSVG_REQUIRED=2.11.0
    RSVG_MODULE="librsvg-2.0 >= $RSVG_REQUIRED"

    EMACS_CHECK_MODULES([RSVG], [$RSVG_MODULE])
    «k:AC_SUBST»(«f:RSVG_CFLAGS»)
    «k:AC_SUBST»(«f:RSVG_LIBS»)

    if test $HAVE_RSVG = yes; then
      «k:AC_DEFINE»(«f:HAVE_RSVG», 1, [Define to 1 if using librsvg.])
      CFLAGS="$CFLAGS $RSVG_CFLAGS"
      «m:# »«x:Windows loads librsvg dynamically
»      if test "${opsys}" = "mingw32"; then
	RSVG_LIBS=
      fi
    fi
  fi
fi

HAVE_IMAGEMAGICK=no
if test "${HAVE_X11}" = "yes" || test "${HAVE_NS}" = "yes" || test "${HAVE_W32}" = "yes"; then
  if test "${with_imagemagick}" != "no"; then
    «x:## 6.3.5 is the earliest version known to work; see Bug#17339.
»    «x:## 6.8.2 makes Emacs crash; see Bug#13867.
»    IMAGEMAGICK_MODULE="Wand >= 6.3.5 Wand != 6.8.2"
    EMACS_CHECK_MODULES([IMAGEMAGICK], [$IMAGEMAGICK_MODULE])
    «k:AC_SUBST»(«f:IMAGEMAGICK_CFLAGS»)
    «k:AC_SUBST»(«f:IMAGEMAGICK_LIBS»)

    if test $HAVE_IMAGEMAGICK = yes; then
      «k:AC_DEFINE»(«f:HAVE_IMAGEMAGICK», 1, [Define to 1 if using imagemagick.])
      OLD_CFLAGS=$CFLAGS
      OLD_LIBS=$LIBS
      CFLAGS="$CFLAGS $IMAGEMAGICK_CFLAGS"
      LIBS="$IMAGEMAGICK_LIBS $LIBS"
      «k:AC_CHECK_FUNCS»(MagickExportImagePixels MagickMergeImageLayers)
      CFLAGS=$OLD_CFLAGS
      LIBS=$OLD_LIBS
    fi
  fi
fi


HAVE_GTK=no
GTK_OBJ=
gtk_term_header=$term_header
check_gtk2=no
gtk3_pkg_errors=
if test "${opsys}" != "mingw32"; then
  if test "${with_gtk3}" = "yes" || test "${with_gtk}" = "yes" || test "$USE_X_TOOLKIT" = "maybe"; then
    GLIB_REQUIRED=2.28
    GTK_REQUIRED=3.0
    GTK_MODULES="gtk+-3.0 >= $GTK_REQUIRED glib-2.0 >= $GLIB_REQUIRED"

    «x:dnl Checks for libraries.
»    EMACS_CHECK_MODULES([GTK], [$GTK_MODULES],
      [pkg_check_gtk=yes], [pkg_check_gtk=no])
    if test "$pkg_check_gtk" = "no" && test "$with_gtk3" = "yes"; then
       «k:AC_MSG_ERROR»($GTK_PKG_ERRORS)
    fi
    if test "$pkg_check_gtk" = "yes"; then
       «k:AC_DEFINE»(«f:HAVE_GTK3», 1, [Define to 1 if using GTK 3 or later.])
       GTK_OBJ=emacsgtkfixed.o
       gtk_term_header=gtkutil.h
       USE_GTK_TOOLKIT="GTK3"
       if test "x$ac_enable_gtk_deprecation_warnings" = x; then
	 «k:AC_DEFINE»([«f:GDK_DISABLE_DEPRECATION_WARNINGS»], [1],
	   [Define to 1 to disable GTK+/GDK deprecation warnings.])
	 «k:AC_DEFINE»([«f:GLIB_DISABLE_DEPRECATION_WARNINGS»], [1],
	   [Define to 1 to disable Glib deprecation warnings.])
       fi
    else
       check_gtk2=yes
       gtk3_pkg_errors="$GTK_PKG_ERRORS "
    fi
  fi

  if test "${with_gtk2}" = "yes" || test "$check_gtk2" = "yes"; then
    GLIB_REQUIRED=2.10
    GTK_REQUIRED=2.10
    GTK_MODULES="gtk+-2.0 >= $GTK_REQUIRED glib-2.0 >= $GLIB_REQUIRED"

    «x:dnl Checks for libraries.
»    EMACS_CHECK_MODULES([GTK], [$GTK_MODULES],
      [pkg_check_gtk=yes], [pkg_check_gtk=no])
    if test "$pkg_check_gtk" = "no" &&
       { test "$with_gtk" = yes || test "$with_gtk2" = "yes"; }
    then
      «k:AC_MSG_ERROR»($gtk3_pkg_errors$GTK_PKG_ERRORS)
    fi
    test "$pkg_check_gtk" = "yes" && USE_GTK_TOOLKIT="GTK2"
  fi
fi

OLD_CFLAGS=$CFLAGS
OLD_LIBS=$LIBS

if test x"$pkg_check_gtk" = xyes; then

  «k:AC_SUBST»(«f:GTK_LIBS»)
  CFLAGS="$CFLAGS $GTK_CFLAGS"
  LIBS="$GTK_LIBS $LIBS"
  «x:dnl Try to compile a simple GTK program.
»  «k:AC_MSG_CHECKING»([whether GTK compiles])
  GTK_COMPILES=no
  «k:AC_LINK_IFELSE»(
    [«k:AC_LANG_PROGRAM»(
       [[/* Check the Gtk and Glib APIs.  */
	 «x:#include <gtk/gtk.h>
»	 «x:#include <glib-object.h>
»	 static void
	 callback (GObject *go, GParamSpec *spec, gpointer user_data)
	 {}
       ]],
       [[
	 GtkSettings *gs = 0;
	 /* Use G_CALLBACK to make sure function pointers can be cast to void *;
	    strict C prohibits this.  Use gtk_main_iteration to test that the
	    libraries are there.  */
	 if (g_signal_handler_find (G_OBJECT (gs), G_SIGNAL_MATCH_FUNC,
				    0, 0, 0, G_CALLBACK (callback), 0))
	   gtk_main_iteration ();
       ]])],
    [GTK_COMPILES=yes])
  «k:AC_MSG_RESULT»([$GTK_COMPILES])
  if test "${GTK_COMPILES}" != "yes"; then
    GTK_OBJ=
    if test "$USE_X_TOOLKIT" != "maybe"; then
      «k:AC_MSG_ERROR»([Gtk+ wanted, but it does not compile, see config.log.  Maybe some x11-devel files missing?]);
    fi
  else
    C_SWITCH_X_SITE="$C_SWITCH_X_SITE $GTK_CFLAGS"
    HAVE_GTK=yes
    «k:AC_DEFINE»(«f:USE_GTK», 1, [Define to 1 if using GTK.])
    GTK_OBJ="gtkutil.o $GTK_OBJ"
    term_header=$gtk_term_header
    USE_X_TOOLKIT=none
    «k:AC_MSG_WARN»([[Your version of Gtk+ will have problems with
       closing open displays.  This is no problem if you just use
       one display, but if you use more than one and close one of them
       Emacs may crash.
       See http://bugzilla.gnome.org/show_bug.cgi?id=85715]])
    sleep 3
  fi

fi
«k:AC_SUBST»(«f:GTK_OBJ»)


if test "${HAVE_GTK}" = "yes"; then

  «x:dnl  GTK scrollbars resemble toolkit scrollbars a lot, so to avoid
»  «x:dnl  a lot if #ifdef:s, say we have toolkit scrollbars.
»  if test "$with_toolkit_scroll_bars" != no; then
    with_toolkit_scroll_bars=yes
  fi

  «x:dnl  Check if we have the old file selection dialog declared and
»  «x:dnl  in the link library.  In 2.x it may be in the library,
»  «x:dnl  but not declared if deprecated featured has been selected out.
»  «x:dnl  AC_CHECK_DECL checks for a macro, so check for GTK_TYPE_FILE_SELECTION.
»  HAVE_GTK_FILE_SELECTION=no
  «k:AC_CHECK_DECL»(GTK_TYPE_FILE_SELECTION, HAVE_GTK_FILE_SELECTION=yes,
                   HAVE_GTK_FILE_SELECTION=no, [«k:AC_INCLUDES_DEFAULT»
«x:#include <gtk/gtk.h>])
»  if test "$HAVE_GTK_FILE_SELECTION" = yes; then
    «k:AC_CHECK_FUNCS»(gtk_file_selection_new)
  fi

  «x:dnl Same as above for gtk_handle_box.
»  HAVE_GTK_HANDLE_BOX=no
  «k:AC_CHECK_DECL»(GTK_TYPE_HANDLE_BOX, HAVE_GTK_HANDLE_BOX=yes,
                   HAVE_GTK_HANDLE_BOX=no, [«k:AC_INCLUDES_DEFAULT»
«x:#include <gtk/gtk.h>])
»  if test "$HAVE_GTK_HANDLE_BOX" = yes; then
    «k:AC_CHECK_FUNCS»(gtk_handle_box_new)
  fi

  «x:dnl Same as above for gtk_tearoff_menu_item.
»  HAVE_GTK_TEAROFF_MENU_ITEM=no
  «k:AC_CHECK_DECL»(GTK_TYPE_TEAROFF_MENU_ITEM, HAVE_GTK_TEAROFF_MENU_ITEM=yes,
                   HAVE_GTK_TEAROFF_MENU_ITEM=no, [«k:AC_INCLUDES_DEFAULT»
«x:#include <gtk/gtk.h>])
»  if test "$HAVE_GTK_TEAROFF_MENU_ITEM" = yes; then
    «k:AC_CHECK_FUNCS»(gtk_tearoff_menu_item_new)
  fi

  «x:dnl Check for functions introduced in 2.14 and later.
»  «k:AC_CHECK_FUNCS»(gtk_widget_get_window gtk_widget_set_has_window \
                 gtk_dialog_get_action_area gtk_widget_get_sensitive \
                 gtk_widget_get_mapped gtk_adjustment_get_page_size \
                 gtk_orientable_set_orientation \
		 gtk_window_set_has_resize_grip)

 term_header=gtkutil.h
fi

CFLAGS=$OLD_CFLAGS
LIBS=$OLD_LIBS

«m:dnl »«x:D-Bus has been tested under GNU/Linux only.  Must be adapted for
»«m:dnl »«x:other platforms.
»HAVE_DBUS=no
DBUS_OBJ=
if test "${with_dbus}" = "yes"; then
   EMACS_CHECK_MODULES([DBUS], [dbus-1 >= 1.0])
   if test "$HAVE_DBUS" = yes; then
     «k:AC_DEFINE»(«f:HAVE_DBUS», 1, [Define to 1 if using D-Bus.])
     «x:dnl dbus_watch_get_unix_fd has been introduced in D-Bus 1.1.1.
»     «x:dnl dbus_type_is_valid and dbus_validate_* have been introduced in
»     «x:dnl D-Bus 1.5.12.
»     OLD_LIBS=$LIBS
     LIBS="$LIBS $DBUS_LIBS"
     «k:AC_CHECK_FUNCS»(dbus_watch_get_unix_fd \
		    dbus_type_is_valid \
		    dbus_validate_bus_name \
                    dbus_validate_path \
		    dbus_validate_interface \
		    dbus_validate_member)
     LIBS=$OLD_LIBS
     DBUS_OBJ=dbusbind.o
   fi
fi
«k:AC_SUBST»(«f:DBUS_CFLAGS»)
«k:AC_SUBST»(«f:DBUS_LIBS»)
«k:AC_SUBST»(«f:DBUS_OBJ»)

«m:dnl »«x:GSettings has been tested under GNU/Linux only.
»HAVE_GSETTINGS=no
if test "${HAVE_X11}" = "yes" && test "${with_gsettings}" = "yes"; then
   EMACS_CHECK_MODULES([GSETTINGS], [gio-2.0 >= 2.26])
   if test "$HAVE_GSETTINGS" = "yes"; then
      old_CFLAGS=$CFLAGS
      CFLAGS="$CFLAGS $GSETTINGS_CFLAGS"
      old_LIBS=$LIBS
      LIBS="$LIBS $GSETTINGS_LIBS"
      «k:AC_MSG_CHECKING»([whether GSettings is in gio])
      «k:AC_LINK_IFELSE»(
         [«k:AC_LANG_PROGRAM»(
	     [[/* Check that gsettings really is present.  */
	     «x:#include <glib-object.h>
»	     «x:#include <gio/gio.h>
»	     ]],
	     [[
	       GSettings *settings;
	       GVariant *val = g_settings_get_value (settings, "");
	     ]])],
	 [], HAVE_GSETTINGS=no)
      «k:AC_MSG_RESULT»([$HAVE_GSETTINGS])

      if test "$HAVE_GSETTINGS" = "yes"; then
        «k:AC_DEFINE»(«f:HAVE_GSETTINGS», 1, [Define to 1 if using GSettings.])
	SETTINGS_CFLAGS="$GSETTINGS_CFLAGS"
	SETTINGS_LIBS="$GSETTINGS_LIBS"
      fi
      CFLAGS=$old_CFLAGS
      LIBS=$old_LIBS
   fi
fi

«m:dnl »«x:GConf has been tested under GNU/Linux only.
»«m:dnl »«x:The version is really arbitrary, it is about the same age as Gtk+ 2.6.
»HAVE_GCONF=no
if test "${HAVE_X11}" = "yes" && test "${with_gconf}" = "yes"; then
   EMACS_CHECK_MODULES([GCONF], [gconf-2.0 >= 2.13])
   if test "$HAVE_GCONF" = yes; then
      «k:AC_DEFINE»(«f:HAVE_GCONF», 1, [Define to 1 if using GConf.])
      «x:dnl Newer GConf doesn't link with g_objects, so this is not defined.
»      SETTINGS_CFLAGS="$SETTINGS_CFLAGS $GCONF_CFLAGS"
      SETTINGS_LIBS="$SETTINGS_LIBS $GCONF_LIBS"
   fi
fi

if test "$HAVE_GSETTINGS" = "yes" || test "$HAVE_GCONF" = "yes"; then
    EMACS_CHECK_MODULES([GOBJECT], [gobject-2.0 >= 2.0])
    if test "$HAVE_GOBJECT" = "yes"; then
       SETTINGS_CFLAGS="$SETTINGS_CFLAGS $GOBJECT_CFLAGS"
       SETTINGS_LIBS="$SETTINGS_LIBS $GOBJECT_LIBS"
    fi
    SAVE_CFLAGS="$CFLAGS"
    SAVE_LIBS="$LIBS"
    CFLAGS="$SETTINGS_CFLAGS $CFLAGS"
    LIBS="$SETTINGS_LIBS $LIBS"
    CFLAGS="$SAVE_CFLAGS"
    LIBS="$SAVE_LIBS"
fi
«k:AC_SUBST»(«f:SETTINGS_CFLAGS»)
«k:AC_SUBST»(«f:SETTINGS_LIBS»)


«m:dnl »«x:SELinux is available for GNU/Linux only.
»HAVE_LIBSELINUX=no
LIBSELINUX_LIBS=
if test "${with_selinux}" = "yes"; then
   «k:AC_CHECK_LIB»([selinux], [lgetfilecon], HAVE_LIBSELINUX=yes, HAVE_LIBSELINUX=no)
   if test "$HAVE_LIBSELINUX" = yes; then
      «k:AC_DEFINE»(«f:HAVE_LIBSELINUX», 1, [Define to 1 if using SELinux.])
      LIBSELINUX_LIBS=-lselinux
   fi
fi
«k:AC_SUBST»(«f:LIBSELINUX_LIBS»)

HAVE_GNUTLS=no
if test "${with_gnutls}" = "yes" ; then
  EMACS_CHECK_MODULES([LIBGNUTLS], [gnutls >= 2.6.6],
    [HAVE_GNUTLS=yes], [HAVE_GNUTLS=no])
  if test "${HAVE_GNUTLS}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_GNUTLS», 1, [Define if using GnuTLS.])
    EMACS_CHECK_MODULES([LIBGNUTLS3], [gnutls >= 3.0.0],
      [«k:AC_DEFINE»(«f:HAVE_GNUTLS3», 1, [Define if using GnuTLS v3.])], [])
  fi

  «m:# »«x:Windows loads GnuTLS dynamically
»  if test "${opsys}" = "mingw32"; then
    LIBGNUTLS_LIBS=
  fi
fi

«k:AC_SUBST»(«f:LIBGNUTLS_LIBS»)
«k:AC_SUBST»(«f:LIBGNUTLS_CFLAGS»)

NOTIFY_OBJ=
NOTIFY_SUMMARY=no

«m:dnl »«x:FIXME?  Don't auto-detect on NS, but do allow someone to specify
»«m:dnl »«x:a particular library.  This doesn't make much sense?
»if test "${HAVE_NS}" = yes && test ${with_file_notification} = yes; then
  with_file_notification=no
fi

«m:dnl »«x:MS Windows native file monitor is available for mingw32 only.
»case $with_file_notification,$opsys in
  w32,cygwin)
    «k:AC_MSG_ERROR»(['--with-file-notification=w32' was specified, but
    this is only supported on MS-Windows native and MinGW32 builds.
    Consider using gfile instead.])
    ;;
  w32,* | yes,mingw32)
    «k:AC_CHECK_HEADER»(windows.h)
    if test "$ac_cv_header_windows_h" = yes ; then
       «k:AC_DEFINE»(«f:HAVE_W32NOTIFY», 1, [Define to 1 to use w32notify.])
       NOTIFY_OBJ=w32notify.o
       NOTIFY_SUMMARY="yes (w32)"
    fi ;;
esac

«m:dnl »«x:inotify is available only on GNU/Linux.
»case $with_file_notification,$NOTIFY_OBJ in
  inotify, | yes,)
    «k:AC_CHECK_HEADER»(sys/inotify.h)
    if test "$ac_cv_header_sys_inotify_h" = yes ; then
	«k:AC_CHECK_FUNC»(inotify_init1)
	if test "$ac_cv_func_inotify_init1" = yes; then
	  «k:AC_DEFINE»(«f:HAVE_INOTIFY», 1, [Define to 1 to use inotify.])
	  NOTIFY_OBJ=inotify.o
	  NOTIFY_SUMMARY="yes -lglibc (inotify)"
       fi
    fi ;;
esac

«m:dnl »«x:g_file_monitor exists since glib 2.18.  G_FILE_MONITOR_EVENT_MOVED
»«m:dnl »«x:has been added in glib 2.24.  It has been tested under
»«m:dnl »«x:GNU/Linux only.
»case $with_file_notification,$NOTIFY_OBJ in
  gfile,* | yes,)
    EMACS_CHECK_MODULES([GFILENOTIFY], [gio-2.0 >= 2.24])
    if test "$HAVE_GFILENOTIFY" = "yes"; then
       «k:AC_DEFINE»(«f:HAVE_GFILENOTIFY», 1, [Define to 1 if using GFile.])
       NOTIFY_OBJ=gfilenotify.o
       NOTIFY_SUMMARY="yes -lgio (gfile)"
    fi ;;
esac

case $with_file_notification,$NOTIFY_OBJ in
  yes,* | no,* | *,?*) ;;
  *) «k:AC_MSG_ERROR»([File notification '$with_file_notification' requested but requirements not found.]) ;;
esac

if test -n "$NOTIFY_OBJ"; then
   «k:AC_DEFINE»(«f:USE_FILE_NOTIFY», 1, [Define to 1 if using file notifications.])
fi
«k:AC_SUBST»(«f:NOTIFY_OBJ»)
«k:AC_SUBST»(«f:GFILENOTIFY_CFLAGS»)
«k:AC_SUBST»(«f:GFILENOTIFY_LIBS»)

«m:dnl »«x:Do not put whitespace before the #include statements below.
»«m:dnl »«x:Older compilers (eg sunos4 cc) choke on it.
»HAVE_XAW3D=no
LUCID_LIBW=
if test x"${USE_X_TOOLKIT}" = xmaybe || test x"${USE_X_TOOLKIT}" = xLUCID; then
  if test "$with_xaw3d" != no; then
    «k:AC_CACHE_VAL»(emacs_cv_xaw3d,
    [«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[
«x:#include <X11/Intrinsic.h>
#include <X11/Xaw3d/Simple.h>]],
»      [[]])],
      [«k:AC_CHECK_LIB»(Xaw3d, XawScrollbarSetThumb,
                    emacs_cv_xaw3d=yes, emacs_cv_xaw3d=no)],
      emacs_cv_xaw3d=no)])
  else
    emacs_cv_xaw3d=no
  fi
  if test $emacs_cv_xaw3d = yes; then
    «k:AC_MSG_CHECKING»(for xaw3d)
    «k:AC_MSG_RESULT»([yes; using Lucid toolkit])
    USE_X_TOOLKIT=LUCID
    HAVE_XAW3D=yes
    LUCID_LIBW=-lXaw3d
    «k:AC_DEFINE»(«f:HAVE_XAW3D», 1,
              [Define to 1 if you have the Xaw3d library (-lXaw3d).])
  else
    «k:AC_MSG_CHECKING»(for xaw3d)
    «k:AC_MSG_RESULT»(no)
    «k:AC_MSG_CHECKING»(for libXaw)
    «k:AC_CACHE_VAL»(emacs_cv_xaw,
    [«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[
«x:#include <X11/Intrinsic.h>
#include <X11/Xaw/Simple.h>]],
»      [[]])],
      emacs_cv_xaw=yes,
      emacs_cv_xaw=no)])
    if test $emacs_cv_xaw = yes; then
      «k:AC_MSG_RESULT»([yes; using Lucid toolkit])
      USE_X_TOOLKIT=LUCID
      LUCID_LIBW=-lXaw
    elif test x"${USE_X_TOOLKIT}" = xLUCID; then
      «k:AC_MSG_ERROR»([Lucid toolkit requires X11/Xaw include files])
    else
      «k:AC_MSG_ERROR»([No X toolkit could be found.
If you are sure you want Emacs compiled without an X toolkit, pass
  --with-x-toolkit=no
to configure.  Otherwise, install the development libraries for the toolkit
that you want to use (e.g. Gtk+) and re-run configure.])
    fi
  fi
fi

X_TOOLKIT_TYPE=$USE_X_TOOLKIT

LIBXTR6=
LIBXMU=
if test "${USE_X_TOOLKIT}" != "none"; then
  «k:AC_MSG_CHECKING»(X11 toolkit version)
  «k:AC_CACHE_VAL»(emacs_cv_x11_toolkit_version_6,
  [«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <X11/Intrinsic.h>]],
»[[«x:#if XtSpecificationRelease < 6
»fail;
«x:#endif
»]])], emacs_cv_x11_toolkit_version_6=yes, emacs_cv_x11_toolkit_version_6=no)])
  HAVE_X11XTR6=$emacs_cv_x11_toolkit_version_6
  if test $emacs_cv_x11_toolkit_version_6 = yes; then
    «k:AC_MSG_RESULT»(6 or newer)
    «k:AC_DEFINE»(«f:HAVE_X11XTR6», 1,
	      [Define to 1 if you have the X11R6 or newer version of Xt.])
    LIBXTR6="-lSM -lICE"
    case "$opsys" in
      «x:## Use libw.a along with X11R6 Xt.
»      unixware) LIBXTR6="$LIBXTR6 -lw" ;;
    esac
  else
    «k:AC_MSG_RESULT»(before 6)
  fi

«m:dnl »«x:If using toolkit, check whether libXmu.a exists.
»«m:dnl »«x:tranle@intellicorp.com says libXmu.a can need XtMalloc in libXt.a to link.
»  OLDLIBS="$LIBS"
  if test x$HAVE_X11XTR6 = xyes; then
    OTHERLIBS='-lXt -lSM -lICE'
  else
    OTHERLIBS='-lXt'
  fi
  «k:AC_SEARCH_LIBS»([XmuConvertStandardSelection], [Xmu], [], [], [$OTHERLIBS])
  if test "X$LIBS" != "X$OLDLIBS"; then
    LIBXMU=$ac_cv_search_XmuConvertStandardSelection
  fi
  LIBS=$OLDLIBS
  «x:dnl ac_cv_search_XmuConvertStandardSelection is also referenced below.
»fi
«k:AC_SUBST»(«f:LIBXTR6»)
«k:AC_SUBST»(«f:LIBXMU»)

LIBXP=
if test "${USE_X_TOOLKIT}" = "MOTIF"; then
  «m:# »«x:OpenMotif may be installed in such a way on some GNU/Linux systems.
»  if test -d /usr/include/openmotif; then
    CPPFLAGS="-I/usr/include/openmotif $CPPFLAGS"
    emacs_cv_openmotif=yes
    case "$canonical" in
      x86_64-*-linux-gnu* | powerpc64-*-linux-gnu* | sparc64-*-linux-gnu*)
      test -d /usr/lib64/openmotif && LDFLAGS="-L/usr/lib64/openmotif $LDFLAGS"
      ;;
      *)
      test -d /usr/lib/openmotif && LDFLAGS="-L/usr/lib/openmotif $LDFLAGS"
    esac
  else
    emacs_cv_openmotif=no
  fi
  «k:AC_CACHE_CHECK»(for (Open)Motif version 2.1, emacs_cv_motif_version_2_1,
  [«k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <Xm/Xm.h>]],
»    [[«x:#if XmVERSION > 2 || (XmVERSION == 2 && XmREVISION >= 1)
»int x = 5;
«x:#else
»Motif version prior to 2.1.
«x:#endif]])],
»    emacs_cv_motif_version_2_1=yes, emacs_cv_motif_version_2_1=no)])
  if test $emacs_cv_motif_version_2_1 = yes; then
    «k:AC_CHECK_LIB»(Xp, XpCreateContext, LIBXP=-lXp)
    if test x$emacs_cv_openmotif = xyes; then
      REAL_CPPFLAGS="-I/usr/include/openmotif $REAL_CPPFLAGS"
    fi
  else
    «k:AC_CACHE_CHECK»(for LessTif where some systems put it, emacs_cv_lesstif,
    «m:# »«x:We put this in CFLAGS temporarily to precede other -I options
»    «m:# »«x:that might be in CFLAGS temporarily.
»    «m:# »«x:We put this in CPPFLAGS where it precedes the other -I options.
»    OLD_CPPFLAGS=$CPPFLAGS
    OLD_CFLAGS=$CFLAGS
    CPPFLAGS="-I/usr/X11R6/LessTif/Motif1.2/include $CPPFLAGS"
    CFLAGS="-I/usr/X11R6/LessTif/Motif1.2/include $CFLAGS"
    [«k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include </usr/X11R6/LessTif/Motif1.2/include/Xm/Xm.h>]],
»      [[int x = 5;]])],
      emacs_cv_lesstif=yes, emacs_cv_lesstif=no)])
    if test $emacs_cv_lesstif = yes; then
      «m:# »«x:Make sure this -I option remains in CPPFLAGS after it is set
»      «m:# »«x:back to REAL_CPPFLAGS.
»      «m:# »«x:There is no need to change REAL_CFLAGS, because REAL_CFLAGS does not
»      «m:# »«x:have those other -I options anyway.  Ultimately, having this
»      «m:# »«x:directory ultimately in CPPFLAGS will be enough.
»      REAL_CPPFLAGS="-I/usr/X11R6/LessTif/Motif1.2/include $REAL_CPPFLAGS"
      LDFLAGS="-L/usr/X11R6/LessTif/Motif1.2/lib $LDFLAGS"
    else
      CFLAGS=$OLD_CFLAGS
      CPPFLAGS=$OLD_CPPFLAGS
    fi
  fi
  «k:AC_CHECK_HEADER»([Xm/BulletinB.h], [],
    [«k:AC_MSG_ERROR»([Motif toolkit requested but requirements not found.])])
fi

«m:dnl »«x:Use toolkit scroll bars if configured for GTK or X toolkit and either
»«m:dnl »«x:using Motif or Xaw3d is available, and unless
»«m:dnl »«x:--with-toolkit-scroll-bars=no was specified.
»
«k:AH_TEMPLATE»(«f:USE_TOOLKIT_SCROLL_BARS»,
	    [Define to 1 if we should use toolkit scroll bars.])«x:dnl
»USE_TOOLKIT_SCROLL_BARS=no
if test "${with_toolkit_scroll_bars}" != "no"; then
  if test "${USE_X_TOOLKIT}" != "none"; then
    if test "${USE_X_TOOLKIT}" = "MOTIF"; then
      «k:AC_DEFINE»(«f:USE_TOOLKIT_SCROLL_BARS»)
      HAVE_XAW3D=no
      USE_TOOLKIT_SCROLL_BARS=yes
    elif test "${HAVE_XAW3D}" = "yes" || test "${USE_X_TOOLKIT}" = "LUCID"; then
      «k:AC_DEFINE»(«f:USE_TOOLKIT_SCROLL_BARS»)
      USE_TOOLKIT_SCROLL_BARS=yes
    fi
  elif test "${HAVE_GTK}" = "yes"; then
    «k:AC_DEFINE»(«f:USE_TOOLKIT_SCROLL_BARS»)
    USE_TOOLKIT_SCROLL_BARS=yes
  elif test "${HAVE_NS}" = "yes"; then
    «k:AC_DEFINE»(«f:USE_TOOLKIT_SCROLL_BARS»)
    USE_TOOLKIT_SCROLL_BARS=yes
  elif test "${HAVE_W32}" = "yes"; then
    «k:AC_DEFINE»(«f:USE_TOOLKIT_SCROLL_BARS»)
    USE_TOOLKIT_SCROLL_BARS=yes
  fi
fi

«m:dnl »«x:See if XIM is available.
»«k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[
	  «x:#include <X11/Xlib.h>
»	  «x:#include <X11/Xresource.h>]],
»	 [[XIMProc  callback;]])],
	 [HAVE_XIM=yes
	 «k:AC_DEFINE»(«f:HAVE_XIM», 1, [Define to 1 if XIM is available])],
	 HAVE_XIM=no)

«m:dnl »«x:'--with-xim' now controls only the initial value of use_xim at run time.
»
if test "${with_xim}" != "no"; then
  «k:AC_DEFINE»(«f:USE_XIM», 1,
	    [Define to 1 if we should use XIM, if it is available.])
fi


if test "${HAVE_XIM}" != "no"; then
  late_CFLAGS=$CFLAGS
  if test "$GCC" = yes; then
    CFLAGS="$CFLAGS --pedantic-errors"
  fi
  «k:AC_COMPILE_IFELSE»([«k:AC_LANG_PROGRAM»([[
«x:#include <X11/Xlib.h>
#include <X11/Xresource.h>]],
»[[Display *display;
XrmDatabase db;
char *res_name;
char *res_class;
XIMProc  callback;
XPointer *client_data;
«x:#ifndef __GNUC__
»/* If we're not using GCC, it's probably not XFree86, and this is
   probably right, but we can't use something like --pedantic-errors.  */
extern Bool XRegisterIMInstantiateCallback(Display*, XrmDatabase, char*,
                                           char*, XIMProc, XPointer*);
«x:#endif
»(void)XRegisterIMInstantiateCallback(display, db, res_name, res_class, callback,
   client_data);]])],
    [emacs_cv_arg6_star=yes])
  «k:AH_TEMPLATE»(«f:XRegisterIMInstantiateCallback_arg6»,
         [Define to the type of the 6th arg of XRegisterIMInstantiateCallback,
either XPointer or XPointer*.])«x:dnl
»  if test "$emacs_cv_arg6_star" = yes; then
    «k:AC_DEFINE»(«f:XRegisterIMInstantiateCallback_arg6», [XPointer*])
  else
    «k:AC_DEFINE»(«f:XRegisterIMInstantiateCallback_arg6», [XPointer])
  fi
  CFLAGS=$late_CFLAGS
fi

«x:### Start of font-backend (under any platform) section.
»«m:# »«x:(nothing here yet -- this is a placeholder)
### End of font-backend (under any platform) section.
»
«x:### Start of font-backend (under X11) section.
»if test "${HAVE_X11}" = "yes"; then
    «x:## Use -lXft if available, unless '--with-xft=no'.
»    HAVE_XFT=maybe
    if test "x${with_x}" = "xno"; then
      with_xft="no";
    fi

    if test "$with_xft" != no; then
      EMACS_CHECK_MODULES([FONTCONFIG], [fontconfig >= 2.2.0])
      with_xft=$HAVE_FONTCONFIG
    fi

    if test "x${with_xft}" != "xno"; then

      EMACS_CHECK_MODULES([XFT], [xft >= 0.13.0], [], [HAVE_XFT=no])
      «x:## Because xftfont.c uses XRenderQueryExtension, we also
»      «x:## need to link to -lXrender.
»      HAVE_XRENDER=no
      «k:AC_CHECK_LIB»(Xrender, XRenderQueryExtension, HAVE_XRENDER=yes)
      if test "$HAVE_XFT" != no && test "$HAVE_XRENDER" != no; then
	OLD_CPPFLAGS="$CPPFLAGS"
	OLD_CFLAGS="$CFLAGS"
	OLD_LIBS="$LIBS"
	CPPFLAGS="$CPPFLAGS $XFT_CFLAGS"
	CFLAGS="$CFLAGS $XFT_CFLAGS"
	XFT_LIBS="-lXrender $XFT_LIBS"
	LIBS="$XFT_LIBS $LIBS"
	«k:AC_CHECK_HEADER»(X11/Xft/Xft.h,
	  «k:AC_CHECK_LIB»(Xft, XftFontOpen, HAVE_XFT=yes, , $XFT_LIBS) , ,
          [[«x:#include <X11/X.h>]])
»
	if test "${HAVE_XFT}" = "yes"; then
	  «k:AC_DEFINE»(«f:HAVE_XFT», 1, [Define to 1 if you have the Xft library.])
	    «k:AC_SUBST»(«f:XFT_LIBS»)
	  C_SWITCH_X_SITE="$C_SWITCH_X_SITE $XFT_CFLAGS"
	fi                        «m:# »«x:"${HAVE_XFT}" = "yes"
»	CPPFLAGS=$OLD_CPPFLAGS
	CFLAGS=$OLD_CFLAGS
	LIBS=$OLD_LIBS
      fi                          «m:# »«x:"$HAVE_XFT" != no
»    fi                            «m:# »«x:"x${with_xft}" != "xno"
»
    «x:## We used to allow building with FreeType and without Xft.
»    «x:## However, the ftx font backend driver is not in good shape.
»    if test "$HAVE_XFT" != "yes"; then
       «x:dnl For the "Does Emacs use" message at the end.
»       HAVE_XFT=no
       HAVE_FREETYPE=no
    else
       «x:dnl Strict linkers fail with
»       «x:dnl ftfont.o: undefined reference to symbol 'FT_New_Face'
»       «x:dnl if -lfreetype is not specified.
»       «x:dnl The following is needed to set FREETYPE_LIBS.
»       EMACS_CHECK_MODULES([FREETYPE], [freetype2])

       test "$HAVE_FREETYPE" = "no" && «k:AC_MSG_ERROR»(libxft requires libfreetype)
    fi

    HAVE_LIBOTF=no
    if test "${HAVE_FREETYPE}" = "yes"; then
      «k:AC_DEFINE»(«f:HAVE_FREETYPE», 1,
		[Define to 1 if using the freetype and fontconfig libraries.])
      if test "${with_libotf}" != "no"; then
	EMACS_CHECK_MODULES([LIBOTF], [libotf])
	if test "$HAVE_LIBOTF" = "yes"; then
	  «k:AC_DEFINE»(«f:HAVE_LIBOTF», 1, [Define to 1 if using libotf.])
	  «k:AC_CHECK_LIB»(otf, OTF_get_variation_glyphs,
		       HAVE_OTF_GET_VARIATION_GLYPHS=yes,
		       HAVE_OTF_GET_VARIATION_GLYPHS=no)
	  if test "${HAVE_OTF_GET_VARIATION_GLYPHS}" = "yes"; then
	    «k:AC_DEFINE»(«f:HAVE_OTF_GET_VARIATION_GLYPHS», 1,
		      [Define to 1 if libotf has OTF_get_variation_glyphs.])
	  fi
	fi
      fi
    «x:dnl FIXME should there be an error if HAVE_FREETYPE != yes?
»    «x:dnl Does the new font backend require it, or can it work without it?
»    fi

    HAVE_M17N_FLT=no
    if test "${HAVE_LIBOTF}" = yes; then
      if test "${with_m17n_flt}" != "no"; then
	EMACS_CHECK_MODULES([M17N_FLT], [m17n-flt])
	if test "$HAVE_M17N_FLT" = "yes"; then
	  «k:AC_DEFINE»(«f:HAVE_M17N_FLT», 1, [Define to 1 if using libm17n-flt.])
	fi
      fi
    fi
else
    HAVE_XFT=no
    HAVE_FREETYPE=no
    HAVE_LIBOTF=no
    HAVE_M17N_FLT=no
fi

«x:### End of font-backend (under X11) section.
»
«k:AC_SUBST»(«f:FREETYPE_CFLAGS»)
«k:AC_SUBST»(«f:FREETYPE_LIBS»)
«k:AC_SUBST»(«f:FONTCONFIG_CFLAGS»)
«k:AC_SUBST»(«f:FONTCONFIG_LIBS»)
«k:AC_SUBST»(«f:LIBOTF_CFLAGS»)
«k:AC_SUBST»(«f:LIBOTF_LIBS»)
«k:AC_SUBST»(«f:M17N_FLT_CFLAGS»)
«k:AC_SUBST»(«f:M17N_FLT_LIBS»)

USE_CAIRO=no
if test "${HAVE_X11}" = "yes"; then
  if test "${with_cairo}" != "no"; then
    CAIRO_REQUIRED=1.12.0
    CAIRO_MODULE="cairo >= $CAIRO_REQUIRED"
    PKG_CHECK_MODULES(CAIRO, $CAIRO_MODULE, USE_CAIRO=yes, :)
    if test $USE_CAIRO = yes; then
      «k:AC_DEFINE»(«f:USE_CAIRO», 1, [Define to 1 if using cairo.])
    else
      «k:AC_MSG_ERROR»([cairo requested but not found.])
    fi

    CFLAGS="$CFLAGS $CAIRO_CFLAGS"
    LIBS="$LIBS $CAIRO_LIBS"
    «k:AC_SUBST»(«f:CAIRO_CFLAGS»)
    «k:AC_SUBST»(«f:CAIRO_LIBS»)
  fi
fi

if test "${HAVE_X11}" = "yes"; then
  «k:AC_CHECK_HEADER»(X11/Xlib-xcb.h,
    «k:AC_CHECK_LIB»(xcb, xcb_translate_coordinates, HAVE_XCB=yes))
  if test "${HAVE_XCB}" = "yes"; then
    «k:AC_CHECK_LIB»(X11-xcb, XGetXCBConnection, HAVE_X11_XCB=yes)
    if test "${HAVE_X11_XCB}" = "yes"; then
      «k:AC_DEFINE»(«f:USE_XCB», 1,
[Define to 1 if you have the XCB library and X11-XCB library for mixed
   X11/XCB programming.])
      XCB_LIBS="-lX11-xcb -lxcb"
      «k:AC_SUBST»(«f:XCB_LIBS»)
    fi
  fi
fi

«x:### Use -lXpm if available, unless '--with-xpm=no'.
### mingw32 doesn't use -lXpm, since it loads the library dynamically.
### In the Cygwin-w32 build, we need to use /usr/include/noX/X11/xpm.h
### rather than /usr/include/X11/xpm.h, so we set CPPFLAGS (and
### LDFLAGS) accordingly.
»HAVE_XPM=no
LIBXPM=
if test "${HAVE_W32}" = "yes" && test "${opsys}" = "cygwin"; then
  if test "${with_xpm}" != "no"; then
    SAVE_CPPFLAGS="$CPPFLAGS"
    SAVE_LDFLAGS="$LDFLAGS"
    CPPFLAGS="$CPPFLAGS -I/usr/include/noX"
    LDFLAGS="$LDFLAGS -L/usr/lib/noX"
    «k:AC_CHECK_HEADER»(X11/xpm.h,
      [«k:AC_CHECK_LIB»(Xpm, XpmReadFileToImage, HAVE_XPM=yes)])
    if test "${HAVE_XPM}" = "yes"; then
      «k:AC_MSG_CHECKING»(for XpmReturnAllocPixels preprocessor define)
      «k:AC_EGREP_CPP»(no_return_alloc_pixels,
      [«x:#include "X11/xpm.h"
#ifndef XpmReturnAllocPixels
»no_return_alloc_pixels
«x:#endif
»      ], HAVE_XPM=no, HAVE_XPM=yes)

      if test "${HAVE_XPM}" = "yes"; then
        REAL_CPPFLAGS="$REAL_CPPFLAGS -I/usr/include/noX"
	«k:AC_MSG_RESULT»(yes)
      else
	«k:AC_MSG_RESULT»(no)
        CPPFLAGS="$SAVE_CPPFLAGS"
        LDFLAGS="$SAVE_LDFLAGS"
      fi
    fi
  fi

  if test "${HAVE_XPM}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_XPM», 1, [Define to 1 if you have the Xpm library (-lXpm).])
    LIBXPM=-lXpm
  fi
fi

if test "${HAVE_X11}" = "yes"; then
  «x:dnl Avoid Xpm on AIX unless requested, as it crashes; see Bug#17598.
»  test "$opsys$with_xpm_set" = aix4-2 && with_xpm=no

  if test "${with_xpm}" != "no"; then
    «k:AC_CHECK_HEADER»(X11/xpm.h,
      [«k:AC_CHECK_LIB»(Xpm, XpmReadFileToPixmap, HAVE_XPM=yes, , -lX11)])
    if test "${HAVE_XPM}" = "yes"; then
      «k:AC_MSG_CHECKING»(for XpmReturnAllocPixels preprocessor define)
      «k:AC_EGREP_CPP»(no_return_alloc_pixels,
      [«x:#include "X11/xpm.h"
#ifndef XpmReturnAllocPixels
»no_return_alloc_pixels
«x:#endif
»      ], HAVE_XPM=no, HAVE_XPM=yes)

      if test "${HAVE_XPM}" = "yes"; then
	«k:AC_MSG_RESULT»(yes)
      else
	«k:AC_MSG_RESULT»(no)
      fi
    fi
  fi

  if test "${HAVE_XPM}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_XPM», 1, [Define to 1 if you have the Xpm library (-lXpm).])
    LIBXPM=-lXpm
  elif test "$opsys,$LUCID_LIBW" = aix4-2,-lXaw; then
    «x:dnl AIX -lXaw needs -lXpm linked too; see Bug#17598 Message#152.
»    LIBXPM=-lXpm
  fi
fi

«x:### FIXME: Perhaps regroup to minimize code duplication due to MinGW's
### slightly different requirements wrt image libraries (it doesn't
### use -lXpm because it loads the xpm shared library dynamically at
### run time).
»if test "${opsys}" = "mingw32"; then
  if test "${with_xpm}" != "no"; then
    «k:AC_CHECK_HEADER»(X11/xpm.h, HAVE_XPM=yes, HAVE_XPM=no, [
«x:#define FOR_MSW 1])
»  fi

  if test "${HAVE_XPM}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_XPM», 1, [Define to 1 if you have the Xpm library (-lXpm).])
  fi
fi

«k:AC_SUBST»(«f:LIBXPM»)

«x:### Use -ljpeg if available, unless '--with-jpeg=no'.
»HAVE_JPEG=no
LIBJPEG=
if test "${with_jpeg}" != "no"; then
  «k:AC_CACHE_CHECK»([for jpeglib 6b or later],
    [emacs_cv_jpeglib],
    [OLD_LIBS=$LIBS
     for emacs_cv_jpeglib in yes -ljpeg no; do
       case $emacs_cv_jpeglib in
	 yes) ;;
         no) break;;
	 *) LIBS="$LIBS $emacs_cv_jpeglib";;
       esac
       «k:AC_LINK_IFELSE»(
	 [«k:AC_LANG_PROGRAM»(
	    [[«x:#undef HAVE_STDLIB_H /* Avoid config.h/jpeglib.h collision.  */
»	      «x:#include <stdio.h> /* jpeglib.h needs FILE and size_t.  */
»	      «x:#include <jpeglib.h>
»	      «x:#include <jerror.h>
»	      char verify[JPEG_LIB_VERSION < 62 ? -1 : 1];
	      struct jpeg_decompress_struct cinfo;
	    ]],
	    [[
	      jpeg_create_decompress (&cinfo);
	      WARNMS (&cinfo, JWRN_JPEG_EOF);
	      jpeg_destroy_decompress (&cinfo);
	    ]])],
	 [emacs_link_ok=yes],
	 [emacs_link_ok=no])
       LIBS=$OLD_LIBS
       test $emacs_link_ok = yes && break
     done])
  if test "$emacs_cv_jpeglib" != no; then
    HAVE_JPEG=yes
    «k:AC_DEFINE»([«f:HAVE_JPEG»], 1,
      [Define to 1 if you have the jpeg library (typically -ljpeg).])
    «x:### mingw32 doesn't use -ljpeg, since it loads the library
»    «x:### dynamically when needed, and doesn't want a run-time
»    «x:### dependency on the jpeglib DLL.
»    test "$emacs_cv_jpeglib" != yes && test "${opsys}" != "mingw32" \
    && LIBJPEG=$emacs_cv_jpeglib
  fi
fi
«k:AC_SUBST»(«f:LIBJPEG»)

HAVE_ZLIB=no
LIBZ=
if test "${with_zlib}" != "no"; then
  OLIBS=$LIBS
  «k:AC_SEARCH_LIBS»([inflateEnd], [z], [HAVE_ZLIB=yes])
  LIBS=$OLIBS
  case $ac_cv_search_inflateEnd in
    -*) LIBZ=$ac_cv_search_inflateEnd ;;
  esac
fi
if test "${HAVE_ZLIB}" = "yes"; then
  «k:AC_DEFINE»([«f:HAVE_ZLIB»], 1, [Define to 1 if you have the zlib library (-lz).])
  «x:### mingw32 doesn't use -lz, since it loads the library dynamically.
»  if test "${opsys}" = "mingw32"; then
     LIBZ=
  fi
fi
«k:AC_SUBST»(«f:LIBZ»)

«x:### Dynamic modules support
»LIBMODULES=
HAVE_MODULES=no
MODULES_OBJ=
MODULES_SUFFIX=
if test "${with_modules}" != "no"; then
  if test "$opsys" = "gnu-linux"; then
    LIBMODULES="-ldl"
    MODULES_SUFFIX=".so"
    HAVE_MODULES=yes
  elif test "$opsys" = "cygwin"; then
    MODULES_SUFFIX=".dll"
    HAVE_MODULES=yes
  elif test "$opsys" = "darwin"; then
    MODULES_SUFFIX=".so"
    HAVE_MODULES=yes
  elif test "$opsys" = "mingw32"; then
    MODULES_SUFFIX=".dll"
    HAVE_MODULES=yes
  else
    «m:# »«x:BSD system have dlopen in the libc
»    «k:AC_CHECK_FUNC»(dlopen, [MODULES_SUFFIX=".so"]
                          [HAVE_MODULES=yes], [])
  fi

  if test "${HAVE_MODULES}" = no; then
    «k:AC_MSG_ERROR»([Dynamic modules are not supported on your system])
  fi
fi

if test "${HAVE_MODULES}" = yes; then
   MODULES_OBJ="dynlib.o emacs-module.o"
   «k:AC_DEFINE»(«f:HAVE_MODULES», 1, [Define to 1 if dynamic modules are enabled])
   «k:AC_DEFINE_UNQUOTED»(«f:MODULES_SUFFIX», "$MODULES_SUFFIX",
     [System extension for dynamic libraries])
fi
«k:AC_SUBST»(«f:MODULES_OBJ»)
«k:AC_SUBST»(«f:LIBMODULES»)
AX_GCC_VAR_ATTRIBUTE(cleanup)
«k:AC_CHECK_FUNCS»(dladdr)

«x:### Use -lpng if available, unless '--with-png=no'.
»HAVE_PNG=no
LIBPNG=
PNG_CFLAGS=
if test "${NS_IMPL_COCOA}" = yes; then
  : «m:# »«x:Nothing to do
»elif test "${with_png}" != no; then
  «m:# »«x:mingw32 loads the library dynamically.
»  if test "$opsys" = mingw32; then
    «k:AC_CHECK_HEADER»([png.h], [HAVE_PNG=yes])
  elif test "${HAVE_X11}" = "yes" || test "${HAVE_W32}" = "yes"; then
    «k:AC_MSG_CHECKING»([for png])
    png_cflags=`(libpng-config --cflags) 2>&AS_MESSAGE_LOG_FD` &&
    png_libs=`(libpng-config --libs) 2>&AS_MESSAGE_LOG_FD` || {
      «m:# »«x:libpng-config does not work; configure by hand.
»      «m:# »«x:Debian unstable as of July 2003 has multiple libpngs, and puts png.h
»      «m:# »«x:in /usr/include/libpng.
»      if test -r /usr/include/libpng/png.h &&
	 test ! -r /usr/include/png.h; then
	png_cflags=-I/usr/include/libpng
      else
	png_cflags=
      fi
      png_libs='-lpng'
    }
    SAVE_CFLAGS=$CFLAGS
    SAVE_LIBS=$LIBS
    CFLAGS="$CFLAGS $png_cflags"
    LIBS="$png_libs -lz -lm $LIBS"
    «k:AC_LINK_IFELSE»(
      [«k:AC_LANG_PROGRAM»([[«x:#include <png.h>]],
»	 [[return !png_get_channels (0, 0);]])],
      [HAVE_PNG=yes
       PNG_CFLAGS=`«k:AS_ECHO»(["$png_cflags"]) | sed -e "$edit_cflags"`
       LIBPNG=$png_libs
       «m:# »«x:$LIBPNG requires explicit -lz in some cases.
»       «m:# »«x:We don't know what those cases are, exactly, so play it safe and
»       «m:# »«x:append -lz to any nonempty $LIBPNG, unless we're already using LIBZ.
»       if test -n "$LIBPNG" && test -z "$LIBZ"; then
	 LIBPNG="$LIBPNG -lz"
       fi])
    CFLAGS=$SAVE_CFLAGS
    LIBS=$SAVE_LIBS
    «k:AC_MSG_RESULT»([$HAVE_PNG])
  fi
fi
if test $HAVE_PNG = yes; then
  «k:AC_DEFINE»([«f:HAVE_PNG»], [1], [Define to 1 if you have the png library.])

  SAVE_CFLAGS=$CFLAGS
  CFLAGS="$CFLAGS $PNG_CFLAGS"
  «k:AC_CHECK_DECL»([png_longjmp],
    [],
    [«k:AC_DEFINE»([«f:PNG_DEPSTRUCT»], [],
       [Define to empty to suppress deprecation warnings when building
	with --enable-gcc-warnings and with libpng versions before 1.5,
	which lack png_longjmp.])],
    [[«x:#include <png.h>
»    ]])
  CFLAGS=$SAVE_CFLAGS
fi
«k:AC_SUBST»(«f:LIBPNG»)
«k:AC_SUBST»(«f:PNG_CFLAGS»)

«x:### Use -ltiff if available, unless '--with-tiff=no'.
### mingw32 doesn't use -ltiff, since it loads the library dynamically.
»HAVE_TIFF=no
LIBTIFF=
if test "${opsys}" = "mingw32"; then
  if test "${with_tiff}" != "no"; then
    «k:AC_CHECK_HEADER»(tiffio.h, HAVE_TIFF=yes, HAVE_TIFF=no)
  fi
  if test "${HAVE_TIFF}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_TIFF», 1, [Define to 1 if you have the tiff library (-ltiff).])
  fi
elif test "${HAVE_X11}" = "yes" || test "${HAVE_W32}" = "yes"; then
  if test "${with_tiff}" != "no"; then
    «k:AC_CHECK_HEADER»(tiffio.h,
      [tifflibs="-lz -lm"
      «m:# »«x:At least one tiff package requires the jpeg library.
»      if test "${HAVE_JPEG}" = yes; then tifflibs="-ljpeg $tifflibs"; fi
      «k:AC_CHECK_LIB»(tiff, TIFFGetVersion, HAVE_TIFF=yes, , $tifflibs)])
  fi

  if test "${HAVE_TIFF}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_TIFF», 1, [Define to 1 if you have the tiff library (-ltiff).])
    «x:dnl FIXME -lz -lm, as per libpng?
»    LIBTIFF=-ltiff
  fi
fi
«k:AC_SUBST»(«f:LIBTIFF»)

«x:### Use -lgif or -lungif if available, unless '--with-gif=no'.
### mingw32 doesn't use -lgif/-lungif, since it loads the library dynamically.
»HAVE_GIF=no
LIBGIF=
if test "${opsys}" = "mingw32"; then
  if test "${with_gif}" != "no"; then
    «k:AC_CHECK_HEADER»(gif_lib.h, HAVE_GIF=yes, HAVE_GIF=no)
  fi
  if test "${HAVE_GIF}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_GIF», 1, [Define to 1 if you have a gif (or ungif) library.])
  fi
elif test "${HAVE_X11}" = "yes" && test "${with_gif}" != "no" \
        || test "${HAVE_W32}" = "yes"; then
  «k:AC_CHECK_HEADER»(gif_lib.h,
«m:# »«x:EGifPutExtensionLast only exists from version libungif-4.1.0b1.
»«m:# »«x:Earlier versions can crash Emacs, but version 5.0 removes EGifPutExtensionLast.
»    [«k:AC_CHECK_LIB»(gif, GifMakeMapObject, HAVE_GIF=yes,
        [«k:AC_CHECK_LIB»(gif, EGifPutExtensionLast, HAVE_GIF=yes, HAVE_GIF=maybe)])])

  if test "$HAVE_GIF" = yes; then
    LIBGIF=-lgif
  elif test "$HAVE_GIF" = maybe; then
«m:# »«x:If gif_lib.h but no libgif, try libungif.
»    «k:AC_CHECK_LIB»(ungif, EGifPutExtensionLast, HAVE_GIF=yes, HAVE_GIF=no)
    test "$HAVE_GIF" = yes && LIBGIF=-lungif
  fi

  if test "${HAVE_GIF}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_GIF», 1, [Define to 1 if you have a gif (or ungif) library.])
  fi
fi
«k:AC_SUBST»(«f:LIBGIF»)

«m:dnl »«x:Check for required libraries.
»if test "${HAVE_X11}" = "yes"; then
  MISSING=""
  WITH_NO=""
  test "${with_xpm}" != "no" && test "${HAVE_XPM}" != "yes" &&
    MISSING="libXpm" && WITH_NO="--with-xpm=no"
  test "${with_jpeg}" != "no" && test "${HAVE_JPEG}" != "yes" &&
    MISSING="$MISSING libjpeg" && WITH_NO="$WITH_NO --with-jpeg=no"
  test "${with_png}" != "no" && test "${HAVE_PNG}" != "yes" &&
    MISSING="$MISSING libpng" && WITH_NO="$WITH_NO --with-png=no"
  test "${with_gif}" != "no" && test "${HAVE_GIF}" != "yes" &&
    MISSING="$MISSING libgif/libungif" && WITH_NO="$WITH_NO --with-gif=no"
  test "${with_tiff}" != "no" && test "${HAVE_TIFF}" != "yes" &&
    MISSING="$MISSING libtiff" && WITH_NO="$WITH_NO --with-tiff=no"

  if test "X${MISSING}" != X; then
    «k:AC_MSG_ERROR»([The following required libraries were not found:
    $MISSING
Maybe some development libraries/packages are missing?
If you don't want to link with them give
    $WITH_NO
as options to configure])
  fi
fi

«x:### Use -lgpm if available, unless '--with-gpm=no'.
»HAVE_GPM=no
LIBGPM=
if test "${with_gpm}" != "no"; then
  «k:AC_CHECK_HEADER»(gpm.h,
    [«k:AC_CHECK_LIB»(gpm, Gpm_Open, HAVE_GPM=yes)])

  if test "${HAVE_GPM}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_GPM», 1, [Define to 1 if you have the gpm library (-lgpm).])
    LIBGPM=-lgpm
  fi
fi
«k:AC_SUBST»(«f:LIBGPM»)

«m:dnl »«x:Check for malloc/malloc.h on darwin
»«k:AC_CHECK_HEADERS_ONCE»(malloc/malloc.h)

GNUSTEP_CFLAGS=
«x:### Use NeXTstep API to implement GUI.
»if test "${HAVE_NS}" = "yes"; then
  «k:AC_DEFINE»(«f:HAVE_NS», 1, [Define to 1 if you are using the NeXTstep API, either GNUstep or Cocoa on Mac OS X.])
  if test "${NS_IMPL_COCOA}" = "yes"; then
    «k:AC_DEFINE»(«f:NS_IMPL_COCOA», 1, [Define to 1 if you are using NS windowing under MacOS X.])
  fi
  if test "${NS_IMPL_GNUSTEP}" = "yes"; then
    «k:AC_DEFINE»(«f:NS_IMPL_GNUSTEP», 1, [Define to 1 if you are using NS windowing under GNUstep.])
    if test $NS_GNUSTEP_CONFIG != yes; then
      «m:# »«x:See also .m.o rule in src/Makefile.in.  */
»      «m:# »«x:FIXME: are all these flags really needed?  Document here why.  */
»      GNUSTEP_CFLAGS="-D_REENTRANT -fPIC -fno-strict-aliasing -I${GNUSTEP_SYSTEM_HEADERS} ${GNUSTEP_LOCAL_HEADERS}"
      «x:## Extra CFLAGS applied to src/*.m files.
»      GNU_OBJC_CFLAGS="$GNU_OBJC_CFLAGS -fgnu-runtime -Wno-import -fconstant-string-class=NSConstantString -DGNUSTEP_BASE_LIBRARY=1 -DGNU_GUI_LIBRARY=1 -DGNU_RUNTIME=1 -DGSWARN -DGSDIAGNOSE"
    fi
  fi
  OTHER_FILES=ns-app
fi

«x:### Use session management (-lSM -lICE) if available
»HAVE_X_SM=no
LIBXSM=
if test "${HAVE_X11}" = "yes"; then
  «k:AC_CHECK_HEADER»(X11/SM/SMlib.h,
    [«k:AC_CHECK_LIB»(SM, SmcOpenConnection, HAVE_X_SM=yes, , -lICE)])

  if test "${HAVE_X_SM}" = "yes"; then
    «k:AC_DEFINE»(«f:HAVE_X_SM», 1, [Define to 1 if you have the SM library (-lSM).])
    LIBXSM="-lSM -lICE"
  fi
fi
«k:AC_SUBST»(«f:LIBXSM»)

«x:### Use XRandr (-lXrandr) if available
»HAVE_XRANDR=no
if test "${HAVE_X11}" = "yes"; then
  XRANDR_REQUIRED=1.2.2
  XRANDR_MODULES="xrandr >= $XRANDR_REQUIRED"
  EMACS_CHECK_MODULES([XRANDR], [$XRANDR_MODULES])
  if test $HAVE_XRANDR = no; then
    «m:# »«x:Test old way in case pkg-config doesn't have it (older machines).
»    «m:# »«x:Include Xrender.h by hand to work around bug in older Xrandr.h
»    «m:# »«x:(e.g. RHEL5) and silence (harmless) configure warning (bug#18465).
»    «k:AC_CHECK_HEADER»(X11/extensions/Xrandr.h,
      [«k:AC_CHECK_LIB»(Xrandr, XRRGetScreenResources, HAVE_XRANDR=yes)],
      [], [«k:AC_INCLUDES_DEFAULT»
«x:#include <X11/extensions/Xrender.h>])
»    if test $HAVE_XRANDR = yes; then
      XRANDR_LIBS=-lXrandr
    fi
  fi
  if test $HAVE_XRANDR = yes; then
    SAVE_CFLAGS="$CFLAGS"
    SAVE_LIBS="$LIBS"
    CFLAGS="$XRANDR_CFLAGS $CFLAGS"
    LIBS="$XRANDR_LIBS $LIBS"
    «k:AC_CHECK_FUNCS»(XRRGetOutputPrimary XRRGetScreenResourcesCurrent)
    CFLAGS="$SAVE_CFLAGS"
    LIBS="$SAVE_LIBS"

    «k:AC_DEFINE»(«f:HAVE_XRANDR», 1, [Define to 1 if you have the XRandr extension.])
  fi
fi
«k:AC_SUBST»(«f:XRANDR_CFLAGS»)
«k:AC_SUBST»(«f:XRANDR_LIBS»)

«x:### Use Xinerama (-lXinerama) if available
»HAVE_XINERAMA=no
if test "${HAVE_X11}" = "yes"; then
  XINERAMA_REQUIRED=1.0.2
  XINERAMA_MODULES="xinerama >= $XINERAMA_REQUIRED"
  EMACS_CHECK_MODULES([XINERAMA], [$XINERAMA_MODULES])
  if test $HAVE_XINERAMA = no; then
    «m:# »«x:Test old way in case pkg-config doesn't have it (older machines).
»    «k:AC_CHECK_HEADER»(X11/extensions/Xinerama.h,
      [«k:AC_CHECK_LIB»(Xinerama, XineramaQueryExtension, HAVE_XINERAMA=yes)])
    if test $HAVE_XINERAMA = yes; then
      XINERAMA_LIBS=-lXinerama
    fi
  fi
  if test $HAVE_XINERAMA = yes; then
    «k:AC_DEFINE»(«f:HAVE_XINERAMA», 1, [Define to 1 if you have the Xinerama extension.])
  fi
fi
«k:AC_SUBST»(«f:XINERAMA_CFLAGS»)
«k:AC_SUBST»(«f:XINERAMA_LIBS»)

«x:### Use Xfixes (-lXfixes) if available
»HAVE_XFIXES=no
if test "${HAVE_X11}" = "yes"; then
  XFIXES_REQUIRED=4.0.0
  XFIXES_MODULES="xfixes >= $XFIXES_REQUIRED"
  EMACS_CHECK_MODULES([XFIXES], [$XFIXES_MODULES])
  if test $HAVE_XFIXES = no; then
    «m:# »«x:Test old way in case pkg-config doesn't have it (older machines).
»    «k:AC_CHECK_HEADER»(X11/extensions/Xfixes.h,
      [«k:AC_CHECK_LIB»(Xfixes, XFixesHideCursor, HAVE_XFIXES=yes)])
    if test $HAVE_XFIXES = yes; then
      XFIXES_LIBS=-lXfixes
    fi
  fi
  if test $HAVE_XFIXES = yes; then
    «k:AC_DEFINE»(«f:HAVE_XFIXES», 1, [Define to 1 if you have the Xfixes extension.])
  fi
fi
«k:AC_SUBST»(«f:XFIXES_CFLAGS»)
«k:AC_SUBST»(«f:XFIXES_LIBS»)

«x:### Use libxml (-lxml2) if available
### mingw32 doesn't use -lxml2, since it loads the library dynamically.
»HAVE_LIBXML2=no
if test "${with_xml2}" != "no"; then
  «x:### I'm not sure what the version number should be, so I just guessed.
»  EMACS_CHECK_MODULES([LIBXML2], [libxml-2.0 > 2.6.17])
  «m:# »«x:Built-in libxml2 on OS X 10.8 lacks libxml-2.0.pc.
»  if test "${HAVE_LIBXML2}" != "yes" && test "$opsys" = "darwin"; then
    SAVE_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$CPPFLAGS -I$xcsdkdir/usr/include/libxml2"
    «k:AC_CHECK_HEADER»(libxml/HTMLparser.h,
      [«k:AC_CHECK_DECL»(HTML_PARSE_RECOVER, HAVE_LIBXML2=yes, ,
		     [«x:#include <libxml/HTMLparser.h>])])
»    CPPFLAGS="$SAVE_CPPFLAGS"
    if test "${HAVE_LIBXML2}" = "yes"; then
      LIBXML2_CFLAGS="-I'$xcsdkdir/usr/include/libxml2'"
      LIBXML2_LIBS="-lxml2"
    fi
  fi
  if test "${HAVE_LIBXML2}" = "yes"; then
    if test "${opsys}" != "mingw32"; then
      «k:AC_CHECK_LIB»(xml2, htmlReadMemory, HAVE_LIBXML2=yes, HAVE_LIBXML2=no,
        [$LIBXML2_LIBS])
    else
      LIBXML2_LIBS=""
    fi
    if test "${HAVE_LIBXML2}" = "yes"; then
      «k:AC_DEFINE»(«f:HAVE_LIBXML2», 1, [Define to 1 if you have the libxml library (-lxml2).])
    else
      LIBXML2_LIBS=""
      LIBXML2_CFLAGS=""
    fi
  fi
fi
«k:AC_SUBST»(«f:LIBXML2_LIBS»)
«k:AC_SUBST»(«f:LIBXML2_CFLAGS»)

«m:# »«x:If netdb.h doesn't declare h_errno, we must declare it by hand.
»«m:# »«x:On MinGW, that is provided by nt/inc/sys/socket.h and w32.c.
»if test "${opsys}" = "mingw32"; then
  emacs_cv_netdb_declares_h_errno=yes
fi
«k:AC_CACHE_CHECK»(whether netdb declares h_errno,
	       emacs_cv_netdb_declares_h_errno,
[«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <netdb.h>]],
»  [[return h_errno;]])],
  emacs_cv_netdb_declares_h_errno=yes, emacs_cv_netdb_declares_h_errno=no)])
if test $emacs_cv_netdb_declares_h_errno = yes; then
  «k:AC_DEFINE»(«f:HAVE_H_ERRNO», 1, [Define to 1 if netdb.h declares h_errno.])
fi

«m:# »«x:Check for mail-locking functions in a "mail" library.  Probably this should
»«m:# »«x:have the same check as for liblockfile below.
»«k:AC_CHECK_LIB»(mail, maillock, have_mail=yes, have_mail=no)
if test $have_mail = yes; then
  LIBS_MAIL=-lmail
  «k:AC_DEFINE»(«f:HAVE_LIBMAIL», 1, [Define to 1 if you have the 'mail' library (-lmail).])

  OLD_LIBS=$LIBS
  LIBS="$LIBS_MAIL $LIBS"
  «k:AC_CHECK_FUNCS»(touchlock)
  LIBS=$OLD_LIBS
else
  LIBS_MAIL=
fi
«m:dnl »«x:Debian, at least:
»«k:AC_CHECK_LIB»(lockfile, maillock, have_lockfile=yes, have_lockfile=no)
if test $have_lockfile = yes; then
   LIBS_MAIL=-llockfile
   «k:AC_DEFINE»(«f:HAVE_LIBLOCKFILE», 1, [Define to 1 if you have the 'lockfile' library (-llockfile).])
else
«m:# »«x:If we have the shared liblockfile, assume we must use it for mail
»«m:# »«x:locking (e.g. Debian).  If we couldn't link against liblockfile
»«m:# »«x:(no liblockfile.a installed), ensure that we don't need to.
»  «x:dnl This works for files generally, not just executables.
»  «x:dnl Should we look elsewhere for it?  Maybe examine /etc/ld.so.conf?
»  «k:AC_CHECK_PROG»(liblockfile, liblockfile.so, yes, no,
                /usr/lib:/lib:/usr/local/lib:$LD_LIBRARY_PATH)
  if test $ac_cv_prog_liblockfile = yes; then
    «k:AC_MSG_ERROR»([Shared liblockfile found but can't link against it.
This probably means that movemail could lose mail.
There may be a 'development' package to install containing liblockfile.])
  fi
fi
«k:AC_CHECK_HEADERS_ONCE»(maillock.h)
«k:AC_SUBST»(«f:LIBS_MAIL»)

«x:## Define MAIL_USE_FLOCK (or LOCKF) if the mailer uses flock (or lockf) to
## interlock access to the mail spool.  The alternative is a lock file named
## /usr/spool/mail/$USER.lock.
»mail_lock=no
case "$opsys" in
  aix4-2) mail_lock="lockf" ;;

  gnu|freebsd|dragonfly|netbsd|openbsd|darwin|irix6-5) mail_lock="flock" ;;

  «x:## On GNU/Linux systems, both methods are used by various mail programs.
»  «x:## I assume most people are using newer mailers that have heard of flock.
»  «x:## Change this if you need to.
»  «x:## Debian contains a patch which says: "On Debian/GNU/Linux systems,
»  «x:## configure gets the right answers, and that means *NOT* using flock.
»  «x:## Using flock is guaranteed to be the wrong thing. See Debian Policy
»  «x:## for details." and then uses '#ifdef DEBIAN'.  Unfortunately the
»  «x:## Debian maintainer hasn't provided a clean fix for Emacs.
»  «x:## movemail.c will use 'maillock' when MAILDIR, HAVE_LIBMAIL and
»  «x:## HAVE_MAILLOCK_H are defined, so the following appears to be the
»  «x:## correct logic.  -- fx
»  «x:## We must check for HAVE_LIBLOCKFILE too, as movemail does.
»  «x:## liblockfile is a Free Software replacement for libmail, used on
»  «x:## Debian systems and elsewhere. -rfr.
»  gnu-*)
    mail_lock="flock"
    if test $have_mail = yes || test $have_lockfile = yes; then
      test $ac_cv_header_maillock_h = yes && mail_lock=no
    fi
    ;;

  mingw32)
    mail_lock="none-needed" ;;
esac

BLESSMAIL_TARGET=
case "$mail_lock" in
  flock) «k:AC_DEFINE»(«f:MAIL_USE_FLOCK», 1, [Define if the mailer uses flock to interlock the mail spool.]) ;;

  lockf) «k:AC_DEFINE»(«f:MAIL_USE_LOCKF», 1, [Define if the mailer uses lockf to interlock the mail spool.]) ;;

  none-needed) ;;

  *) BLESSMAIL_TARGET="need-blessmail" ;;
esac
«k:AC_SUBST»(«f:BLESSMAIL_TARGET»)

OLD_LIBS=$LIBS
LIBS="$LIB_PTHREAD $LIB_MATH $LIBS"
«k:AC_CHECK_FUNCS»(accept4 fchdir gethostname \
getrusage get_current_dir_name \
lrand48 random rint \
select getpagesize setlocale newlocale \
getrlimit setrlimit shutdown getaddrinfo \
pthread_sigmask strsignal setitimer \
sendto recvfrom getsockname getpeername getifaddrs freeifaddrs \
gai_strerror sync \
getpwent endpwent getgrent endgrent \
cfmakeraw cfsetspeed copysign __executable_start log2)
LIBS=$OLD_LIBS

«m:dnl »«x:No need to check for aligned_alloc and posix_memalign if using
»«m:dnl »«x:gmalloc.o, as it supplies them, unless we're using hybrid_malloc.
»«m:dnl »«x:Don't use these functions on Darwin as they are incompatible with
»«m:dnl »«x:unexmacosx.c.
»if (test -z "$GMALLOC_OBJ" || test "$hybrid_malloc" = yes) \
  && test "$opsys" != darwin; then
  «k:AC_CHECK_FUNCS»([aligned_alloc posix_memalign], [break])
fi

«m:dnl »«x:Cannot use AC_CHECK_FUNCS
»«k:AC_CACHE_CHECK»([for __builtin_unwind_init],
	       emacs_cv_func___builtin_unwind_init,
[«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([], [__builtin_unwind_init ();])],
		emacs_cv_func___builtin_unwind_init=yes,
		emacs_cv_func___builtin_unwind_init=no)])
if test $emacs_cv_func___builtin_unwind_init = yes; then
  «k:AC_DEFINE»(«f:HAVE___BUILTIN_UNWIND_INIT», 1,
	    [Define to 1 if you have the '__builtin_unwind_init' function.])
fi

«k:AC_CHECK_HEADERS_ONCE»(sys/un.h)

«k:AC_FUNC_FSEEKO»

«m:# »«x:UNIX98 PTYs.
»«k:AC_CHECK_FUNCS»(grantpt)

«m:# »«x:PTY-related GNU extensions.
»«k:AC_CHECK_FUNCS»(getpt posix_openpt)

«m:# »«x:Check this now, so that we will NOT find the above functions in ncurses.
»«m:# »«x:That is because we have not set up to link ncurses in lib-src.
»«m:# »«x:It's better to believe a function is not available
»«m:# »«x:than to expect to find it in ncurses.
»«m:# »«x:Also we need tputs and friends to be able to build at all.
»«k:AC_MSG_CHECKING»([for library containing tputs])
«m:# »«x:Run a test program that contains a call to tputs, a call that is
»«m:# »«x:never executed.  This tests whether a pre-'main' dynamic linker
»«m:# »«x:works with the library.  It's too much trouble to actually call
»«m:# »«x:tputs in the test program, due to portability hassles.  When
»«m:# »«x:cross-compiling, assume the test program will run if it links.
»«k:AC_DEFUN»([tputs_link_source], [
  «k:AC_LANG_SOURCE»(
     [[extern void tputs (const char *, int, int (*)(int));
       int main (int argc, char **argv)
       {
	  if (argc == 10000)
	    tputs (argv[0], 0, 0);
	  return 0;
       }]])
])
if test "${opsys}" = "mingw32"; then
  msg='none required'
else
  «m:# »«x:Maybe curses should be tried earlier?
»  «m:# »«x:See http://debbugs.gnu.org/cgi/bugreport.cgi?bug=9736#35
»  for tputs_library in '' tinfo ncurses terminfo termcap curses; do
    OLIBS=$LIBS
    if test -z "$tputs_library"; then
      LIBS_TERMCAP=
      msg='none required'
    else
      LIBS_TERMCAP=-l$tputs_library
      msg=$LIBS_TERMCAP
      LIBS="$LIBS_TERMCAP $LIBS"
    fi
    «k:AC_RUN_IFELSE»([tputs_link_source], [], [msg=no],
      [«k:AC_LINK_IFELSE»([tputs_link_source], [], [msg=no])])
    LIBS=$OLIBS
    if test "X$msg" != Xno; then
      break
    fi
  done
fi
«k:AC_MSG_RESULT»([$msg])
if test "X$msg" = Xno; then
  «k:AC_MSG_ERROR»([The required function 'tputs' was not found in any library.
The following libraries were tried (in order):
  libtinfo, libncurses, libterminfo, libtermcap, libcurses
Please try installing whichever of these libraries is most appropriate
for your system, together with its header files.
For example, a libncurses-dev(el) or similar package.])
fi

«x:## Use termcap instead of terminfo?
## Only true for: freebsd < 40000, ms-w32, msdos, netbsd < 599002500.
»TERMINFO=yes
«x:## FIXME?  In the cases below where we unconditionally set
## LIBS_TERMCAP="-lncurses", this overrides LIBS_TERMCAP = -ltinfo,
## if that was found above to have tputs.
## Should we use the gnu* logic everywhere?
»case "$opsys" in
  «x:## darwin: Prevents crashes when running Emacs in Terminal.app under 10.2.
»  «x:##  The ncurses library has been moved out of the System framework in
»  «x:##  Mac OS X 10.2.  So if configure detects it, set the command-line
»  «x:##  option to use it.
»  darwin) LIBS_TERMCAP="-lncurses" ;;

  gnu*) test -z "$LIBS_TERMCAP" && LIBS_TERMCAP="-lncurses" ;;

  freebsd)
    «k:AC_MSG_CHECKING»([whether FreeBSD is new enough to use terminfo])
    «k:AC_CACHE_VAL»(emacs_cv_freebsd_terminfo,
    [«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <osreldate.h>]],
»[[«x:#if __FreeBSD_version < 400000
»fail;
«x:#endif
»]])], emacs_cv_freebsd_terminfo=yes, emacs_cv_freebsd_terminfo=no)])

    «k:AC_MSG_RESULT»($emacs_cv_freebsd_terminfo)

    if test $emacs_cv_freebsd_terminfo = yes; then
      LIBS_TERMCAP="-lncurses"
    else
      TERMINFO=no
      LIBS_TERMCAP="-ltermcap"
    fi
    ;;

  mingw32)
    TERMINFO=no
    LIBS_TERMCAP=
    ;;

  netbsd)
    if test "x$LIBS_TERMCAP" != "x-lterminfo"; then
      TERMINFO=no
      LIBS_TERMCAP="-ltermcap"
    fi
    ;;

  openbsd | dragonfly) LIBS_TERMCAP="-lncurses" ;;

  «x:## hpux: Make sure we get select from libc rather than from libcurses
»  «x:##  because libcurses on HPUX 10.10 has a broken version of select.
»  «x:##  We used to use -lc -lcurses, but this may be cleaner.
»  «x:## FIXME?  But TERMINFO = yes on hpux (it used to be explicitly
»  «m:# »«x:set that way, now it uses the default).  Isn't this a contradiction?
»  hpux*) LIBS_TERMCAP="-ltermcap" ;;

esac

TERMCAP_OBJ=tparam.o
if test $TERMINFO = yes; then
  «k:AC_DEFINE»(«f:TERMINFO», 1, [Define to 1 if you use terminfo instead of termcap.])
  TERMCAP_OBJ=terminfo.o
fi
if test "X$LIBS_TERMCAP" = "X-lncurses"; then
  «k:AC_DEFINE»(«f:USE_NCURSES», 1, [Define to 1 if you use ncurses.])
fi
«k:AC_SUBST»(«f:LIBS_TERMCAP»)
«k:AC_SUBST»(«f:TERMCAP_OBJ»)

«m:# »«x:GNU/Linux-specific timer functions.
»«k:AC_CACHE_CHECK»([for timerfd interface], [emacs_cv_have_timerfd],
  [«k:AC_COMPILE_IFELSE»(
     [«k:AC_LANG_PROGRAM»([[«x:#include <sys/timerfd.h>
»		      ]],
		      [[timerfd_create (CLOCK_REALTIME,
					TFD_CLOEXEC | TFD_NONBLOCK);
			timerfd_settime (0, TFD_TIMER_ABSTIME, 0, 0);]])],
     [emacs_cv_have_timerfd=yes],
     [emacs_cv_have_timerfd=no])])
if test "$emacs_cv_have_timerfd" = yes; then
  «k:AC_DEFINE»([«f:HAVE_TIMERFD»], 1,
    [Define to 1 if timerfd functions are supported as in GNU/Linux.])
fi

«m:# »«x:Alternate stack for signal handlers.
»«k:AC_CACHE_CHECK»([whether signals can be handled on alternate stack],
	       [emacs_cv_alternate_stack],
  [«k:AC_COMPILE_IFELSE»(
     [«k:AC_LANG_PROGRAM»([[«x:#include <signal.h>
»		      ]],
		      [[stack_t ss;
			struct sigaction sa;
			ss.ss_sp = malloc (SIGSTKSZ);
			ss.ss_size = SIGSTKSZ;
			sa.sa_flags = SA_SIGINFO | SA_ONSTACK;
			sigaltstack (&ss, 0);
			sigaction (SIGSEGV, &sa, 0);]])],
     [emacs_cv_alternate_stack=yes],
     [emacs_cv_alternate_stack=no])])

«m:# »«x:Do we have res_init, for detecting changes in /etc/resolv.conf?
»«m:# »«x:On Darwin, res_init appears not to be useful: see bug#562 and
»«m:# »«x:http://lists.gnu.org/archive/html/emacs-devel/2007-11/msg01467.html
»resolv=no

if test $opsys != darwin; then

  «k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <netinet/in.h>
#include <arpa/nameser.h>
#include <resolv.h>]],
»    [[return res_init();]])],
    have_res_init=yes, have_res_init=no)
  if test "$have_res_init" = no; then
    OLIBS="$LIBS"
    LIBS="$LIBS -lresolv"
    «k:AC_MSG_CHECKING»(for res_init with -lresolv)
    «k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <netinet/in.h>
#include <arpa/nameser.h>
#include <resolv.h>]],
»      [[return res_init();]])],
      have_res_init=yes, have_res_init=no)
    «k:AC_MSG_RESULT»($have_res_init)
    if test "$have_res_init" = yes ; then
      resolv=yes
    fi
    LIBS="$OLIBS"
  fi

  if test "$have_res_init" = yes; then
    «k:AC_DEFINE»(«f:HAVE_RES_INIT», 1, [Define to 1 if res_init is available.])
  fi
fi                              «x:dnl !darwin
»
«m:# »«x:Do we need the Hesiod library to provide the support routines?
»«m:dnl »«x:FIXME?  Should we be skipping this on Darwin too?
»LIBHESIOD=
if test "$with_hesiod" != no ; then
  «m:# »«x:Don't set $LIBS here -- see comments above.  FIXME which comments?
»  «k:AC_CHECK_FUNC»(res_send, , [«k:AC_CHECK_FUNC»(__res_send, ,
     [«k:AC_CHECK_LIB»(resolv, res_send, resolv=yes,
		  [«k:AC_CHECK_LIB»(resolv, __res_send, resolv=yes)])])])
  if test "$resolv" = yes ; then
    RESOLVLIB=-lresolv
  else
    RESOLVLIB=
  fi
  «k:AC_CHECK_FUNC»(hes_getmailhost, , [«k:AC_CHECK_LIB»(hesiod, hes_getmailhost,
	hesiod=yes, :, $RESOLVLIB)])

  if test x"$hesiod" = xyes; then
    LIBHESIOD=-lhesiod
  fi
fi
«k:AC_SUBST»(«f:LIBHESIOD»)

«m:# »«x:Do we need libresolv (due to res_init or Hesiod)?
»if test "$resolv" = yes && test $opsys != darwin; then
  LIBRESOLV=-lresolv
else
  LIBRESOLV=
fi
«k:AC_SUBST»(«f:LIBRESOLV»)

«m:# »«x:These tell us which Kerberos-related libraries to use.
»COM_ERRLIB=
CRYPTOLIB=
KRB5LIB=
DESLIB=
KRB4LIB=

if test "${with_kerberos}" != no; then
  OLD_LIBS=$LIBS
  «k:AC_CHECK_LIB»(com_err, com_err, have_com_err=yes, have_com_err=no)
  if test $have_com_err = yes; then
    COM_ERRLIB=-lcom_err
    LIBS="$COM_ERRLIB $LIBS"
  fi
  «k:AC_CHECK_LIB»(crypto, mit_des_cbc_encrypt, have_crypto=yes, have_crypto=no)
  if test $have_crypto = yes; then
    CRYPTOLIB=-lcrypto
    LIBS="$CRYPTOLIB $LIBS"
  fi
  «k:AC_CHECK_LIB»(k5crypto, mit_des_cbc_encrypt, have_k5crypto=yes, have_k5crypto=no)
  if test $have_k5crypto = yes; then
    CRYPTOLIB=-lk5crypto
    LIBS="$CRYPTOLIB $LIBS"
  fi
  «k:AC_CHECK_LIB»(krb5, krb5_init_context, have_krb5=yes, have_krb5=no)
  if test $have_krb5=yes; then
    KRB5LIB=-lkrb5
    LIBS="$KRB5LIB $LIBS"
  fi
  «x:dnl FIXME Simplify.  Does not match 22 logic, thanks to default_off?
»  if test "${with_kerberos5}" = no; then
    «k:AC_CHECK_LIB»(des425, des_cbc_encrypt, have_des425=yes, have_des425=no )
    if test $have_des425 = yes; then
      DESLIB=-ldes425
      LIBS="$DESLIB $LIBS"
    else
      «k:AC_CHECK_LIB»(des, des_cbc_encrypt, have_des=yes, have_des=no)
      if test $have_des = yes; then
        DESLIB=-ldes
        LIBS="$DESLIB $LIBS"
      fi
    fi
    «k:AC_CHECK_LIB»(krb4, krb_get_cred, have_krb4=yes, have_krb4=no)
    if test $have_krb4 = yes; then
      KRB4LIB=-lkrb4
      LIBS="$KRB4LIB $LIBS"
    else
      «k:AC_CHECK_LIB»(krb, krb_get_cred, have_krb=yes, have_krb=no)
      if test $have_krb = yes; then
        KRB4LIB=-lkrb
        LIBS="$KRB4LIB $LIBS"
      fi
    fi
  fi

  if test "${with_kerberos5}" != no; then
    «k:AC_CHECK_HEADERS»(krb5.h,
      [«k:AC_CHECK_MEMBERS»([krb5_error.text, krb5_error.e_text],,,
		        [«x:#include <krb5.h>])])
»  else
    «k:AC_CHECK_HEADERS»(krb.h,,
		     [«k:AC_CHECK_HEADERS»(kerberosIV/krb.h,,
				       [«k:AC_CHECK_HEADERS»(kerberos/krb.h)])])
  fi
  «k:AC_CHECK_HEADERS»(com_err.h)
  LIBS=$OLD_LIBS
fi

«k:AC_SUBST»(«f:COM_ERRLIB»)
«k:AC_SUBST»(«f:CRYPTOLIB»)
«k:AC_SUBST»(«f:KRB5LIB»)
«k:AC_SUBST»(«f:DESLIB»)
«k:AC_SUBST»(«f:KRB4LIB»)

«k:AC_CHECK_HEADERS»(valgrind/valgrind.h)

«k:AC_CHECK_MEMBERS»([struct unipair.unicode], [], [], [[«x:#include <linux/kd.h>]])
»
«k:AC_CHECK_FUNCS_ONCE»(tzset)

ok_so_far=yes
«k:AC_CHECK_FUNC»(socket, , ok_so_far=no)
if test $ok_so_far = yes; then
  «k:AC_CHECK_HEADER»(netinet/in.h, , ok_so_far=no)
fi
if test $ok_so_far = yes; then
  «k:AC_CHECK_HEADER»(arpa/inet.h, , ok_so_far=no)
fi
if test $ok_so_far = yes; then
«m:dnl »«x:Fixme: Not used.  Should this be HAVE_SOCKETS?
»  «k:AC_DEFINE»(«f:HAVE_INET_SOCKETS», 1,
	    [Define to 1 if you have inet sockets.])
fi

«k:AC_FUNC_FORK»

«k:AC_CHECK_FUNCS»(snprintf)

«m:dnl »«x:Check for glib.  This differs from other library checks in that
»«m:dnl »«x:Emacs need not link to glib unless some other library is already
»«m:dnl »«x:linking to glib.  Although glib provides no facilities that Emacs
»«m:dnl »«x:needs for its own purposes, when glib is present Emacs needs to
»«m:dnl »«x:use primitives like g_main_context_query to avoid clashing with
»«m:dnl »«x:glib at a low level.
dnl
»«m:dnl »«x:Check this late, since it depends on $GTK_CFLAGS etc.
»XGSELOBJ=
OLDCFLAGS="$CFLAGS"
OLDLIBS="$LIBS"
CFLAGS="$CFLAGS $GTK_CFLAGS $RSVG_CFLAGS $DBUS_CFLAGS $SETTINGS_CFLAGS"
LIBS="$LIBS $GTK_LIBS $RSVG_LIBS $DBUS_LIBS $SETTINGS_LIBS"
CFLAGS="$CFLAGS $GFILENOTIFY_CFLAGS $CAIRO_CFLAGS"
LIBS="$LIBS $GFILENOTIFY_LIBS $CAIRO_LIBS"
«k:AC_MSG_CHECKING»([whether GLib is linked in])
«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»(
	[[«x:#include <glib.h>
»	]],
	[[g_print ("Hello world");]])],
     [links_glib=yes],
     [links_glib=no])
«k:AC_MSG_RESULT»([$links_glib])
if test "${links_glib}" = "yes"; then
  «k:AC_DEFINE»(«f:HAVE_GLIB», 1, [Define to 1 if GLib is linked in.])
  if test "$HAVE_NS" = no;then
    XGSELOBJ=xgselect.o
  fi
fi
CFLAGS="$OLDCFLAGS"
LIBS="$OLDLIBS"
«k:AC_SUBST»(«f:XGSELOBJ»)

«m:dnl »«x:Adapted from Haible's version.
»«k:AC_CACHE_CHECK»([for nl_langinfo and CODESET], emacs_cv_langinfo_codeset,
  [«k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([[«x:#include <langinfo.h>]],
»    [[char* cs = nl_langinfo(CODESET);]])],
    emacs_cv_langinfo_codeset=yes,
    emacs_cv_langinfo_codeset=no)
  ])
if test $emacs_cv_langinfo_codeset = yes; then
  «k:AC_DEFINE»(«f:HAVE_LANGINFO_CODESET», 1,
    [Define if you have <langinfo.h> and nl_langinfo(CODESET).])
fi

«k:AC_TYPE_MBSTATE_T»

«m:dnl »«x:Fixme: AC_SYS_POSIX_TERMIOS should probably be used, but it's not clear
»«m:dnl »«x:how the tty code is related to POSIX and/or other versions of termios.
»«m:dnl »«x:The following looks like a useful start.
dnl
»«m:dnl »«x:AC_SYS_POSIX_TERMIOS
»«m:dnl »«x:if test $ac_cv_sys_posix_termios = yes; then
»«m:dnl    »«x:AC_DEFINE(HAVE_TERMIOS, 1, [Define to 1 if you have POSIX-style functions
»«m:dnl                                »«x:and macros for terminal control.])
»«m:dnl    »«x:AC_DEFINE(HAVE_TCATTR, 1, [Define to 1 if you have tcgetattr and tcsetattr.])
»«m:dnl »«x:fi
»
«m:dnl »«x:Turned on June 1996 supposing nobody will mind it.
»«m:dnl »«x:MinGW emulates passwd database, so this feature doesn't make sense there.
»if test "${opsys}" != "mingw32"; then
   «k:AC_DEFINE»(«f:AMPERSAND_FULL_NAME», 1, [Define to use the convention that &
     in the full name stands for the login id.])
fi

«m:dnl »«x:Everybody supports this, except MS.
»«m:dnl »«x:Seems like the kind of thing we should be testing for, though.
## Note: PTYs are broken on darwin <6.  Use at your own risk.
»if test "${opsys}" != "mingw32"; then
  «k:AC_DEFINE»(«f:HAVE_PTYS», 1, [Define if the system supports pty devices.])
fi

«m:dnl »«x:Everybody supports this, except MS-DOS.
»«m:dnl »«x:Seems like the kind of thing we should be testing for, though.
»«m:dnl »«x:Compare with HAVE_INET_SOCKETS (which is unused...) above.
»«k:AC_DEFINE»(«f:HAVE_SOCKETS», 1, [Define if the system supports
  4.2-compatible sockets.])

«k:AH_TEMPLATE»(«f:INTERNAL_TERMINAL», [This is substituted when $TERM is "internal".])

«k:AH_TEMPLATE»(«f:NULL_DEVICE», [Name of the file to open to get
  a null file, or a data sink.])
if test "${opsys}" = "mingw32"; then
  «k:AC_DEFINE»(«f:NULL_DEVICE», ["NUL:"])
else
  «k:AC_DEFINE»(«f:NULL_DEVICE», ["/dev/null"])
fi

if test "${opsys}" = "mingw32"; then
  SEPCHAR=';'
else
  SEPCHAR=':'
fi
«k:AC_DEFINE_UNQUOTED»(«f:SEPCHAR», ['$SEPCHAR'], [Character that separates PATH elements.])
«m:dnl »«x:This is for MinGW, and is used in test/automated/Makefile.in.
»«m:dnl »«x:The MSYS Bash has heuristics for replacing ':' with ';' when it
»«m:dnl »«x:decides that a command-line argument to be passed to a MinGW program
»«m:dnl »«x:is a PATH-style list of directories.  But that heuristics plays it
»«m:dnl »«x:safe, and only does the replacement when it is _absolutely_ sure it
»«m:dnl »«x:sees a colon-separated list of file names; e.g. ":." is left alone,
»«m:dnl »«x:which breaks in-tree builds.  So we do this manually instead.
»«m:dnl »«x:Note that we cannot rely on PATH_SEPARATOR, as that one will always
»«m:dnl »«x:be computed as ':' in MSYS Bash.
»«k:AC_SUBST»(«f:SEPCHAR»)

«m:dnl »«x:Everybody supports this, except MS-DOS.
»«k:AC_DEFINE»(«f:subprocesses», 1, [Define to enable asynchronous subprocesses.])

«k:AC_DEFINE»(«f:USER_FULL_NAME», [pw->pw_gecos], [How to get a user's full name.])


«k:AC_DEFINE»(«f:DIRECTORY_SEP», ['/'],
  [Character that separates directories in a file name.])

if test "${opsys}" = "mingw32"; then
  «k:AC_DEFINE»(«f:IS_DEVICE_SEP»(_c_), [((_c_) == ':')],
    [Returns true if character is a device separator.])

  «k:AC_DEFINE»(«f:IS_DIRECTORY_SEP»(_c_), [((_c_) == '/' || (_c_) == '\\')],
    [Returns true if character is a directory separator.])

  «k:AC_DEFINE»(«f:IS_ANY_SEP»(_c_), [(IS_DIRECTORY_SEP (_c_) || IS_DEVICE_SEP(_c_))],
    [Returns true if character is any form of separator.])
else
  «k:AC_DEFINE»(«f:IS_DEVICE_SEP»(_c_), 0,
    [Returns true if character is a device separator.])

  «k:AC_DEFINE»(«f:IS_DIRECTORY_SEP»(_c_), [((_c_) == DIRECTORY_SEP)],
    [Returns true if character is a directory separator.])

  «k:AC_DEFINE»(«f:IS_ANY_SEP»(_c_), [(IS_DIRECTORY_SEP (_c_))],
    [Returns true if character is any form of separator.])
fi

«k:AH_TEMPLATE»(«f:NO_EDITRES», [Define if XEditRes should not be used.])

case $opsys in
  aix4-2)
    «x:dnl Unfortunately without libXmu we cannot support EditRes.
»    if test "x$ac_cv_search_XmuConvertStandardSelection" = xno; then
      «k:AC_DEFINE»(«f:NO_EDITRES», 1)
    fi
    ;;

  hpux*)
    «x:dnl Assar Westerlund <assar@sics.se> says this is necessary for
»    «x:dnl HP-UX 10.20, and that it works for HP-UX 0 as well.
»    «k:AC_DEFINE»(«f:NO_EDITRES», 1)
    ;;
esac


case $opsys in
  irix6-5 | sol2* | unixware )
    «x:dnl Some SVr4s don't define NSIG in sys/signal.h for ANSI environments;
»    «x:dnl instead, there's a system variable _sys_nsig.  Unfortunately, we
»    «x:dnl need the constant to dimension an array.  So wire in the appropriate
»    «x:dnl value here.
»    «k:AC_DEFINE»(«f:NSIG_MINIMUM», 32, [Minimum value of NSIG.])
    ;;
esac

emacs_broken_SIGIO=no

case $opsys in
  «x:dnl SIGIO exists, but the feature doesn't work in the way Emacs needs.
»  «x:dnl See eg <http://article.gmane.org/gmane.os.openbsd.ports/46831>.
»  hpux* | irix6-5 | nacl | openbsd | sol2* | unixware )
    emacs_broken_SIGIO=yes
    ;;

  aix4-2)
    «x:dnl On AIX Emacs uses the gmalloc.c malloc implementation.  But given
»    «x:dnl the way this system works, libc functions that return malloced
»    «x:dnl memory use the libc malloc implementation. Calling xfree or
»    «x:dnl xrealloc on the results of such functions results in a crash.
»    «x:dnl
»    «x:dnl One solution for this could be to define SYSTEM_MALLOC in configure,
»    «x:dnl but that does not currently work on this system.
»    «x:dnl
»    «x:dnl It is possible to completely override the malloc implementation on
»    «x:dnl AIX, but that involves putting the malloc functions in a shared
»    «x:dnl library and setting the MALLOCTYPE environment variable to point to
»    «x:dnl that shared library.
»    «x:dnl
»    «x:dnl Emacs currently calls xrealloc on the results of get_current_dir name,
»    «x:dnl to avoid a crash just use the Emacs implementation for that function.
»    «x:dnl
»    «x:dnl FIXME We could change the AC_CHECK_FUNCS call near the start
»    «x:dnl of this file, so that we do not check for get_current_dir_name
»    «x:dnl on AIX.  But that might be fragile if something else ends
»    «x:dnl up testing for get_current_dir_name as a dependency.
»    «k:AC_DEFINE»(«f:BROKEN_GET_CURRENT_DIR_NAME», 1, [Define if
      get_current_dir_name should not be used.])
    ;;

  freebsd)
    «x:dnl Circumvent a bug in FreeBSD.  In the following sequence of
»    «x:dnl writes/reads on a PTY, read(2) returns bogus data:
»    «x:dnl
»    «x:dnl write(2)  1022 bytes
»    «x:dnl write(2)   954 bytes, get EAGAIN
»    «x:dnl read(2)   1024 bytes in process_read_output
»    «x:dnl read(2)     11 bytes in process_read_output
»    «x:dnl
»    «x:dnl That is, read(2) returns more bytes than have ever been written
»    «x:dnl successfully.  The 1033 bytes read are the 1022 bytes written
»    «x:dnl successfully after processing (for example with CRs added if the
»    «x:dnl terminal is set up that way which it is here).  The same bytes will
»    «x:dnl be seen again in a later read(2), without the CRs.
»    «k:AC_DEFINE»(«f:BROKEN_PTY_READ_AFTER_EAGAIN», 1, [Define on FreeBSD to
      work around an issue when reading from a PTY.])
    ;;
esac

case $opsys in
  gnu-* | sol2-10 )
    «x:dnl FIXME Can't we test if this exists (eg /proc/$$)?
»    «k:AC_DEFINE»(«f:HAVE_PROCFS», 1, [Define if you have the /proc filesystem.])
  ;;
esac

case $opsys in
  darwin | dragonfly | freebsd | netbsd | openbsd )
    «k:AC_DEFINE»(«f:DONT_REOPEN_PTY», 1, [Define if process.c does not need to
      close a pty to make it a controlling terminal (it is already a
      controlling terminal of the subprocess, because we did ioctl TIOCSCTTY).])
  ;;
esac

«m:dnl »«x:FIXME Surely we can test for this rather than hard-code it.
»case $opsys in
  netbsd | openbsd) sound_device="/dev/audio" ;;
  *) sound_device="/dev/dsp" ;;
esac

«m:dnl »«x:Used in sound.c
»«k:AC_DEFINE_UNQUOTED»(«f:DEFAULT_SOUND_DEVICE», "$sound_device",
  [Name of the default sound device.])


«m:dnl »«x:Emacs can read input using SIGIO and buffering characters itself,
»«m:dnl »«x:or using CBREAK mode and making C-g cause SIGINT.
»«m:dnl »«x:The choice is controlled by the variable interrupt_input.
dnl
»«m:dnl »«x:Define INTERRUPT_INPUT to make interrupt_input = 1 the default (use SIGIO)
dnl
»«m:dnl »«x:Emacs uses the presence of the USABLE_SIGIO macro
»«m:dnl »«x:to indicate whether or not signal-driven I/O is possible.  It uses
»«m:dnl »«x:INTERRUPT_INPUT to decide whether to use it by default.
dnl
»«m:dnl »«x:SIGIO can be used only on systems that implement it (4.2 and 4.3).
»«m:dnl »«x:CBREAK mode has two disadvantages
»«m:dnl »«x:1) At least in 4.2, it is impossible to handle the Meta key properly.
»«m:dnl »«x:I hear that in system V this problem does not exist.
»«m:dnl »«x:2) Control-G causes output to be discarded.
»«m:dnl »«x:I do not know whether this can be fixed in system V.
dnl
»«m:dnl »«x:Another method of doing input is planned but not implemented.
»«m:dnl »«x:It would have Emacs fork off a separate process
»«m:dnl »«x:to read the input and send it to the true Emacs process
»«m:dnl »«x:through a pipe.
»case $opsys in
  darwin | gnu-linux | gnu-kfreebsd )
    «k:AC_DEFINE»(«f:INTERRUPT_INPUT», 1, [Define to read input using SIGIO.])
  ;;
esac


«m:dnl »«x:If the system's imake configuration file defines 'NeedWidePrototypes'
»«m:dnl »«x:as 'NO', we must define NARROWPROTO manually.  Such a define is
»«m:dnl »«x:generated in the Makefile generated by 'xmkmf'.  If we don't define
»«m:dnl »«x:NARROWPROTO, we will see the wrong function prototypes for X functions
»«m:dnl »«x:taking float or double parameters.
»case $opsys in
  cygwin|gnu|gnu-linux|gnu-kfreebsd|irix6-5|freebsd|netbsd|openbsd)
    «k:AC_DEFINE»(«f:NARROWPROTO», 1, [Define if system's imake configuration
      file defines 'NeedWidePrototypes' as 'NO'.])
  ;;
esac


«m:dnl »«x:Used in process.c, this must be a loop, even if it only runs once.
»«m:dnl »«x:(Except on SGI; see below.  Take that, clarity and consistency!)
»«k:AH_TEMPLATE»(«f:PTY_ITERATION», [How to iterate over PTYs.])
«m:dnl »«x:Only used if !PTY_ITERATION.  Iterate from FIRST_PTY_LETTER to z,
»«m:dnl »«x:trying suffixes 0-16.
»«k:AH_TEMPLATE»(«f:FIRST_PTY_LETTER», [Letter to use in finding device name of
  first PTY, if PTYs are supported.])
«k:AH_TEMPLATE»(«f:PTY_OPEN», [How to open a PTY, if non-standard.])
«k:AH_TEMPLATE»(«f:PTY_NAME_SPRINTF», [How to get the device name of the control
  end of a PTY, if non-standard.])
«k:AH_TEMPLATE»(«f:PTY_TTY_NAME_SPRINTF», [How to get device name of the tty
  end of a PTY, if non-standard.])

case $opsys in
  aix4-2 )
    «k:AC_DEFINE»(«f:PTY_ITERATION», [int c; for (c = 0; !c ; c++)])
    «x:dnl You allocate a pty by opening /dev/ptc to get the master side.
»    «x:dnl To get the name of the slave side, you just ttyname() the master side.
»    «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [strcpy (pty_name, "/dev/ptc");])
    «k:AC_DEFINE»(«f:PTY_TTY_NAME_SPRINTF», [strcpy (pty_name, ttyname (fd));])
    ;;

  cygwin )
    «k:AC_DEFINE»(«f:PTY_ITERATION», [int i; for (i = 0; i < 1; i++)])
    «x:dnl multi-line AC_DEFINEs are hard. :(
»    «k:AC_DEFINE»(«f:PTY_OPEN», [ do { int dummy; sigset_t blocked, procmask; sigemptyset (&blocked); sigaddset (&blocked, SIGCHLD); pthread_sigmask (SIG_BLOCK, &blocked, &procmask); if (-1 == openpty (&fd, &dummy, pty_name, 0, 0)) fd = -1; pthread_sigmask (SIG_SETMASK, &procmask, 0); if (fd >= 0) emacs_close (dummy); } while (false)])
    «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [])
    «k:AC_DEFINE»(«f:PTY_TTY_NAME_SPRINTF», [])
    ;;

  «x:dnl FIXME?  Maybe use same as freebsd - see bug#12040.
»  darwin )
    «k:AC_DEFINE»(«f:PTY_ITERATION», [int i; for (i = 0; i < 1; i++)])
    «x:dnl Not used, because PTY_ITERATION is defined.
»    «k:AC_DEFINE»(«f:FIRST_PTY_LETTER», ['p'])
    «x:dnl Note that openpty may fork via grantpt on Mac OS X 10.4/Darwin 8.
»    «x:dnl But we don't have to block SIGCHLD because it is blocked in the
»    «x:dnl implementation of grantpt.
»    «k:AC_DEFINE»(«f:PTY_OPEN», [ do { int slave; if (openpty (&fd, &slave, pty_name, NULL, NULL) == -1) fd = -1; else emacs_close (slave); } while (false)])
    «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [])
    «k:AC_DEFINE»(«f:PTY_TTY_NAME_SPRINTF», [])
    ;;

  gnu | openbsd )
    «k:AC_DEFINE»(«f:FIRST_PTY_LETTER», ['p'])
    ;;

  gnu-linux | gnu-kfreebsd | dragonfly | freebsd | netbsd | nacl )
    «x:dnl if HAVE_GRANTPT
»    if test "x$ac_cv_func_grantpt" = xyes; then
      «k:AC_DEFINE»(«f:UNIX98_PTYS», 1, [Define if the system has Unix98 PTYs.])
      «k:AC_DEFINE»(«f:PTY_ITERATION», [int i; for (i = 0; i < 1; i++)])
      «x:dnl Note that grantpt and unlockpt may fork.  We must block SIGCHLD
»      «x:dnl to prevent sigchld_handler from intercepting the child's death.
»      «k:AC_DEFINE»(«f:PTY_TTY_NAME_SPRINTF», [{ char *ptyname = 0; sigset_t blocked; sigemptyset (&blocked); sigaddset (&blocked, SIGCHLD); pthread_sigmask (SIG_BLOCK, &blocked, 0); if (grantpt (fd) != -1 && unlockpt (fd) != -1) ptyname = ptsname(fd); pthread_sigmask (SIG_UNBLOCK, &blocked, 0); if (!ptyname) { emacs_close (fd); return -1; } snprintf (pty_name, PTY_NAME_SIZE, "%s", ptyname); }])
      «x:dnl if HAVE_POSIX_OPENPT
»      if test "x$ac_cv_func_posix_openpt" = xyes; then
        «k:AC_DEFINE»(«f:PTY_OPEN», [do { fd = posix_openpt (O_RDWR | O_CLOEXEC | O_NOCTTY); if (fd < 0 && errno == EINVAL) fd = posix_openpt (O_RDWR | O_NOCTTY); } while (false)])
        «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [])
      «x:dnl if HAVE_GETPT
»      elif test "x$ac_cv_func_getpt" = xyes; then
        «k:AC_DEFINE»(«f:PTY_OPEN», [fd = getpt ()])
        «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [])
      else
        «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [strcpy (pty_name, "/dev/ptmx");])
      fi
    else
      «k:AC_DEFINE»(«f:FIRST_PTY_LETTER», ['p'])
    fi
    ;;

  hpux*)
    «k:AC_DEFINE»(«f:FIRST_PTY_LETTER», ['p'])
    «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [sprintf (pty_name, "/dev/ptym/pty%c%x", c, i);])
    «k:AC_DEFINE»(«f:PTY_TTY_NAME_SPRINTF», [sprintf (pty_name, "/dev/pty/tty%c%x", c, i);])
    ;;

  irix6-5 )
    «x:dnl It looks like this cannot be right, because it is not a loop.
»    «x:dnl However, process.c actually does this:
»    «x:dnl # ifndef __sgi
»    «x:dnl   continue;
»    «x:dnl # else
»    «x:dnl   return -1;
»    «x:dnl # endif
»    «x:dnl which presumably makes it OK, since irix == sgi (?).
»    «x:dnl FIXME it seems like this special treatment is unnecessary?
»    «x:dnl Why can't irix use a single-trip loop like eg cygwin?
»    «k:AC_DEFINE»(«f:PTY_ITERATION», [])
    «x:dnl Not used, because PTY_ITERATION is defined.
»    «k:AC_DEFINE»(«f:FIRST_PTY_LETTER», ['q'])
    «k:AC_DEFINE»(«f:PTY_OPEN», [ { struct sigaction ocstat, cstat; struct stat stb; char * name; sigemptyset(&cstat.sa_mask); cstat.sa_handler = SIG_DFL; cstat.sa_flags = 0; sigaction(SIGCHLD, &cstat, &ocstat); name = _getpty (&fd, O_RDWR | O_NDELAY, 0600, 0); sigaction(SIGCHLD, &ocstat, (struct sigaction *)0); if (name == 0) return -1; if (fd < 0) return -1; if (fstat (fd, &stb) < 0) return -1; strcpy (pty_name, name); }])
    «x:dnl No need to get the pty name at all.
»    «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [])
    «x:dnl No need to use sprintf to get the tty name--we get that from _getpty.
»    «k:AC_DEFINE»(«f:PTY_TTY_NAME_SPRINTF», [])
    ;;

  sol2* )
    «x:dnl On SysVr4, grantpt(3) forks a subprocess, so do not use
»    «x:dnl O_CLOEXEC when opening the pty, and keep the SIGCHLD handler
»    «x:dnl from intercepting that death.  If any child but grantpt's should die
»    «x:dnl within, it should be caught after sigrelse(2).
»    «k:AC_DEFINE»(«f:PTY_OPEN», [fd = open (pty_name, O_RDWR | O_NONBLOCK)])
    «k:AC_DEFINE»(«f:PTY_TTY_NAME_SPRINTF», [{ char *ptsname (int), *ptyname; int grantpt_result; sigset_t blocked; sigemptyset (&blocked); sigaddset (&blocked, SIGCHLD); pthread_sigmask (SIG_BLOCK, &blocked, 0); grantpt_result = grantpt (fd); pthread_sigmask (SIG_UNBLOCK, &blocked, 0); if (grantpt_result == -1 || unlockpt (fd) == -1 || !(ptyname = ptsname (fd))) { emacs_close (fd); return -1; } snprintf (pty_name, PTY_NAME_SIZE, "%s", ptyname); }])
    ;;

  unixware )
    «x:dnl Comments are as per sol2*.
»    «k:AC_DEFINE»(«f:PTY_OPEN», [fd = open (pty_name, O_RDWR | O_NONBLOCK)])
    «k:AC_DEFINE»(«f:PTY_TTY_NAME_SPRINTF», [{ char *ptsname (int), *ptyname; int grantpt_result; sigset_t blocked; sigemptyset (&blocked); sigaddset (&blocked, SIGCHLD); pthread_sigmask (SIG_BLOCK, &blocked, 0); grantpt_result = grantpt (fd); pthread_sigmask (SIG_UNBLOCK, &blocked, 0); if (grantpt_result == -1) fatal("could not grant slave pty"); if (unlockpt(fd) == -1) fatal("could not unlock slave pty"); if (!(ptyname = ptsname(fd))) fatal ("could not enable slave pty"); snprintf (pty_name, PTY_NAME_SIZE, "%s", ptyname); }])
    ;;
esac


case $opsys in
  sol2* | unixware )
    «x:dnl This change means that we don't loop through allocate_pty too
»    «x:dnl many times in the (rare) event of a failure.
»    «k:AC_DEFINE»(«f:FIRST_PTY_LETTER», ['z'])
    «k:AC_DEFINE»(«f:PTY_NAME_SPRINTF», [strcpy (pty_name, "/dev/ptmx");])
    «x:dnl Push various streams modules onto a PTY channel.  Used in process.c.
»    «k:AC_DEFINE»(«f:SETUP_SLAVE_PTY», [if (ioctl (forkin, I_PUSH, "ptem") == -1) fatal ("ioctl I_PUSH ptem"); if (ioctl (forkin, I_PUSH, "ldterm") == -1) fatal ("ioctl I_PUSH ldterm"); if (ioctl (forkin, I_PUSH, "ttcompat") == -1) fatal ("ioctl I_PUSH ttcompat");], [How to set up a slave PTY, if needed.])
    ;;
esac


«k:AH_TEMPLATE»(«f:SIGNALS_VIA_CHARACTERS», [Make process_send_signal work by
"typing" a signal character on the pty.])

case $opsys in
  «x:dnl Perry Smith <pedz@ddivt1.austin.ibm.com> says this is correct for AIX.
»  «x:dnl thomas@mathematik.uni-bremen.de says this is needed for IRIX.
»  aix4-2 | cygwin | gnu | irix6-5 | dragonfly | freebsd | netbsd | openbsd | darwin )
    «k:AC_DEFINE»(«f:SIGNALS_VIA_CHARACTERS», 1)
    ;;

  «x:dnl 21 Jun 06: Eric Hanchrow <offby1@blarg.net> says this works.
»  «x:dnl FIXME Does gnu-kfreebsd have linux/version.h?  It seems unlikely...
»  gnu-linux | gnu-kfreebsd )

    «k:AC_MSG_CHECKING»([for signals via characters])
    «k:AC_PREPROC_IFELSE»([«k:AC_LANG_PROGRAM»([[
«x:#include <linux/version.h>
#if LINUX_VERSION_CODE < 0x20400
»«m:# »«x:error "Linux version too old"
#endif
»      ]], [[]])], emacs_signals_via_chars=yes, emacs_signals_via_chars=no)

    «k:AC_MSG_RESULT»([$emacs_signals_via_chars])
    test $emacs_signals_via_chars = yes && «k:AC_DEFINE»(«f:SIGNALS_VIA_CHARACTERS», 1)
    ;;
esac


«k:AH_TEMPLATE»(«f:TAB3», [Undocumented.])

case $opsys in
  darwin) «k:AC_DEFINE»(«f:TAB3», OXTABS) ;;

  gnu | dragonfly | freebsd | netbsd | openbsd )
    «k:AC_DEFINE»(«f:TABDLY», OXTABS, [Undocumented.])
    «k:AC_DEFINE»(«f:TAB3», OXTABS)
    ;;

  gnu-linux | gnu-kfreebsd )
    «k:AC_PREPROC_IFELSE»([«k:AC_LANG_PROGRAM»([[
«x:#ifndef __ia64__
»«m:# »«x:error "not ia64"
#endif
»      ]], [[]])], «k:AC_DEFINE»(«f:GC_MARK_SECONDARY_STACK»(),
        [do { extern void *__libc_ia64_register_backing_store_base; __builtin_ia64_flushrs (); mark_memory (__libc_ia64_register_backing_store_base, __builtin_ia64_bsp ());} while (false)],
        [Mark a secondary stack, like the register stack on the ia64.]), [])
    ;;

  hpux*)
    «k:AC_DEFINE»(«f:RUN_TIME_REMAP», 1, [Define if emacs.c needs to call
      run_time_remap; for HPUX.])
    ;;
esac


«m:dnl »«x:This won't be used automatically yet.  We also need to know, at least,
»«m:dnl »«x:that the stack is continuous.
»«k:AH_TEMPLATE»(«f:GC_SETJMP_WORKS», [Define if setjmp is known to save all
  registers relevant for conservative garbage collection in the jmp_buf.])


case $opsys in
  «x:dnl Not all the architectures are tested, but there are Debian packages
»  «x:dnl for SCM and/or Guile on them, so the technique must work.  See also
»  «x:dnl comments in alloc.c concerning setjmp and gcc.
»  «x:dnl Fixme: it's probably safe to just use the GCC conditional below.
»  gnu-linux | gnu-kfreebsd )
    «k:AC_PREPROC_IFELSE»([«k:AC_LANG_PROGRAM»([[
«x:#if defined __i386__ || defined __sparc__ || defined __mc68000__ \
»  || defined __alpha__ || defined __mips__ || defined __s390__ \
  || defined __arm__ || defined __powerpc__ || defined __amd64__ \
  || defined __ia64__ || defined __sh__
/* ok */
«x:#else
»«m:# »«x:error "setjmp not known to work on this arch"
#endif
»    ]], [[]])], «k:AC_DEFINE»(«f:GC_SETJMP_WORKS», 1))
    ;;
esac


if test x$GCC = xyes; then
   «x:dnl GC_SETJMP_WORKS is nearly always appropriate for GCC.
»   «k:AC_DEFINE»(«f:GC_SETJMP_WORKS», 1)
else
  case $opsys in
    «x:dnl irix: Tested on Irix 6.5.  SCM worked on earlier versions.
»    aix* | dragonfly | freebsd | netbsd | openbsd | irix6-5 | sol2* )
      «k:AC_DEFINE»(«f:GC_SETJMP_WORKS», 1)
      ;;
  esac
fi                              «x:dnl GCC?
»
«m:dnl »«x:In a weird quirk, MS runtime uses _setjmp and longjmp.
»«k:AC_CACHE_CHECK»([for _setjmp], [emacs_cv_func__setjmp],
  [«k:AC_LINK_IFELSE»(
     [«k:AC_LANG_PROGRAM»(
       [[«x:#include <setjmp.h>
»         «x:#ifdef __MINGW32__
»         «m:# »«x:define _longjmp longjmp
»         «x:#endif
»       ]],
       [[jmp_buf j;
	 if (! _setjmp (j))
	   _longjmp (j, 1);]])],
     [emacs_cv_func__setjmp=yes],
     [emacs_cv_func__setjmp=no])])
if test $emacs_cv_func__setjmp = yes; then
  «k:AC_DEFINE»([«f:HAVE__SETJMP»], 1, [Define to 1 if _setjmp and _longjmp work.])
fi

«m:# »«x:We need to preserve signal mask to handle C stack overflows.
»«k:AC_CACHE_CHECK»([for sigsetjmp], [emacs_cv_func_sigsetjmp],
  [«k:AC_LINK_IFELSE»(
     [«k:AC_LANG_PROGRAM»(
       [[«x:#include <setjmp.h>
»       ]],
       [[sigjmp_buf j;
         if (! sigsetjmp (j, 1))
	   siglongjmp (j, 1);]])],
     [emacs_cv_func_sigsetjmp=yes],
     [emacs_cv_func_sigsetjmp=no])])
if test $emacs_cv_func_sigsetjmp = yes; then
  «k:AC_DEFINE»([«f:HAVE_SIGSETJMP»], 1,
    [Define to 1 if sigsetjmp and siglongjmp work.])
fi

case $emacs_cv_func_sigsetjmp,$emacs_cv_alternate_stack,$opsys in
  yes,yes,* | *,*,mingw32)
    «k:AC_DEFINE»([«f:HAVE_STACK_OVERFLOW_HANDLING»], 1,
      [Define to 1 if C stack overflow can be handled in some cases.]);;
esac

case $opsys in
  sol2* | unixware )
    «x:dnl TIOCGPGRP is broken in SysVr4, so we can't send signals to PTY
»    «x:dnl subprocesses the usual way.  But TIOCSIGNAL does work for PTYs,
»    «x:dnl and this is all we need.
»    «k:AC_DEFINE»(«f:TIOCSIGSEND», TIOCSIGNAL, [Some platforms redefine this.])
    ;;
esac


case $opsys in
  hpux* | sol2* )
    «x:dnl Used in xfaces.c.
»    «k:AC_DEFINE»(«f:XOS_NEEDS_TIME_H», 1, [Compensate for a bug in Xos.h on
      some systems, where it requires time.h.])
    ;;
esac


«m:dnl »«x:Define symbols to identify the version of Unix this is.
»«m:dnl »«x:Define all the symbols that apply correctly.
»«k:AH_TEMPLATE»(«f:DOS_NT», [Define if the system is MS DOS or MS Windows.])
«k:AH_TEMPLATE»(«f:MSDOS», [Define if the system is MS DOS.])
«k:AH_TEMPLATE»(«f:USG», [Define if the system is compatible with System III.])
«k:AH_TEMPLATE»(«f:USG5_4», [Define if the system is compatible with System V Release 4.])

case $opsys in
  aix4-2)
    «k:AC_DEFINE»(«f:USG», [])
    «x:dnl This symbol should be defined on AIX Version 3  ???????
»    «k:AC_PREPROC_IFELSE»([«k:AC_LANG_PROGRAM»([[
«x:#ifndef _AIX
»«m:# »«x:error "_AIX not defined"
#endif
»    ]], [[]])], [], «k:AC_DEFINE»(«f:_AIX», [], [Define if the system is AIX.]))
    ;;

  cygwin)
    «k:AC_DEFINE»(«f:CYGWIN», 1, [Define if the system is Cygwin.])
    ;;

  darwin)
    «x:dnl Not __APPLE__, as this may not be defined on non-OSX Darwin.
»    «x:dnl Not DARWIN, because Panther and lower CoreFoundation.h use DARWIN to
»    «x:dnl distinguish OS X from pure Darwin.
»    «k:AC_DEFINE»(«f:DARWIN_OS», [], [Define if the system is Darwin.])
    ;;

  gnu-linux | gnu-kfreebsd )
    «k:AC_DEFINE»(«f:USG», [])
    «k:AC_DEFINE»(«f:GNU_LINUX», [], [Define if ths system is compatible with GNU/Linux.])
    ;;

  hpux*)
    «k:AC_DEFINE»(«f:USG», [])
    «k:AC_DEFINE»(«f:HPUX», [], [Define if the system is HPUX.])
    ;;

  irix6-5)
    «k:AC_DEFINE»(«f:USG», [])
    «k:AC_DEFINE»(«f:USG5_4», [])
    «k:AC_DEFINE»(«f:IRIX6_5», [], [Define if the system is IRIX.])
    ;;

  mingw32)
    «k:AC_DEFINE»(«f:DOS_NT», [])
    «k:AC_DEFINE»(«f:WINDOWSNT», 1, [Define if compiling for native MS Windows.])
    if test "x$ac_enable_checking" != "x" ; then
      «k:AC_DEFINE»(«f:EMACSDEBUG», 1, [Define to 1 to enable w32 debug facilities.])
    fi
    ;;

  sol2*)
    «k:AC_DEFINE»(«f:USG», [])
    «k:AC_DEFINE»(«f:USG5_4», [])
    «k:AC_DEFINE»(«f:SOLARIS2», [], [Define if the system is Solaris.])
    ;;

  unixware)
    «k:AC_DEFINE»(«f:USG», [])
    «k:AC_DEFINE»(«f:USG5_4», [])
    ;;
esac

«k:AC_CACHE_CHECK»([for usable FIONREAD], [emacs_cv_usable_FIONREAD],
  [case $opsys in
     aix4-2 | nacl)
       «x:dnl BUILD 9008 - FIONREAD problem still exists in X-Windows.
»       emacs_cv_usable_FIONREAD=no
       ;;

     mingw32)
       emacs_cv_usable_FIONREAD=yes
       ;;

     *)
       «k:AC_COMPILE_IFELSE»(
	 [«k:AC_LANG_PROGRAM»([[«x:#include <sys/types.h>
»			    «x:#include <sys/ioctl.h>
»			    «x:#ifdef USG5_4
»			    «m:# »«x:include <sys/filio.h>
»			    «x:#endif
»			  ]],
			  [[int foo = ioctl (0, FIONREAD, &foo);]])],
	 [emacs_cv_usable_FIONREAD=yes],
	 [emacs_cv_usable_FIONREAD=no])
       ;;
   esac])
if test $emacs_cv_usable_FIONREAD = yes; then
  «k:AC_DEFINE»([«f:USABLE_FIONREAD»], [1], [Define to 1 if FIONREAD is usable.])

  if test $emacs_broken_SIGIO = no; then
    «k:AC_CACHE_CHECK»([for usable SIGIO], [emacs_cv_usable_SIGIO],
      [«k:AC_COMPILE_IFELSE»(
	 [«k:AC_LANG_PROGRAM»([[«x:#include <fcntl.h>
»			    «x:#include <signal.h>
»			  ]],
			  [[int foo = SIGIO | F_SETFL | FASYNC;]])],
	 [emacs_cv_usable_SIGIO=yes],
	 [emacs_cv_usable_SIGIO=no])],
      [emacs_cv_usable_SIGIO=yes],
      [emacs_cv_usable_SIGIO=no])
    if test $emacs_cv_usable_SIGIO = yes; then
      «k:AC_DEFINE»([«f:USABLE_SIGIO»], [1], [Define to 1 if SIGIO is usable.])
    fi
  fi
fi

case $opsys in
  hpux11)
    «x:dnl It works to open the pty's tty in the parent (Emacs), then
»    «x:dnl close and reopen it in the child.
»    «k:AC_DEFINE»(«f:USG_SUBTTY_WORKS», 1, [Define for USG systems where it
      works to open a pty's tty in the parent process, then close and
      reopen it in the child.])
    ;;

  irix6-5)
    «k:AC_DEFINE»(«f:PREFER_VSUSP», 1, [Define if process_send_signal should
      use VSUSP instead of VSWTCH.])
    ;;

  sol2-10)
    «k:AC_DEFINE»(«f:_STRUCTURED_PROC», 1, [Needed for system_process_attributes
      on Solaris.])
    ;;
esac

«m:# »«x:Set up the CFLAGS for real compilation, so we can substitute it.
»CFLAGS="$REAL_CFLAGS"
CPPFLAGS="$REAL_CPPFLAGS"
LIBS="$REAL_LIBS"

«x:## Hack to detect a buggy GCC version.
»if test "$GCC" = yes && \
   $CC --version 2> /dev/null | grep 'gcc.* 4.5.0' >/dev/null; then
  case $CFLAGS in
    *-fno-optimize-sibling-calls*) ;;
    *-O@<:@23@:>@*)
      «k:AC_MSG_ERROR»([GCC 4.5.0 has problems compiling Emacs; see etc/PROBLEMS.]);;
  esac
fi

version=$PACKAGE_VERSION

copyright="Copyright (C) 2015 Free Software Foundation, Inc."
«k:AC_DEFINE_UNQUOTED»(«f:COPYRIGHT», ["$copyright"],
  [Short copyright string for this version of Emacs.])
«k:AC_SUBST»(«f:copyright»)

«x:### Specify what sort of things we'll be editing into Makefile and config.h.
### Use configuration here uncanonicalized to avoid exceeding size limits.
»«k:AC_SUBST»(«f:version»)
«k:AC_SUBST»(«f:configuration»)
«x:## Unused?
»«k:AC_SUBST»(«f:canonical»)
«k:AC_SUBST»(«f:srcdir»)
«k:AC_SUBST»(«f:prefix»)
«k:AC_SUBST»(«f:exec_prefix»)
«k:AC_SUBST»(«f:bindir»)
«k:AC_SUBST»(«f:datadir»)
«k:AC_SUBST»(«f:sharedstatedir»)
«k:AC_SUBST»(«f:libexecdir»)
«k:AC_SUBST»(«f:mandir»)
«k:AC_SUBST»(«f:infodir»)
«k:AC_SUBST»(«f:lispdir»)
«k:AC_SUBST»(«f:standardlisppath»)
«k:AC_SUBST»(«f:locallisppath»)
«k:AC_SUBST»(«f:lisppath»)
«k:AC_SUBST»(«f:x_default_search_path»)
«k:AC_SUBST»(«f:etcdir»)
«k:AC_SUBST»(«f:archlibdir»)
«k:AC_SUBST»(«f:etcdocdir»)
«k:AC_SUBST»(«f:bitmapdir»)
«k:AC_SUBST»(«f:gamedir»)
«k:AC_SUBST»(«f:gameuser»)
«k:AC_SUBST»(«f:gamegroup»)
«x:## FIXME? Nothing uses @LD_SWITCH_X_SITE@.
## src/Makefile.in did add LD_SWITCH_X_SITE (as a cpp define) to the
## end of LIBX_BASE, but nothing ever set it.
»«k:AC_SUBST»(«f:LD_SWITCH_X_SITE»)
«k:AC_SUBST»(«f:C_SWITCH_X_SITE»)
«k:AC_SUBST»(«f:GNUSTEP_CFLAGS»)
«k:AC_SUBST»(«f:CFLAGS»)
«x:## Used in lwlib/Makefile.in.
»«k:AC_SUBST»(«f:X_TOOLKIT_TYPE»)
«k:AC_SUBST»(«f:ns_appdir»)
«k:AC_SUBST»(«f:ns_appbindir»)
«k:AC_SUBST»(«f:ns_appresdir»)
«k:AC_SUBST»(«f:ns_appsrc»)
«k:AC_SUBST»(«f:GNU_OBJC_CFLAGS»)
«k:AC_SUBST»(«f:OTHER_FILES»)

if test -n "${term_header}"; then
    «k:AC_DEFINE_UNQUOTED»(«f:TERM_HEADER», "${term_header}",
        [Define to the header for the built-in window system.])
fi

«k:AC_DEFINE_UNQUOTED»(«f:EMACS_CONFIGURATION»,  "${canonical}",
		   [Define to the canonical Emacs configuration name.])
«k:AC_DEFINE_UNQUOTED»(«f:EMACS_CONFIG_OPTIONS», "${emacs_config_options}",
		   [Define to the options passed to configure.])
«k:AH_TEMPLATE»(«f:config_opsysfile», [Some platforms that do not use configure
  define this to include extra configuration information.])

case $opsys in
  mingw32)
    «k:AC_DEFINE»(«f:config_opsysfile», <ms-w32.h>, [])
    ;;
esac

XMENU_OBJ=
XOBJ=
FONT_OBJ=
if test "${HAVE_X_WINDOWS}" = "yes" ; then
  «k:AC_DEFINE»(«f:HAVE_X_WINDOWS», 1,
	    [Define to 1 if you want to use the X window system.])
  XMENU_OBJ=xmenu.o
  XOBJ="xterm.o xfns.o xselect.o xrdb.o xsmfns.o xsettings.o"
  FONT_OBJ=xfont.o
  if test "$USE_CAIRO" = "yes"; then
    FONT_OBJ="ftfont.o ftcrfont.o"
  elif test "$HAVE_XFT" = "yes"; then
    FONT_OBJ="$FONT_OBJ ftfont.o xftfont.o ftxfont.o"
  elif test "$HAVE_FREETYPE" = "yes"; then
    FONT_OBJ="$FONT_OBJ ftfont.o ftxfont.o"
  fi
  «k:AC_SUBST»(«f:FONT_OBJ»)
fi
«k:AC_SUBST»(«f:XMENU_OBJ»)
«k:AC_SUBST»(«f:XOBJ»)
«k:AC_SUBST»(«f:FONT_OBJ»)

WIDGET_OBJ=
MOTIF_LIBW=
if test "${USE_X_TOOLKIT}" != "none" ; then
  WIDGET_OBJ=widget.o
  «k:AC_DEFINE»(«f:USE_X_TOOLKIT», 1, [Define to 1 if using an X toolkit.])
  if test "${USE_X_TOOLKIT}" = "LUCID"; then
    «k:AC_DEFINE»(«f:USE_LUCID», 1, [Define to 1 if using the Lucid X toolkit.])
  elif test "${USE_X_TOOLKIT}" = "MOTIF"; then
    «k:AC_DEFINE»(«f:USE_MOTIF», 1, [Define to 1 if using the Motif X toolkit.])
    MOTIF_LIBW=-lXm
    case "$opsys" in
      gnu-linux)
        «x:## Paul Abrahams <abrahams at equinox.shaysnet.com> says this is needed.
»        MOTIF_LIBW="$MOTIF_LIBW -lXpm"
        ;;

      unixware)
        «x:## Richard Anthony Ryan <ryanr at ellingtn.ftc.nrcs.usda.gov>
»        «x:## says -lXimp is needed in UNIX_SV ... 4.2 1.1.2.
»        MOTIF_LIBW="MOTIF_LIBW -lXimp"
        ;;

      aix4-2)
        «x:## olson@mcs.anl.gov says -li18n is needed by -lXm.
»        MOTIF_LIBW="$MOTIF_LIBW -li18n"
        ;;
    esac
    MOTIF_LIBW="$MOTIF_LIBW $LIBXP"
  fi
fi
«k:AC_SUBST»(«f:WIDGET_OBJ»)

TOOLKIT_LIBW=
case "$USE_X_TOOLKIT" in
  MOTIF) TOOLKIT_LIBW="$MOTIF_LIBW" ;;
  LUCID) TOOLKIT_LIBW="$LUCID_LIBW" ;;
  none) test "x$HAVE_GTK" = "xyes" && TOOLKIT_LIBW="$GTK_LIBS" ;;
esac
«k:AC_SUBST»(«f:TOOLKIT_LIBW»)

if test "${opsys}" != "mingw32"; then
  if test "$USE_X_TOOLKIT" = "none"; then
    LIBXT_OTHER="\$(LIBXSM)"
  else
    LIBXT_OTHER="\$(LIBXMU) -lXt \$(LIBXTR6) -lXext"
  fi
fi
«k:AC_SUBST»(«f:LIBXT_OTHER»)

if test "${HAVE_X11}" = "yes" ; then
  «k:AC_DEFINE»(«f:HAVE_X11», 1,
	    [Define to 1 if you want to use version 11 of X windows.])
  LIBX_OTHER="\$(LIBXT) \$(LIBX_EXTRA)"
else
  LIBX_OTHER=
fi
«k:AC_SUBST»(«f:LIBX_OTHER»)

if test "$HAVE_GTK" = yes || test "$HAVE_X11" != yes; then
  LIBXMENU=
elif test "$USE_X_TOOLKIT" = none; then
  LIBXMENU='$(oldXMenudir)/libXMenu11.a'
else
  LIBXMENU='$(lwlibdir)/liblw.a'
fi
«k:AC_SUBST»(«f:LIBXMENU»)

«k:AC_CACHE_CHECK»([for struct alignment],
  [emacs_cv_struct_alignment],
  [«k:AC_COMPILE_IFELSE»(
     [«k:AC_LANG_PROGRAM»([[«x:#include <stddef.h>
»			struct __attribute__ ((aligned (8))) s { char c; };
			struct t { char c; struct s s; };
			char verify[offsetof (struct t, s) == 8 ? 1 : -1];
		      ]])],
     [emacs_cv_struct_alignment=yes],
     [emacs_cv_struct_alignment=no])])
if test "$emacs_cv_struct_alignment" = yes; then
  «k:AC_DEFINE»([«f:HAVE_STRUCT_ATTRIBUTE_ALIGNED»], 1,
    [Define to 1 if 'struct __attribute__ ((aligned (N)))' aligns the
     structure to an N-byte boundary.])
fi

if test "${GNU_MALLOC}" = "yes" ; then
  «k:AC_DEFINE»(«f:GNU_MALLOC», 1,
	    [Define to 1 if you want to use the GNU memory allocator.])
fi

RALLOC_OBJ=
if test "${REL_ALLOC}" = "yes" ; then
  «k:AC_DEFINE»(«f:REL_ALLOC», 1,
	    [Define REL_ALLOC if you want to use the relocating allocator for
	     buffer space.])

  test "$system_malloc" != "yes" && RALLOC_OBJ=ralloc.o
fi
«k:AC_SUBST»(«f:RALLOC_OBJ»)

if test "$opsys" = "cygwin"; then
  CYGWIN_OBJ="sheap.o cygw32.o"
  «x:## Cygwin differs because of its unexec().
»  PRE_ALLOC_OBJ=
  POST_ALLOC_OBJ=lastfile.o
elif test "$opsys" = "mingw32"; then
  CYGWIN_OBJ=
  PRE_ALLOC_OBJ=
  POST_ALLOC_OBJ=lastfile.o
else
  CYGWIN_OBJ=
  PRE_ALLOC_OBJ=lastfile.o
  POST_ALLOC_OBJ=
fi
«k:AC_SUBST»(«f:CYGWIN_OBJ»)
«k:AC_SUBST»(«f:PRE_ALLOC_OBJ»)
«k:AC_SUBST»(«f:POST_ALLOC_OBJ»)

«m:dnl »«x:Call this 'FORTIFY_SOUR' so that it sorts before the 'FORTIFY_SOURCE'
»«m:dnl »«x:verbatim defined above.  The tricky name is apropos, as this hack
»«m:dnl »«x:makes Fortify go sour!
»«k:AH_VERBATIM»([FORTIFY_SOUR],
[/* Without the following workaround, Emacs runs slowly on OS X 10.8.
   The workaround disables some useful run-time checking, so it
   should be conditional to the platforms with the performance bug.
   Perhaps Apple will fix this some day; also see m4/extern-inline.m4.  */
«x:#if defined __APPLE__ && defined __GNUC__
»«m:# »«x:ifndef _DONT_USE_CTYPE_INLINE_
»«m:#  »«x:define _DONT_USE_CTYPE_INLINE_
»«m:# »«x:endif
»«m:# »«x:ifndef _FORTIFY_SOURCE
»«m:#  »«x:define _FORTIFY_SOURCE 0
»«m:# »«x:endif
#endif
»])

«m:# »«x:If user asks to omit features, disable optional features that gnulib
»«m:# »«x:might otherwise enable.
»if test "$with_features" = no && test "$enable_acl" != yes; then
  enable_acl=no
fi

«m:# »«x:Configure gnulib.  Although this does not affect CFLAGS or LIBS permanently.
»«m:# »«x:it temporarily reverts them to their pre-pkg-config values,
»«m:# »«x:because gnulib needs to work with both src (which uses the
»«m:# »«x:pkg-config stuff) and lib-src (which does not).  For example, gnulib
»«m:# »«x:may need to determine whether LIB_CLOCK_GETTIME should contain -lrt,
»«m:# »«x:and it therefore needs to run in an environment where LIBS does not
»«m:# »«x:already contain -lrt merely because 'pkg-config --libs' printed '-lrt'
»«m:# »«x:for some package unrelated to lib-src.
»SAVE_CFLAGS=$CFLAGS
SAVE_LIBS=$LIBS
CFLAGS=$pre_PKG_CONFIG_CFLAGS
LIBS="$LIB_PTHREAD $pre_PKG_CONFIG_LIBS"
gl_ASSERT_NO_GNULIB_POSIXCHECK
gl_ASSERT_NO_GNULIB_TESTS
gl_INIT
CFLAGS=$SAVE_CFLAGS
LIBS=$SAVE_LIBS

if test "${opsys}" = "mingw32"; then
  CPPFLAGS="$CPPFLAGS -DUSE_CRT_DLL=1 -I \${abs_top_srcdir}/nt/inc"
  «m:# »«x:Remove unneeded switches from the value of CC that goes to Makefiles
»  CC=`«k:AS_ECHO»(["$CC"]) | sed -e "s,$GCC_TEST_OPTIONS,,"`
fi

case "$opsys" in
  aix4-2) LD_SWITCH_SYSTEM_TEMACS="-Wl,-bnodelcsect" ;;

  cygwin) LD_SWITCH_SYSTEM_TEMACS="-Wl,-stack,0x00800000" ;;

  darwin)
   «x:## The -headerpad option tells ld (see man page) to leave room at the
»   «x:## end of the header for adding load commands.  Needed for dumping.
»   «x:## 0x1000 is enough for roughly 52 load commands on the x86_64
»   «x:## architecture (where they are 78 bytes each). The actual number of
»   «x:## load commands added is not consistent but normally ranges from
»   «x:## about 14 to about 34. Setting it high gets us plenty of slop and
»   «x:## only costs about 1.5K of wasted binary space.
»   headerpad_extra=1000
   if test "$HAVE_NS" = "yes"; then
     libs_nsgui="-framework AppKit"
     if test "$NS_IMPL_COCOA" = "yes"; then
        libs_nsgui="$libs_nsgui -framework IOKit"
     fi
   else
     libs_nsgui=
   fi
   LD_SWITCH_SYSTEM_TEMACS="-fno-pie -prebind $libs_nsgui -Xlinker -headerpad -Xlinker $headerpad_extra"

   «x:## This is here because src/Makefile.in did some extra fiddling around
»   «x:## with LD_SWITCH_SYSTEM.  It seems cleaner to put this in
»   «x:## LD_SWITCH_SYSTEM_TEMACS instead,
»   test "x$LD_SWITCH_SYSTEM" = "x" && test "x$GCC" != "xyes" && \
     LD_SWITCH_SYSTEM_TEMACS="-X $LD_SWITCH_SYSTEM_TEMACS"
   ;;

  «x:## LD_SWITCH_X_SITE_RPATH is a -rpath option saying where to
»  «x:## find X at run-time.
»  «x:## When handled by cpp, this was in LD_SWITCH_SYSTEM.  However, at the
»  «x:## point where configure sourced the s/*.h file, LD_SWITCH_X_SITE_RPATH
»  «x:## had not yet been defined and was expanded to null.  Hence LD_SWITCH_SYSTEM
»  «x:## had different values in configure (in ac_link) and src/Makefile.in.
»  «x:## It seems clearer therefore to put this piece in LD_SWITCH_SYSTEM_TEMACS.
»  gnu*) LD_SWITCH_SYSTEM_TEMACS="\$(LD_SWITCH_X_SITE_RPATH)" ;;

  mingw32)
   «x:## Is it any better under MinGW64 to relocate emacs into higher addresses?
»   case "$canonical" in
     x86_64-*-*) LD_SWITCH_SYSTEM_TEMACS="-Wl,-stack,0x00800000 -Wl,-heap,0x00100000 -Wl,-image-base,0x400000000 -Wl,-entry,__start -Wl,-Map,./temacs.map" ;;
     *) LD_SWITCH_SYSTEM_TEMACS="-Wl,-stack,0x00800000 -Wl,-heap,0x00100000 -Wl,-image-base,0x01000000 -Wl,-entry,__start -Wl,-Map,./temacs.map" ;;
   esac
   ;;

  *) LD_SWITCH_SYSTEM_TEMACS= ;;
esac

«m:# »«x:-nopie fixes a temacs segfault on Gentoo, OpenBSD, and other systems
»«m:# »«x:with "hardened" GCC configurations for some reason (Bug#18784).
»«m:# »«x:We don't know why -nopie works, but not segfaulting is better than
»«m:# »«x:segfaulting.  Use ac_c_werror_flag=yes when trying -nopie, otherwise
»«m:# »«x:clang keeps warning that it does not understand -nopie, and pre-4.6
»«m:# »«x:GCC has a similar problem (Bug#20338).
»«k:AC_CACHE_CHECK»([whether $CC accepts -nopie],
  [emacs_cv_prog_cc_nopie],
  [emacs_save_c_werror_flag=$ac_c_werror_flag
   emacs_save_LDFLAGS=$LDFLAGS
   ac_c_werror_flag=yes
   LDFLAGS="$LDFLAGS -nopie"
   «k:AC_LINK_IFELSE»([«k:AC_LANG_PROGRAM»([], [])],
     [emacs_cv_prog_cc_nopie=yes],
     [emacs_cv_prog_cc_nopie=no])
   ac_c_werror_flag=$emacs_save_c_werror_flag
   LDFLAGS=$emacs_save_LDFLAGS])
if test "$emacs_cv_prog_cc_nopie" = yes; then
  LD_SWITCH_SYSTEM_TEMACS="$LD_SWITCH_SYSTEM_TEMACS -nopie"
fi

if test x$ac_enable_profiling != x ; then
  case $opsys in
    *freebsd | gnu-linux) ;;
    *) LD_SWITCH_SYSTEM_TEMACS="$LD_SWITCH_SYSTEM_TEMACS -pg" ;;
  esac
fi

LD_SWITCH_SYSTEM_TEMACS="$LDFLAGS_NOCOMBRELOC $LD_SWITCH_SYSTEM_TEMACS"

«k:AC_SUBST»(«f:LD_SWITCH_SYSTEM_TEMACS»)

«x:## Common for all window systems
»if test "$window_system" != "none"; then
  «k:AC_DEFINE»(«f:HAVE_WINDOW_SYSTEM», 1, [Define if you have a window system.])
  «k:AC_DEFINE»(«f:POLL_FOR_INPUT», 1, [Define if you poll periodically to detect C-g.])
  WINDOW_SYSTEM_OBJ="fontset.o fringe.o image.o"
fi

«k:AC_SUBST»(«f:WINDOW_SYSTEM_OBJ»)

«k:AH_TOP»([/* GNU Emacs site configuration template file.

Copyright (C) 1988, 1993-1994, 1999-2002, 2004-2015
  Free Software Foundation, Inc.

This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.  */


/* No code in Emacs «x:#includes config.h twice, but some bits of code
»   intended to work with other packages as well (like gmalloc.c)
   think they can include it as many times as they like.  */
«x:#ifndef EMACS_CONFIG_H
#define EMACS_CONFIG_H
»])«x:dnl
»
«k:AH_BOTTOM»([«x:#include <conf_post.h>
»
«x:#endif /* EMACS_CONFIG_H */
»
/*
Local Variables:
mode: c
End:
*/
])«x:dnl
»
«x:#### Report on what we decided to do.
#### Report GTK as a toolkit, even if it doesn't use Xt.
#### It makes printing result more understandable as using GTK sets
#### toolkit_scroll_bars to yes by default.
»if test "${HAVE_GTK}" = "yes"; then
  USE_X_TOOLKIT="$USE_GTK_TOOLKIT"
fi

if test $USE_ACL -ne 0; then
  ACL_SUMMARY="yes $LIB_ACL"
else
  ACL_SUMMARY=no
fi

emacs_standard_dirs='Standard dirs'
«k:AS_ECHO»(["
Configured for '${canonical}'.

  Where should the build process find the source code?    ${srcdir}
  What compiler should emacs be built with?               ${CC} ${CFLAGS}
  Should Emacs use the GNU version of malloc?             ${GNU_MALLOC}${GNU_MALLOC_reason}
  Should Emacs use a relocating allocator for buffers?    ${REL_ALLOC}
  Should Emacs use mmap(2) for buffer allocation?         $use_mmap_for_buffers
  What window system should Emacs use?                    ${window_system}
  What toolkit should Emacs use?                          ${USE_X_TOOLKIT}
  Where do we find X Windows header files?                ${x_includes:-$emacs_standard_dirs}
  Where do we find X Windows libraries?                   ${x_libraries:-$emacs_standard_dirs}"])

optsep=
emacs_config_features=
for opt in XAW3D XPM JPEG TIFF GIF PNG RSVG CAIRO IMAGEMAGICK SOUND GPM DBUS \
  GCONF GSETTINGS NOTIFY ACL LIBSELINUX GNUTLS LIBXML2 FREETYPE M17N_FLT \
  LIBOTF XFT ZLIB TOOLKIT_SCROLL_BARS X_TOOLKIT X11 NS MODULES; do

    case $opt in
      NOTIFY|ACL) eval val=\${${opt}_SUMMARY} ;;
      CAIRO|TOOLKIT_SCROLL_BARS|X_TOOLKIT) eval val=\${USE_$opt} ;;
      *) eval val=\${HAVE_$opt} ;;
    esac
    case x$val in
      xno|xnone|x) continue ;;
    esac
    case $opt in
      X_TOOLKIT)
        case $val in
          GTK*|LUCID|MOTIF) opt=$val ;;
          *) continue ;;
        esac
      ;;
    esac
    «k:AS_VAR_APPEND»([emacs_config_features], ["$optsep$opt"])
    optsep=' '
done
«k:AC_DEFINE_UNQUOTED»(«f:EMACS_CONFIG_FEATURES», "${emacs_config_features}",
  [Summary of some of the main features enabled by configure.])

«k:AS_ECHO»(["  Does Emacs use -lXaw3d?                                 ${HAVE_XAW3D}
  Does Emacs use -lXpm?                                   ${HAVE_XPM}
  Does Emacs use -ljpeg?                                  ${HAVE_JPEG}
  Does Emacs use -ltiff?                                  ${HAVE_TIFF}
  Does Emacs use a gif library?                           ${HAVE_GIF} $LIBGIF
  Does Emacs use a png library?                           ${HAVE_PNG} $LIBPNG
  Does Emacs use -lrsvg-2?                                ${HAVE_RSVG}
  Does Emacs use cairo?                                   ${USE_CAIRO}
  Does Emacs use imagemagick?                             ${HAVE_IMAGEMAGICK}
  Does Emacs support sound?                               ${HAVE_SOUND}
  Does Emacs use -lgpm?                                   ${HAVE_GPM}
  Does Emacs use -ldbus?                                  ${HAVE_DBUS}
  Does Emacs use -lgconf?                                 ${HAVE_GCONF}
  Does Emacs use GSettings?                               ${HAVE_GSETTINGS}
  Does Emacs use a file notification library?             ${NOTIFY_SUMMARY}
  Does Emacs use access control lists?                    ${ACL_SUMMARY}
  Does Emacs use -lselinux?                               ${HAVE_LIBSELINUX}
  Does Emacs use -lgnutls?                                ${HAVE_GNUTLS}
  Does Emacs use -lxml2?                                  ${HAVE_LIBXML2}
  Does Emacs use -lfreetype?                              ${HAVE_FREETYPE}
  Does Emacs use -lm17n-flt?                              ${HAVE_M17N_FLT}
  Does Emacs use -lotf?                                   ${HAVE_LIBOTF}
  Does Emacs use -lxft?                                   ${HAVE_XFT}
  Does Emacs directly use zlib?                           ${HAVE_ZLIB}
  Does Emacs have dynamic modules support?                ${HAVE_MODULES}
  Does Emacs use toolkit scroll bars?                     ${USE_TOOLKIT_SCROLL_BARS}
"])

if test -n "${EMACSDATA}"; then
   «k:AS_ECHO»(["  Environment variable EMACSDATA set to:                  $EMACSDATA"])
fi
if test -n "${EMACSDOC}"; then
   «k:AS_ECHO»(["  Environment variable EMACSDOC set to:                   $EMACSDOC"])
fi

echo

if test "$HAVE_NS" = "yes"; then
   echo
   «k:AS_ECHO»(["You must run \"${MAKE-make} install\" in order to test the built application.
The installed application will go to nextstep/Emacs.app and can be
run or moved from there."])
   if test "$EN_NS_SELF_CONTAINED" = "yes"; then
      echo "The application will be fully self-contained."
    else
      «k:AS_ECHO»(["The lisp resources for the application will be installed under ${prefix}.
You may need to run \"${MAKE-make} install\" with sudo.  The application will fail
to run if these resources are not installed."])
   fi
   echo
fi

if test "${opsys}" = "cygwin"; then
  case `uname -r` in
    1.5.*) «k:AC_MSG_WARN»([[building Emacs on Cygwin 1.5 is not supported.]])
           echo
	   ;;
  esac
fi

«m:# »«x:Remove any trailing slashes in these variables.
»case $prefix in
  */) prefix=`«k:AS_DIRNAME»(["$prefix."])`;;
esac
case $exec_prefix in
  */) exec_prefix=`«k:AS_DIRNAME»(["$exec_prefix."])`;;
esac

if test "$HAVE_NS" = "yes"; then
  if test "$NS_IMPL_GNUSTEP" = yes; then
    «k:AC_CONFIG_FILES»([nextstep/GNUstep/Emacs.base/Resources/Info-gnustep.plist:nextstep/templates/Info-gnustep.plist.in \
      nextstep/GNUstep/Emacs.base/Resources/Emacs.desktop:nextstep/templates/Emacs.desktop.in])
    ns_check_file=Resources/Info-gnustep.plist
  else
    «k:AC_CONFIG_FILES»([nextstep/Cocoa/Emacs.base/Contents/Info.plist:nextstep/templates/Info.plist.in \
      nextstep/Cocoa/Emacs.base/Contents/Resources/English.lproj/InfoPlist.strings:nextstep/templates/InfoPlist.strings.in])
    ns_check_file=Contents/Info.plist
  fi
  «k:AC_SUBST»(«f:ns_check_file»)
fi

«m:dnl »«x:config.status treats $srcdir specially, so I think this is ok...
»«k:AC_CONFIG_FILES»([$srcdir/doc/man/emacs.1])

«m:dnl »«x:Obviously there is duplication here wrt $SUBDIR_MAKEFILES.
»«m:dnl »«x:You _can_ use that variable in AC_CONFIG_FILES, so long as any directory
»«m:dnl »«x:using automake (ie lib/) is explicitly listed and not "hidden" in a variable
»«m:dnl »«x:(else you get "no 'Makefile.am' found for any configure output").
»«m:dnl »«x:This will work, but you get a config.status that is not quite right
»«m:dnl »«x:(see http://lists.gnu.org/archive/html/bug-autoconf/2008-08/msg00028.html).
»«m:dnl »«x:That doesn't have any obvious consequences for Emacs, but on the whole
»«m:dnl »«x:it seems better to just live with the duplication.
»SUBDIR_MAKEFILES="lib/Makefile lib-src/Makefile oldXMenu/Makefile doc/emacs/Makefile doc/misc/Makefile doc/lispintro/Makefile doc/lispref/Makefile src/Makefile lwlib/Makefile lisp/Makefile leim/Makefile nextstep/Makefile nt/Makefile"

«k:AC_CONFIG_FILES»([Makefile lib/Makefile lib-src/Makefile oldXMenu/Makefile \
       doc/emacs/Makefile doc/misc/Makefile doc/lispintro/Makefile \
       doc/lispref/Makefile src/Makefile lwlib/Makefile lisp/Makefile \
       leim/Makefile nextstep/Makefile nt/Makefile])

«m:dnl »«x:test/ is not present in release tarfiles.
»opt_makefile=test/automated/Makefile

if test -f "$srcdir/$opt_makefile.in"; then
  SUBDIR_MAKEFILES="$SUBDIR_MAKEFILES $opt_makefile"
  «x:dnl Again, it's best not to use a variable.  Though you can add
»  «x:dnl ", [], [opt_makefile='$opt_makefile']" and it should work.
»  «k:AC_CONFIG_FILES»([test/automated/Makefile])
fi


«m:dnl »«x:The admin/ directory used to be excluded from tarfiles.
»if test -d $srcdir/admin; then
  SUBDIR_MAKEFILES="$SUBDIR_MAKEFILES admin/charsets/Makefile admin/unidata/Makefile admin/grammars/Makefile"
  «k:AC_CONFIG_FILES»([admin/charsets/Makefile])
  «k:AC_CONFIG_FILES»([admin/unidata/Makefile])
  «k:AC_CONFIG_FILES»([admin/grammars/Makefile])
fi                              «x:dnl -d admin
»

SUBDIR_MAKEFILES_IN=`echo " ${SUBDIR_MAKEFILES}" | sed -e 's| | $(srcdir)/|g' -e 's|Makefile|Makefile.in|g'`

«k:AC_SUBST»(«f:SUBDIR_MAKEFILES_IN»)

«m:dnl »«x:You might wonder (I did) why epaths.h is generated by running make,
»«m:dnl »«x:rather than just letting configure generate it from epaths.in.
»«m:dnl »«x:One reason is that the various paths are not fully expanded (see above);
»«m:dnl »«x:eg gamedir=${prefix}/var/games/emacs.
»«m:dnl »«x:Secondly, the GNU Coding standards require that one should be able
»«m:dnl »«x:to run 'make prefix=/some/where/else' and override the values set
»«m:dnl »«x:by configure.  This also explains the 'move-if-change' test and
»«m:dnl »«x:the use of force in the 'epaths-force' rule in Makefile.in.
»«k:AC_CONFIG_COMMANDS»([src/epaths.h], [
if test "${opsys}" = "mingw32"; then
  ${MAKE-make} MAKEFILE_NAME=do-not-make-Makefile epaths-force-w32
else
  ${MAKE-make} MAKEFILE_NAME=do-not-make-Makefile epaths-force
fi || «k:AC_MSG_ERROR»(['src/epaths.h' could not be made.])
], [GCC="$GCC" CPPFLAGS="$CPPFLAGS" opsys="$opsys"])

«m:dnl »«x:NB we have to cheat and use the ac_... version because abs_top_srcdir
»«m:dnl »«x:is not yet set, sigh.  Or we could use ../$srcdir/src/.gdbinit,
»«m:dnl »«x:or a symlink?
»«k:AC_CONFIG_COMMANDS»([src/.gdbinit], [
if test ! -f src/.gdbinit && test -f "$srcdir/src/.gdbinit"; then
  «k:AS_ECHO»(["source $ac_abs_top_srcdir/src/.gdbinit"]) > src/.gdbinit
fi
])

«m:dnl »«x:Perhaps this would be better named doc-emacs-emacsver.texi?
»«m:dnl »«x:See comments for etc-refcards-emacsver.tex.
»«m:dnl »«x:Since we get a doc/emacs directory generated anyway, for the Makefile,
»«m:dnl »«x:it is not quite the same.  But we are generating in $srcdir.
»«k:AC_CONFIG_COMMANDS»([doc/emacs/emacsver.texi], [
${MAKE-make} -s --no-print-directory -C doc/emacs doc-emacsver || \
«k:AC_MSG_ERROR»(['doc/emacs/emacsver.texi' could not be made.])
])

«m:dnl »«x:If we give this the more natural name, etc/refcards/emacsver.texi,
»«m:dnl »«x:then a directory etc/refcards is created in the build directory,
»«m:dnl »«x:which is probably harmless, but confusing (in out-of-tree builds).
»«m:dnl »«x:(If we were to generate etc/refcards/Makefile, this might change.)
»«m:dnl »«x:It is really $srcdir/etc/refcards/emacsver.tex that we generate.
»«k:AC_CONFIG_COMMANDS»([etc-refcards-emacsver.tex], [
${MAKE-make} -s MAKEFILE_NAME=do-not-make-Makefile etc-emacsver || \
«k:AC_MSG_ERROR»(['etc/refcards/emacsver.tex' could not be made.])
])

«k:AC_OUTPUT»

test "$MAKE" = make || «k:AC_MSG_NOTICE»([Now you can run '$MAKE'.])
